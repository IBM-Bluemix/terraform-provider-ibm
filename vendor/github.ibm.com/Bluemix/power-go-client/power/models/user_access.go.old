// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	datastore "github.ibm.com/power-iaas/service-broker/models/datastore"
)

// UserAccess Keeps tracks of individual user's access and roles
// swagger:model UserAccess
type UserAccess struct {

	// User ID
	UserID string `json:"_id,omitempty" datastore:"id"`

	// rev
	Rev string `json:"_rev,omitempty" datastore:"-"`

	// Base Role for this User
	// Enum: [user-admin user-readonly service-admin service-readonly disabled pending]
	BaseRole string `json:"baseRole,omitempty" datastore:"baseRole"`

	// A map of cloudInstanceID to role
	CloudInstances datastore.UserAccessCloudInstanceMap `json:"cloudInstances,omitempty" datastore:"cloudInstances"`

	// Member of (Tenants)
	MemberOf []string `json:"memberOf" datastore:"memberOf"`

	// Notes for development (not used internally)
	Notes string `json:"notes,omitempty" datastore:"notes,noindex,omitempty"`
}

// Validate validates this user access
func (m *UserAccess) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudInstances(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userAccessTypeBaseRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user-admin","user-readonly","service-admin","service-readonly","disabled","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userAccessTypeBaseRolePropEnum = append(userAccessTypeBaseRolePropEnum, v)
	}
}

const (

	// UserAccessBaseRoleUserAdmin captures enum value "user-admin"
	UserAccessBaseRoleUserAdmin string = "user-admin"

	// UserAccessBaseRoleUserReadonly captures enum value "user-readonly"
	UserAccessBaseRoleUserReadonly string = "user-readonly"

	// UserAccessBaseRoleServiceAdmin captures enum value "service-admin"
	UserAccessBaseRoleServiceAdmin string = "service-admin"

	// UserAccessBaseRoleServiceReadonly captures enum value "service-readonly"
	UserAccessBaseRoleServiceReadonly string = "service-readonly"

	// UserAccessBaseRoleDisabled captures enum value "disabled"
	UserAccessBaseRoleDisabled string = "disabled"

	// UserAccessBaseRolePending captures enum value "pending"
	UserAccessBaseRolePending string = "pending"
)

// prop value enum
func (m *UserAccess) validateBaseRoleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userAccessTypeBaseRolePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserAccess) validateBaseRole(formats strfmt.Registry) error {

	if swag.IsZero(m.BaseRole) { // not required
		return nil
	}

	// value enum
	if err := m.validateBaseRoleEnum("baseRole", "body", m.BaseRole); err != nil {
		return err
	}

	return nil
}

func (m *UserAccess) validateCloudInstances(formats strfmt.Registry) error {

	if swag.IsZero(m.CloudInstances) { // not required
		return nil
	}

	if err := m.CloudInstances.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cloudInstances")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserAccess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserAccess) UnmarshalBinary(b []byte) error {
	var res UserAccess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
