// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateDataVolume create data volume
// swagger:model CreateDataVolume
type CreateDataVolume struct {

	// Type of Disk {ssd, standard}
	// Required: true
	// Enum: [ssd standard]
	DiskType *string `json:"diskType"`

	// Volume Name
	// Required: true
	Name *string `json:"name"`

	// Indicates if the volume is shareable between VMs
	Shareable *bool `json:"shareable,omitempty"`

	// Volume Size (GB)
	// Required: true
	Size *float64 `json:"size"`
}

// Validate validates this create data volume
func (m *CreateDataVolume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createDataVolumeTypeDiskTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ssd","standard"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createDataVolumeTypeDiskTypePropEnum = append(createDataVolumeTypeDiskTypePropEnum, v)
	}
}

const (

	// CreateDataVolumeDiskTypeSsd captures enum value "ssd"
	CreateDataVolumeDiskTypeSsd string = "ssd"

	// CreateDataVolumeDiskTypeStandard captures enum value "standard"
	CreateDataVolumeDiskTypeStandard string = "standard"
)

// prop value enum
func (m *CreateDataVolume) validateDiskTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createDataVolumeTypeDiskTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateDataVolume) validateDiskType(formats strfmt.Registry) error {

	if err := validate.Required("diskType", "body", m.DiskType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDiskTypeEnum("diskType", "body", *m.DiskType); err != nil {
		return err
	}

	return nil
}

func (m *CreateDataVolume) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreateDataVolume) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateDataVolume) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateDataVolume) UnmarshalBinary(b []byte) error {
	var res CreateDataVolume
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
