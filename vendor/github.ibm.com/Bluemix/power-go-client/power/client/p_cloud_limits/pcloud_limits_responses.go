// Code generated by go-swagger; DO NOT EDIT.

package p_cloud_limits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/Bluemix/power-go-client/power/models"
)

// PcloudLimitsReader is a Reader for the PcloudLimits structure.
type PcloudLimitsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PcloudLimitsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPcloudLimitsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewPcloudLimitsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPcloudLimitsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPcloudLimitsOK creates a PcloudLimitsOK with default headers values
func NewPcloudLimitsOK() *PcloudLimitsOK {
	return &PcloudLimitsOK{}
}

/*PcloudLimitsOK handles this case with default header values.

OK
*/
type PcloudLimitsOK struct {
	Payload *models.Limits
}

func (o *PcloudLimitsOK) Error() string {
	return fmt.Sprintf("[GET /pcloud/v1/cloud-instances/{cloud_instance_id}/limits][%d] pcloudLimitsOK  %+v", 200, o.Payload)
}

func (o *PcloudLimitsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Limits)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudLimitsNotFound creates a PcloudLimitsNotFound with default headers values
func NewPcloudLimitsNotFound() *PcloudLimitsNotFound {
	return &PcloudLimitsNotFound{}
}

/*PcloudLimitsNotFound handles this case with default header values.

cloud instance id not found
*/
type PcloudLimitsNotFound struct {
	Payload *models.Error
}

func (o *PcloudLimitsNotFound) Error() string {
	return fmt.Sprintf("[GET /pcloud/v1/cloud-instances/{cloud_instance_id}/limits][%d] pcloudLimitsNotFound  %+v", 404, o.Payload)
}

func (o *PcloudLimitsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudLimitsInternalServerError creates a PcloudLimitsInternalServerError with default headers values
func NewPcloudLimitsInternalServerError() *PcloudLimitsInternalServerError {
	return &PcloudLimitsInternalServerError{}
}

/*PcloudLimitsInternalServerError handles this case with default header values.

Internal Server Error
*/
type PcloudLimitsInternalServerError struct {
	Payload *models.Error
}

func (o *PcloudLimitsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /pcloud/v1/cloud-instances/{cloud_instance_id}/limits][%d] pcloudLimitsInternalServerError  %+v", 500, o.Payload)
}

func (o *PcloudLimitsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
