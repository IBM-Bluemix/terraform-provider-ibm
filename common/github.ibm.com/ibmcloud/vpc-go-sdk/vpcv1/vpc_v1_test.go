/**
 * (C) Copyright IBM Corp. 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package vpcv1_test

import (
	"bytes"
	"fmt"
	"github.com/IBM/go-sdk-core/v3/core"
	"github.com/go-openapi/strfmt"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.ibm.com/ibmcloud/vpc-go-sdk/vpcv1"
	"io"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"os"
	"time"
)

var _ = Describe(`VpcV1`, func() {
	var testServer *httptest.Server
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "https://vpcv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListDedicatedHostGroups(listDedicatedHostGroupsOptions *ListDedicatedHostGroupsOptions) - Operation response error`, func() {
		version := "testString"
		listDedicatedHostGroupsPath := "/dedicated_host/groups"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listDedicatedHostGroupsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListDedicatedHostGroups with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListDedicatedHostGroupsOptions model
				listDedicatedHostGroupsOptionsModel := new(vpcv1.ListDedicatedHostGroupsOptions)
				listDedicatedHostGroupsOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listDedicatedHostGroupsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.ZoneName = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListDedicatedHostGroups(listDedicatedHostGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListDedicatedHostGroups(listDedicatedHostGroupsOptions *ListDedicatedHostGroupsOptions)`, func() {
		version := "testString"
		listDedicatedHostGroupsPath := "/dedicated_host/groups"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listDedicatedHostGroupsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "groups": [{"name": "my-host-group", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "created_at": "2019-01-01T12:00:00", "dedicated_hosts": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-host"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListDedicatedHostGroups successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListDedicatedHostGroups(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListDedicatedHostGroupsOptions model
				listDedicatedHostGroupsOptionsModel := new(vpcv1.ListDedicatedHostGroupsOptions)
				listDedicatedHostGroupsOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listDedicatedHostGroupsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.ZoneName = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListDedicatedHostGroups(listDedicatedHostGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListDedicatedHostGroups with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListDedicatedHostGroupsOptions model
				listDedicatedHostGroupsOptionsModel := new(vpcv1.ListDedicatedHostGroupsOptions)
				listDedicatedHostGroupsOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listDedicatedHostGroupsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.ZoneName = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListDedicatedHostGroups(listDedicatedHostGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateDedicatedHostGroup(createDedicatedHostGroupOptions *CreateDedicatedHostGroupOptions) - Operation response error`, func() {
		version := "testString"
		createDedicatedHostGroupPath := "/dedicated_host/groups"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createDedicatedHostGroupPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateDedicatedHostGroup with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateDedicatedHostGroupOptions model
				createDedicatedHostGroupOptionsModel := new(vpcv1.CreateDedicatedHostGroupOptions)
				createDedicatedHostGroupOptionsModel.Name = core.StringPtr("my-host-group")
				createDedicatedHostGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createDedicatedHostGroupOptionsModel.Zone = zoneIdentityModel
				createDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateDedicatedHostGroup(createDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateDedicatedHostGroup(createDedicatedHostGroupOptions *CreateDedicatedHostGroupOptions)`, func() {
		version := "testString"
		createDedicatedHostGroupPath := "/dedicated_host/groups"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createDedicatedHostGroupPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"name": "my-host-group", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "created_at": "2019-01-01T12:00:00", "dedicated_hosts": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-host"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke CreateDedicatedHostGroup successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateDedicatedHostGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateDedicatedHostGroupOptions model
				createDedicatedHostGroupOptionsModel := new(vpcv1.CreateDedicatedHostGroupOptions)
				createDedicatedHostGroupOptionsModel.Name = core.StringPtr("my-host-group")
				createDedicatedHostGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createDedicatedHostGroupOptionsModel.Zone = zoneIdentityModel
				createDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateDedicatedHostGroup(createDedicatedHostGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateDedicatedHostGroup with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateDedicatedHostGroupOptions model
				createDedicatedHostGroupOptionsModel := new(vpcv1.CreateDedicatedHostGroupOptions)
				createDedicatedHostGroupOptionsModel.Name = core.StringPtr("my-host-group")
				createDedicatedHostGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createDedicatedHostGroupOptionsModel.Zone = zoneIdentityModel
				createDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateDedicatedHostGroup(createDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteDedicatedHostGroup(deleteDedicatedHostGroupOptions *DeleteDedicatedHostGroupOptions)`, func() {
		version := "testString"
		deleteDedicatedHostGroupPath := "/dedicated_host/groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteDedicatedHostGroupPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteDedicatedHostGroup successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteDedicatedHostGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteDedicatedHostGroupOptions model
				deleteDedicatedHostGroupOptionsModel := new(vpcv1.DeleteDedicatedHostGroupOptions)
				deleteDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				deleteDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteDedicatedHostGroup(deleteDedicatedHostGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteDedicatedHostGroup with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteDedicatedHostGroupOptions model
				deleteDedicatedHostGroupOptionsModel := new(vpcv1.DeleteDedicatedHostGroupOptions)
				deleteDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				deleteDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteDedicatedHostGroup(deleteDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteDedicatedHostGroupOptions model with no property values
				deleteDedicatedHostGroupOptionsModelNew := new(vpcv1.DeleteDedicatedHostGroupOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteDedicatedHostGroup(deleteDedicatedHostGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDedicatedHostGroup(getDedicatedHostGroupOptions *GetDedicatedHostGroupOptions) - Operation response error`, func() {
		version := "testString"
		getDedicatedHostGroupPath := "/dedicated_host/groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getDedicatedHostGroupPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetDedicatedHostGroup with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetDedicatedHostGroupOptions model
				getDedicatedHostGroupOptionsModel := new(vpcv1.GetDedicatedHostGroupOptions)
				getDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetDedicatedHostGroup(getDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetDedicatedHostGroup(getDedicatedHostGroupOptions *GetDedicatedHostGroupOptions)`, func() {
		version := "testString"
		getDedicatedHostGroupPath := "/dedicated_host/groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getDedicatedHostGroupPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"name": "my-host-group", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "created_at": "2019-01-01T12:00:00", "dedicated_hosts": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-host"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke GetDedicatedHostGroup successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetDedicatedHostGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetDedicatedHostGroupOptions model
				getDedicatedHostGroupOptionsModel := new(vpcv1.GetDedicatedHostGroupOptions)
				getDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetDedicatedHostGroup(getDedicatedHostGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetDedicatedHostGroup with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetDedicatedHostGroupOptions model
				getDedicatedHostGroupOptionsModel := new(vpcv1.GetDedicatedHostGroupOptions)
				getDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetDedicatedHostGroup(getDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetDedicatedHostGroupOptions model with no property values
				getDedicatedHostGroupOptionsModelNew := new(vpcv1.GetDedicatedHostGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetDedicatedHostGroup(getDedicatedHostGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateDedicatedHostGroup(updateDedicatedHostGroupOptions *UpdateDedicatedHostGroupOptions) - Operation response error`, func() {
		version := "testString"
		updateDedicatedHostGroupPath := "/dedicated_host/groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateDedicatedHostGroupPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateDedicatedHostGroup with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateDedicatedHostGroupOptions model
				updateDedicatedHostGroupOptionsModel := new(vpcv1.UpdateDedicatedHostGroupOptions)
				updateDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostGroupOptionsModel.Name = core.StringPtr("my-host-group")
				updateDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateDedicatedHostGroup(updateDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateDedicatedHostGroup(updateDedicatedHostGroupOptions *UpdateDedicatedHostGroupOptions)`, func() {
		version := "testString"
		updateDedicatedHostGroupPath := "/dedicated_host/groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateDedicatedHostGroupPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"name": "my-host-group", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "created_at": "2019-01-01T12:00:00", "dedicated_hosts": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-host"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateDedicatedHostGroup successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateDedicatedHostGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateDedicatedHostGroupOptions model
				updateDedicatedHostGroupOptionsModel := new(vpcv1.UpdateDedicatedHostGroupOptions)
				updateDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostGroupOptionsModel.Name = core.StringPtr("my-host-group")
				updateDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateDedicatedHostGroup(updateDedicatedHostGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateDedicatedHostGroup with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateDedicatedHostGroupOptions model
				updateDedicatedHostGroupOptionsModel := new(vpcv1.UpdateDedicatedHostGroupOptions)
				updateDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostGroupOptionsModel.Name = core.StringPtr("my-host-group")
				updateDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateDedicatedHostGroup(updateDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateDedicatedHostGroupOptions model with no property values
				updateDedicatedHostGroupOptionsModelNew := new(vpcv1.UpdateDedicatedHostGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateDedicatedHostGroup(updateDedicatedHostGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListDedicatedHostProfiles(listDedicatedHostProfilesOptions *ListDedicatedHostProfilesOptions) - Operation response error`, func() {
		version := "testString"
		listDedicatedHostProfilesPath := "/dedicated_host/profiles"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listDedicatedHostProfilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListDedicatedHostProfiles with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListDedicatedHostProfilesOptions model
				listDedicatedHostProfilesOptionsModel := new(vpcv1.ListDedicatedHostProfilesOptions)
				listDedicatedHostProfilesOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostProfilesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listDedicatedHostProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListDedicatedHostProfiles(listDedicatedHostProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListDedicatedHostProfiles(listDedicatedHostProfilesOptions *ListDedicatedHostProfilesOptions)`, func() {
		version := "testString"
		listDedicatedHostProfilesPath := "/dedicated_host/profiles"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listDedicatedHostProfilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/profiles?start=9da91&limit=20"}, "total_count": 132, "profiles": [{"name": "m-62x496", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "port_speed": {"type": "fixed", "value": 1000}, "memory": {"type": "fixed", "value": 16}, "socket_count": {"type": "fixed", "value": 2}, "vcpu_architecture": {"type": "fixed", "value": "amd64"}, "vcpu_count": {"type": "fixed", "value": 16}}]}`)
				}))
			})
			It(`Invoke ListDedicatedHostProfiles successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListDedicatedHostProfiles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListDedicatedHostProfilesOptions model
				listDedicatedHostProfilesOptionsModel := new(vpcv1.ListDedicatedHostProfilesOptions)
				listDedicatedHostProfilesOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostProfilesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listDedicatedHostProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListDedicatedHostProfiles(listDedicatedHostProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListDedicatedHostProfiles with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListDedicatedHostProfilesOptions model
				listDedicatedHostProfilesOptionsModel := new(vpcv1.ListDedicatedHostProfilesOptions)
				listDedicatedHostProfilesOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostProfilesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listDedicatedHostProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListDedicatedHostProfiles(listDedicatedHostProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDedicatedHostProfile(getDedicatedHostProfileOptions *GetDedicatedHostProfileOptions) - Operation response error`, func() {
		version := "testString"
		getDedicatedHostProfilePath := "/dedicated_host/profiles/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getDedicatedHostProfilePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetDedicatedHostProfile with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetDedicatedHostProfileOptions model
				getDedicatedHostProfileOptionsModel := new(vpcv1.GetDedicatedHostProfileOptions)
				getDedicatedHostProfileOptionsModel.Name = core.StringPtr("testString")
				getDedicatedHostProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetDedicatedHostProfile(getDedicatedHostProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetDedicatedHostProfile(getDedicatedHostProfileOptions *GetDedicatedHostProfileOptions)`, func() {
		version := "testString"
		getDedicatedHostProfilePath := "/dedicated_host/profiles/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getDedicatedHostProfilePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"name": "m-62x496", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "port_speed": {"type": "fixed", "value": 1000}, "memory": {"type": "fixed", "value": 16}, "socket_count": {"type": "fixed", "value": 2}, "vcpu_architecture": {"type": "fixed", "value": "amd64"}, "vcpu_count": {"type": "fixed", "value": 16}}`)
				}))
			})
			It(`Invoke GetDedicatedHostProfile successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetDedicatedHostProfile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetDedicatedHostProfileOptions model
				getDedicatedHostProfileOptionsModel := new(vpcv1.GetDedicatedHostProfileOptions)
				getDedicatedHostProfileOptionsModel.Name = core.StringPtr("testString")
				getDedicatedHostProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetDedicatedHostProfile(getDedicatedHostProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetDedicatedHostProfile with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetDedicatedHostProfileOptions model
				getDedicatedHostProfileOptionsModel := new(vpcv1.GetDedicatedHostProfileOptions)
				getDedicatedHostProfileOptionsModel.Name = core.StringPtr("testString")
				getDedicatedHostProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetDedicatedHostProfile(getDedicatedHostProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetDedicatedHostProfileOptions model with no property values
				getDedicatedHostProfileOptionsModelNew := new(vpcv1.GetDedicatedHostProfileOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetDedicatedHostProfile(getDedicatedHostProfileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListDedicatedHosts(listDedicatedHostsOptions *ListDedicatedHostsOptions) - Operation response error`, func() {
		version := "testString"
		listDedicatedHostsPath := "/dedicated_hosts"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listDedicatedHostsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["dedicated_host_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListDedicatedHosts with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListDedicatedHostsOptions model
				listDedicatedHostsOptionsModel := new(vpcv1.ListDedicatedHostsOptions)
				listDedicatedHostsOptionsModel.DedicatedHostGroupID = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listDedicatedHostsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.ZoneName = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListDedicatedHosts(listDedicatedHostsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListDedicatedHosts(listDedicatedHostsOptions *ListDedicatedHostsOptions)`, func() {
		version := "testString"
		listDedicatedHostsPath := "/dedicated_hosts"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listDedicatedHostsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["dedicated_host_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "dedicated_hosts": [{"name": "my-host", "instance_placement_enabled": true, "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "admin_state": "unavailable", "available_memory": 128, "available_vcpu": {"architecture": "amd64", "count": 4}, "created_at": "2019-01-01T12:00:00", "group": {"name": "my-host-group", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0"}, "instances": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}], "lifecycle_state": "pending", "profile": {"name": "m-62x496", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListDedicatedHosts successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListDedicatedHosts(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListDedicatedHostsOptions model
				listDedicatedHostsOptionsModel := new(vpcv1.ListDedicatedHostsOptions)
				listDedicatedHostsOptionsModel.DedicatedHostGroupID = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listDedicatedHostsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.ZoneName = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListDedicatedHosts(listDedicatedHostsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListDedicatedHosts with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListDedicatedHostsOptions model
				listDedicatedHostsOptionsModel := new(vpcv1.ListDedicatedHostsOptions)
				listDedicatedHostsOptionsModel.DedicatedHostGroupID = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listDedicatedHostsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.ZoneName = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListDedicatedHosts(listDedicatedHostsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateDedicatedHost(createDedicatedHostOptions *CreateDedicatedHostOptions) - Operation response error`, func() {
		version := "testString"
		createDedicatedHostPath := "/dedicated_hosts"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createDedicatedHostPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateDedicatedHost with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DedicatedHostPrototypeGroupDedicatedHostGroupIdentityByID model
				dedicatedHostPrototypeGroupModel := new(vpcv1.DedicatedHostPrototypeGroupDedicatedHostGroupIdentityByID)
				dedicatedHostPrototypeGroupModel.ID = core.StringPtr("bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0")

				// Construct an instance of the DedicatedHostPrototypeProfileDedicatedHostProfileIdentityByName model
				dedicatedHostPrototypeProfileModel := new(vpcv1.DedicatedHostPrototypeProfileDedicatedHostProfileIdentityByName)
				dedicatedHostPrototypeProfileModel.Name = core.StringPtr("m-62x496")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateDedicatedHostOptions model
				createDedicatedHostOptionsModel := new(vpcv1.CreateDedicatedHostOptions)
				createDedicatedHostOptionsModel.Group = dedicatedHostPrototypeGroupModel
				createDedicatedHostOptionsModel.Profile = dedicatedHostPrototypeProfileModel
				createDedicatedHostOptionsModel.Name = core.StringPtr("my-host")
				createDedicatedHostOptionsModel.InstancePlacementEnabled = core.BoolPtr(true)
				createDedicatedHostOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateDedicatedHost(createDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateDedicatedHost(createDedicatedHostOptions *CreateDedicatedHostOptions)`, func() {
		version := "testString"
		createDedicatedHostPath := "/dedicated_hosts"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createDedicatedHostPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"name": "my-host", "instance_placement_enabled": true, "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "admin_state": "unavailable", "available_memory": 128, "available_vcpu": {"architecture": "amd64", "count": 4}, "created_at": "2019-01-01T12:00:00", "group": {"name": "my-host-group", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0"}, "instances": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}], "lifecycle_state": "pending", "profile": {"name": "m-62x496", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke CreateDedicatedHost successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateDedicatedHost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the DedicatedHostPrototypeGroupDedicatedHostGroupIdentityByID model
				dedicatedHostPrototypeGroupModel := new(vpcv1.DedicatedHostPrototypeGroupDedicatedHostGroupIdentityByID)
				dedicatedHostPrototypeGroupModel.ID = core.StringPtr("bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0")

				// Construct an instance of the DedicatedHostPrototypeProfileDedicatedHostProfileIdentityByName model
				dedicatedHostPrototypeProfileModel := new(vpcv1.DedicatedHostPrototypeProfileDedicatedHostProfileIdentityByName)
				dedicatedHostPrototypeProfileModel.Name = core.StringPtr("m-62x496")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateDedicatedHostOptions model
				createDedicatedHostOptionsModel := new(vpcv1.CreateDedicatedHostOptions)
				createDedicatedHostOptionsModel.Group = dedicatedHostPrototypeGroupModel
				createDedicatedHostOptionsModel.Profile = dedicatedHostPrototypeProfileModel
				createDedicatedHostOptionsModel.Name = core.StringPtr("my-host")
				createDedicatedHostOptionsModel.InstancePlacementEnabled = core.BoolPtr(true)
				createDedicatedHostOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateDedicatedHost(createDedicatedHostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateDedicatedHost with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DedicatedHostPrototypeGroupDedicatedHostGroupIdentityByID model
				dedicatedHostPrototypeGroupModel := new(vpcv1.DedicatedHostPrototypeGroupDedicatedHostGroupIdentityByID)
				dedicatedHostPrototypeGroupModel.ID = core.StringPtr("bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0")

				// Construct an instance of the DedicatedHostPrototypeProfileDedicatedHostProfileIdentityByName model
				dedicatedHostPrototypeProfileModel := new(vpcv1.DedicatedHostPrototypeProfileDedicatedHostProfileIdentityByName)
				dedicatedHostPrototypeProfileModel.Name = core.StringPtr("m-62x496")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateDedicatedHostOptions model
				createDedicatedHostOptionsModel := new(vpcv1.CreateDedicatedHostOptions)
				createDedicatedHostOptionsModel.Group = dedicatedHostPrototypeGroupModel
				createDedicatedHostOptionsModel.Profile = dedicatedHostPrototypeProfileModel
				createDedicatedHostOptionsModel.Name = core.StringPtr("my-host")
				createDedicatedHostOptionsModel.InstancePlacementEnabled = core.BoolPtr(true)
				createDedicatedHostOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateDedicatedHost(createDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateDedicatedHostOptions model with no property values
				createDedicatedHostOptionsModelNew := new(vpcv1.CreateDedicatedHostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateDedicatedHost(createDedicatedHostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteDedicatedHost(deleteDedicatedHostOptions *DeleteDedicatedHostOptions)`, func() {
		version := "testString"
		deleteDedicatedHostPath := "/dedicated_hosts/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteDedicatedHostPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteDedicatedHost successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteDedicatedHost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteDedicatedHostOptions model
				deleteDedicatedHostOptionsModel := new(vpcv1.DeleteDedicatedHostOptions)
				deleteDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				deleteDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteDedicatedHost(deleteDedicatedHostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteDedicatedHost with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteDedicatedHostOptions model
				deleteDedicatedHostOptionsModel := new(vpcv1.DeleteDedicatedHostOptions)
				deleteDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				deleteDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteDedicatedHost(deleteDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteDedicatedHostOptions model with no property values
				deleteDedicatedHostOptionsModelNew := new(vpcv1.DeleteDedicatedHostOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteDedicatedHost(deleteDedicatedHostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDedicatedHost(getDedicatedHostOptions *GetDedicatedHostOptions) - Operation response error`, func() {
		version := "testString"
		getDedicatedHostPath := "/dedicated_hosts/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getDedicatedHostPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetDedicatedHost with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetDedicatedHostOptions model
				getDedicatedHostOptionsModel := new(vpcv1.GetDedicatedHostOptions)
				getDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetDedicatedHost(getDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetDedicatedHost(getDedicatedHostOptions *GetDedicatedHostOptions)`, func() {
		version := "testString"
		getDedicatedHostPath := "/dedicated_hosts/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getDedicatedHostPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"name": "my-host", "instance_placement_enabled": true, "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "admin_state": "unavailable", "available_memory": 128, "available_vcpu": {"architecture": "amd64", "count": 4}, "created_at": "2019-01-01T12:00:00", "group": {"name": "my-host-group", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0"}, "instances": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}], "lifecycle_state": "pending", "profile": {"name": "m-62x496", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke GetDedicatedHost successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetDedicatedHost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetDedicatedHostOptions model
				getDedicatedHostOptionsModel := new(vpcv1.GetDedicatedHostOptions)
				getDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetDedicatedHost(getDedicatedHostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetDedicatedHost with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetDedicatedHostOptions model
				getDedicatedHostOptionsModel := new(vpcv1.GetDedicatedHostOptions)
				getDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetDedicatedHost(getDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetDedicatedHostOptions model with no property values
				getDedicatedHostOptionsModelNew := new(vpcv1.GetDedicatedHostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetDedicatedHost(getDedicatedHostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateDedicatedHost(updateDedicatedHostOptions *UpdateDedicatedHostOptions) - Operation response error`, func() {
		version := "testString"
		updateDedicatedHostPath := "/dedicated_hosts/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateDedicatedHostPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateDedicatedHost with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateDedicatedHostOptions model
				updateDedicatedHostOptionsModel := new(vpcv1.UpdateDedicatedHostOptions)
				updateDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostOptionsModel.Name = core.StringPtr("my-host")
				updateDedicatedHostOptionsModel.InstancePlacementEnabled = core.BoolPtr(true)
				updateDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateDedicatedHost(updateDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateDedicatedHost(updateDedicatedHostOptions *UpdateDedicatedHostOptions)`, func() {
		version := "testString"
		updateDedicatedHostPath := "/dedicated_hosts/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateDedicatedHostPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"name": "my-host", "instance_placement_enabled": true, "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "admin_state": "unavailable", "available_memory": 128, "available_vcpu": {"architecture": "amd64", "count": 4}, "created_at": "2019-01-01T12:00:00", "group": {"name": "my-host-group", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0"}, "instances": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}], "lifecycle_state": "pending", "profile": {"name": "m-62x496", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateDedicatedHost successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateDedicatedHost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateDedicatedHostOptions model
				updateDedicatedHostOptionsModel := new(vpcv1.UpdateDedicatedHostOptions)
				updateDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostOptionsModel.Name = core.StringPtr("my-host")
				updateDedicatedHostOptionsModel.InstancePlacementEnabled = core.BoolPtr(true)
				updateDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateDedicatedHost(updateDedicatedHostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateDedicatedHost with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateDedicatedHostOptions model
				updateDedicatedHostOptionsModel := new(vpcv1.UpdateDedicatedHostOptions)
				updateDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostOptionsModel.Name = core.StringPtr("my-host")
				updateDedicatedHostOptionsModel.InstancePlacementEnabled = core.BoolPtr(true)
				updateDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateDedicatedHost(updateDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateDedicatedHostOptions model with no property values
				updateDedicatedHostOptionsModelNew := new(vpcv1.UpdateDedicatedHostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateDedicatedHost(updateDedicatedHostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "https://vpcv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListFloatingIps(listFloatingIpsOptions *ListFloatingIpsOptions) - Operation response error`, func() {
		version := "testString"
		listFloatingIpsPath := "/floating_ips"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listFloatingIpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListFloatingIps with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListFloatingIpsOptions model
				listFloatingIpsOptionsModel := new(vpcv1.ListFloatingIpsOptions)
				listFloatingIpsOptionsModel.Start = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listFloatingIpsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListFloatingIps(listFloatingIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListFloatingIps(listFloatingIpsOptions *ListFloatingIpsOptions)`, func() {
		version := "testString"
		listFloatingIpsPath := "/floating_ips"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listFloatingIpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListFloatingIps successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListFloatingIps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListFloatingIpsOptions model
				listFloatingIpsOptionsModel := new(vpcv1.ListFloatingIpsOptions)
				listFloatingIpsOptionsModel.Start = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listFloatingIpsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListFloatingIps(listFloatingIpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListFloatingIps with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListFloatingIpsOptions model
				listFloatingIpsOptionsModel := new(vpcv1.ListFloatingIpsOptions)
				listFloatingIpsOptionsModel.Start = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listFloatingIpsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListFloatingIps(listFloatingIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReserveFloatingIp(reserveFloatingIpOptions *ReserveFloatingIpOptions) - Operation response error`, func() {
		version := "testString"
		reserveFloatingIpPath := "/floating_ips"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(reserveFloatingIpPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReserveFloatingIp with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the FloatingIPPrototypeFloatingIPByZone model
				floatingIpPrototypeModel := new(vpcv1.FloatingIPPrototypeFloatingIPByZone)
				floatingIpPrototypeModel.Name = core.StringPtr("my-floating-ip")
				floatingIpPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				floatingIpPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the ReserveFloatingIpOptions model
				reserveFloatingIpOptionsModel := new(vpcv1.ReserveFloatingIpOptions)
				reserveFloatingIpOptionsModel.FloatingIPPrototype = floatingIpPrototypeModel
				reserveFloatingIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ReserveFloatingIp(reserveFloatingIpOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReserveFloatingIp(reserveFloatingIpOptions *ReserveFloatingIpOptions)`, func() {
		version := "testString"
		reserveFloatingIpPath := "/floating_ips"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(reserveFloatingIpPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke ReserveFloatingIp successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ReserveFloatingIp(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the FloatingIPPrototypeFloatingIPByZone model
				floatingIpPrototypeModel := new(vpcv1.FloatingIPPrototypeFloatingIPByZone)
				floatingIpPrototypeModel.Name = core.StringPtr("my-floating-ip")
				floatingIpPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				floatingIpPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the ReserveFloatingIpOptions model
				reserveFloatingIpOptionsModel := new(vpcv1.ReserveFloatingIpOptions)
				reserveFloatingIpOptionsModel.FloatingIPPrototype = floatingIpPrototypeModel
				reserveFloatingIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ReserveFloatingIp(reserveFloatingIpOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ReserveFloatingIp with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the FloatingIPPrototypeFloatingIPByZone model
				floatingIpPrototypeModel := new(vpcv1.FloatingIPPrototypeFloatingIPByZone)
				floatingIpPrototypeModel.Name = core.StringPtr("my-floating-ip")
				floatingIpPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				floatingIpPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the ReserveFloatingIpOptions model
				reserveFloatingIpOptionsModel := new(vpcv1.ReserveFloatingIpOptions)
				reserveFloatingIpOptionsModel.FloatingIPPrototype = floatingIpPrototypeModel
				reserveFloatingIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ReserveFloatingIp(reserveFloatingIpOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReserveFloatingIpOptions model with no property values
				reserveFloatingIpOptionsModelNew := new(vpcv1.ReserveFloatingIpOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ReserveFloatingIp(reserveFloatingIpOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReleaseFloatingIp(releaseFloatingIpOptions *ReleaseFloatingIpOptions)`, func() {
		version := "testString"
		releaseFloatingIpPath := "/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(releaseFloatingIpPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke ReleaseFloatingIp successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.ReleaseFloatingIp(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the ReleaseFloatingIpOptions model
				releaseFloatingIpOptionsModel := new(vpcv1.ReleaseFloatingIpOptions)
				releaseFloatingIpOptionsModel.ID = core.StringPtr("testString")
				releaseFloatingIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.ReleaseFloatingIp(releaseFloatingIpOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke ReleaseFloatingIp with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ReleaseFloatingIpOptions model
				releaseFloatingIpOptionsModel := new(vpcv1.ReleaseFloatingIpOptions)
				releaseFloatingIpOptionsModel.ID = core.StringPtr("testString")
				releaseFloatingIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.ReleaseFloatingIp(releaseFloatingIpOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the ReleaseFloatingIpOptions model with no property values
				releaseFloatingIpOptionsModelNew := new(vpcv1.ReleaseFloatingIpOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.ReleaseFloatingIp(releaseFloatingIpOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetFloatingIp(getFloatingIpOptions *GetFloatingIpOptions) - Operation response error`, func() {
		version := "testString"
		getFloatingIpPath := "/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getFloatingIpPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetFloatingIp with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetFloatingIpOptions model
				getFloatingIpOptionsModel := new(vpcv1.GetFloatingIpOptions)
				getFloatingIpOptionsModel.ID = core.StringPtr("testString")
				getFloatingIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetFloatingIp(getFloatingIpOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetFloatingIp(getFloatingIpOptions *GetFloatingIpOptions)`, func() {
		version := "testString"
		getFloatingIpPath := "/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getFloatingIpPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke GetFloatingIp successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetFloatingIp(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetFloatingIpOptions model
				getFloatingIpOptionsModel := new(vpcv1.GetFloatingIpOptions)
				getFloatingIpOptionsModel.ID = core.StringPtr("testString")
				getFloatingIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetFloatingIp(getFloatingIpOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetFloatingIp with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetFloatingIpOptions model
				getFloatingIpOptionsModel := new(vpcv1.GetFloatingIpOptions)
				getFloatingIpOptionsModel.ID = core.StringPtr("testString")
				getFloatingIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetFloatingIp(getFloatingIpOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetFloatingIpOptions model with no property values
				getFloatingIpOptionsModelNew := new(vpcv1.GetFloatingIpOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetFloatingIp(getFloatingIpOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateFloatingIp(updateFloatingIpOptions *UpdateFloatingIpOptions) - Operation response error`, func() {
		version := "testString"
		updateFloatingIpPath := "/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateFloatingIpPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateFloatingIp with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkInterfaceIdentityByID model
				networkInterfaceIdentityModel := new(vpcv1.NetworkInterfaceIdentityByID)
				networkInterfaceIdentityModel.ID = core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")

				// Construct an instance of the UpdateFloatingIpOptions model
				updateFloatingIpOptionsModel := new(vpcv1.UpdateFloatingIpOptions)
				updateFloatingIpOptionsModel.ID = core.StringPtr("testString")
				updateFloatingIpOptionsModel.Name = core.StringPtr("my-floating-ip")
				updateFloatingIpOptionsModel.Target = networkInterfaceIdentityModel
				updateFloatingIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateFloatingIp(updateFloatingIpOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateFloatingIp(updateFloatingIpOptions *UpdateFloatingIpOptions)`, func() {
		version := "testString"
		updateFloatingIpPath := "/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateFloatingIpPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateFloatingIp successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateFloatingIp(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkInterfaceIdentityByID model
				networkInterfaceIdentityModel := new(vpcv1.NetworkInterfaceIdentityByID)
				networkInterfaceIdentityModel.ID = core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")

				// Construct an instance of the UpdateFloatingIpOptions model
				updateFloatingIpOptionsModel := new(vpcv1.UpdateFloatingIpOptions)
				updateFloatingIpOptionsModel.ID = core.StringPtr("testString")
				updateFloatingIpOptionsModel.Name = core.StringPtr("my-floating-ip")
				updateFloatingIpOptionsModel.Target = networkInterfaceIdentityModel
				updateFloatingIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateFloatingIp(updateFloatingIpOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateFloatingIp with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkInterfaceIdentityByID model
				networkInterfaceIdentityModel := new(vpcv1.NetworkInterfaceIdentityByID)
				networkInterfaceIdentityModel.ID = core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")

				// Construct an instance of the UpdateFloatingIpOptions model
				updateFloatingIpOptionsModel := new(vpcv1.UpdateFloatingIpOptions)
				updateFloatingIpOptionsModel.ID = core.StringPtr("testString")
				updateFloatingIpOptionsModel.Name = core.StringPtr("my-floating-ip")
				updateFloatingIpOptionsModel.Target = networkInterfaceIdentityModel
				updateFloatingIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateFloatingIp(updateFloatingIpOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateFloatingIpOptions model with no property values
				updateFloatingIpOptionsModelNew := new(vpcv1.UpdateFloatingIpOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateFloatingIp(updateFloatingIpOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "https://vpcv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListFlowLogCollectors(listFlowLogCollectorsOptions *ListFlowLogCollectorsOptions) - Operation response error`, func() {
		version := "testString"
		listFlowLogCollectorsPath := "/flow_log_collectors"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listFlowLogCollectorsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.crn"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["target.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["target.resource_type"]).To(Equal([]string{"vpc"}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListFlowLogCollectors with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListFlowLogCollectorsOptions model
				listFlowLogCollectorsOptionsModel := new(vpcv1.ListFlowLogCollectorsOptions)
				listFlowLogCollectorsOptionsModel.Start = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listFlowLogCollectorsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.Name = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VpcID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VpcCrn = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VpcName = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.TargetID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.TargetResourceType = core.StringPtr("vpc")
				listFlowLogCollectorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListFlowLogCollectors(listFlowLogCollectorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListFlowLogCollectors(listFlowLogCollectorsOptions *ListFlowLogCollectorsOptions)`, func() {
		version := "testString"
		listFlowLogCollectorsPath := "/flow_log_collectors"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listFlowLogCollectorsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.crn"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["target.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["target.resource_type"]).To(Equal([]string{"vpc"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "flow_log_collectors": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-flow-log-collector", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "active": true, "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}]}`)
				}))
			})
			It(`Invoke ListFlowLogCollectors successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListFlowLogCollectors(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListFlowLogCollectorsOptions model
				listFlowLogCollectorsOptionsModel := new(vpcv1.ListFlowLogCollectorsOptions)
				listFlowLogCollectorsOptionsModel.Start = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listFlowLogCollectorsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.Name = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VpcID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VpcCrn = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VpcName = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.TargetID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.TargetResourceType = core.StringPtr("vpc")
				listFlowLogCollectorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListFlowLogCollectors(listFlowLogCollectorsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListFlowLogCollectors with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListFlowLogCollectorsOptions model
				listFlowLogCollectorsOptionsModel := new(vpcv1.ListFlowLogCollectorsOptions)
				listFlowLogCollectorsOptionsModel.Start = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listFlowLogCollectorsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.Name = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VpcID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VpcCrn = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VpcName = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.TargetID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.TargetResourceType = core.StringPtr("vpc")
				listFlowLogCollectorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListFlowLogCollectors(listFlowLogCollectorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateFlowLogCollector(createFlowLogCollectorOptions *CreateFlowLogCollectorOptions) - Operation response error`, func() {
		version := "testString"
		createFlowLogCollectorPath := "/flow_log_collectors"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createFlowLogCollectorPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateFlowLogCollector with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CloudObjectStorageBucketIdentityByName model
				cloudObjectStorageBucketIdentityModel := new(vpcv1.CloudObjectStorageBucketIdentityByName)
				cloudObjectStorageBucketIdentityModel.Name = core.StringPtr("bucket-27200-lwx4cfvcue")

				// Construct an instance of the FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				flowLogCollectorPrototypeTargetModel := new(vpcv1.FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				flowLogCollectorPrototypeTargetModel.ID = core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateFlowLogCollectorOptions model
				createFlowLogCollectorOptionsModel := new(vpcv1.CreateFlowLogCollectorOptions)
				createFlowLogCollectorOptionsModel.StorageBucket = cloudObjectStorageBucketIdentityModel
				createFlowLogCollectorOptionsModel.Target = flowLogCollectorPrototypeTargetModel
				createFlowLogCollectorOptionsModel.Active = core.BoolPtr(false)
				createFlowLogCollectorOptionsModel.Name = core.StringPtr("my-flow-log-collector")
				createFlowLogCollectorOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateFlowLogCollector(createFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateFlowLogCollector(createFlowLogCollectorOptions *CreateFlowLogCollectorOptions)`, func() {
		version := "testString"
		createFlowLogCollectorPath := "/flow_log_collectors"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createFlowLogCollectorPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-flow-log-collector", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "active": true, "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke CreateFlowLogCollector successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateFlowLogCollector(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CloudObjectStorageBucketIdentityByName model
				cloudObjectStorageBucketIdentityModel := new(vpcv1.CloudObjectStorageBucketIdentityByName)
				cloudObjectStorageBucketIdentityModel.Name = core.StringPtr("bucket-27200-lwx4cfvcue")

				// Construct an instance of the FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				flowLogCollectorPrototypeTargetModel := new(vpcv1.FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				flowLogCollectorPrototypeTargetModel.ID = core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateFlowLogCollectorOptions model
				createFlowLogCollectorOptionsModel := new(vpcv1.CreateFlowLogCollectorOptions)
				createFlowLogCollectorOptionsModel.StorageBucket = cloudObjectStorageBucketIdentityModel
				createFlowLogCollectorOptionsModel.Target = flowLogCollectorPrototypeTargetModel
				createFlowLogCollectorOptionsModel.Active = core.BoolPtr(false)
				createFlowLogCollectorOptionsModel.Name = core.StringPtr("my-flow-log-collector")
				createFlowLogCollectorOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateFlowLogCollector(createFlowLogCollectorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateFlowLogCollector with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CloudObjectStorageBucketIdentityByName model
				cloudObjectStorageBucketIdentityModel := new(vpcv1.CloudObjectStorageBucketIdentityByName)
				cloudObjectStorageBucketIdentityModel.Name = core.StringPtr("bucket-27200-lwx4cfvcue")

				// Construct an instance of the FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				flowLogCollectorPrototypeTargetModel := new(vpcv1.FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				flowLogCollectorPrototypeTargetModel.ID = core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateFlowLogCollectorOptions model
				createFlowLogCollectorOptionsModel := new(vpcv1.CreateFlowLogCollectorOptions)
				createFlowLogCollectorOptionsModel.StorageBucket = cloudObjectStorageBucketIdentityModel
				createFlowLogCollectorOptionsModel.Target = flowLogCollectorPrototypeTargetModel
				createFlowLogCollectorOptionsModel.Active = core.BoolPtr(false)
				createFlowLogCollectorOptionsModel.Name = core.StringPtr("my-flow-log-collector")
				createFlowLogCollectorOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateFlowLogCollector(createFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateFlowLogCollectorOptions model with no property values
				createFlowLogCollectorOptionsModelNew := new(vpcv1.CreateFlowLogCollectorOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateFlowLogCollector(createFlowLogCollectorOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteFlowLogCollector(deleteFlowLogCollectorOptions *DeleteFlowLogCollectorOptions)`, func() {
		version := "testString"
		deleteFlowLogCollectorPath := "/flow_log_collectors/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteFlowLogCollectorPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteFlowLogCollector successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteFlowLogCollector(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteFlowLogCollectorOptions model
				deleteFlowLogCollectorOptionsModel := new(vpcv1.DeleteFlowLogCollectorOptions)
				deleteFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				deleteFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteFlowLogCollector(deleteFlowLogCollectorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteFlowLogCollector with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteFlowLogCollectorOptions model
				deleteFlowLogCollectorOptionsModel := new(vpcv1.DeleteFlowLogCollectorOptions)
				deleteFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				deleteFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteFlowLogCollector(deleteFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteFlowLogCollectorOptions model with no property values
				deleteFlowLogCollectorOptionsModelNew := new(vpcv1.DeleteFlowLogCollectorOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteFlowLogCollector(deleteFlowLogCollectorOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetFlowLogCollector(getFlowLogCollectorOptions *GetFlowLogCollectorOptions) - Operation response error`, func() {
		version := "testString"
		getFlowLogCollectorPath := "/flow_log_collectors/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getFlowLogCollectorPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetFlowLogCollector with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetFlowLogCollectorOptions model
				getFlowLogCollectorOptionsModel := new(vpcv1.GetFlowLogCollectorOptions)
				getFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				getFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetFlowLogCollector(getFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetFlowLogCollector(getFlowLogCollectorOptions *GetFlowLogCollectorOptions)`, func() {
		version := "testString"
		getFlowLogCollectorPath := "/flow_log_collectors/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getFlowLogCollectorPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-flow-log-collector", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "active": true, "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetFlowLogCollector successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetFlowLogCollector(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetFlowLogCollectorOptions model
				getFlowLogCollectorOptionsModel := new(vpcv1.GetFlowLogCollectorOptions)
				getFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				getFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetFlowLogCollector(getFlowLogCollectorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetFlowLogCollector with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetFlowLogCollectorOptions model
				getFlowLogCollectorOptionsModel := new(vpcv1.GetFlowLogCollectorOptions)
				getFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				getFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetFlowLogCollector(getFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetFlowLogCollectorOptions model with no property values
				getFlowLogCollectorOptionsModelNew := new(vpcv1.GetFlowLogCollectorOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetFlowLogCollector(getFlowLogCollectorOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateFlowLogCollector(updateFlowLogCollectorOptions *UpdateFlowLogCollectorOptions) - Operation response error`, func() {
		version := "testString"
		updateFlowLogCollectorPath := "/flow_log_collectors/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateFlowLogCollectorPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateFlowLogCollector with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateFlowLogCollectorOptions model
				updateFlowLogCollectorOptionsModel := new(vpcv1.UpdateFlowLogCollectorOptions)
				updateFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				updateFlowLogCollectorOptionsModel.Active = core.BoolPtr(true)
				updateFlowLogCollectorOptionsModel.Name = core.StringPtr("my-flow-log-collector")
				updateFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateFlowLogCollector(updateFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateFlowLogCollector(updateFlowLogCollectorOptions *UpdateFlowLogCollectorOptions)`, func() {
		version := "testString"
		updateFlowLogCollectorPath := "/flow_log_collectors/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateFlowLogCollectorPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-flow-log-collector", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "active": true, "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke UpdateFlowLogCollector successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateFlowLogCollector(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateFlowLogCollectorOptions model
				updateFlowLogCollectorOptionsModel := new(vpcv1.UpdateFlowLogCollectorOptions)
				updateFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				updateFlowLogCollectorOptionsModel.Active = core.BoolPtr(true)
				updateFlowLogCollectorOptionsModel.Name = core.StringPtr("my-flow-log-collector")
				updateFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateFlowLogCollector(updateFlowLogCollectorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateFlowLogCollector with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateFlowLogCollectorOptions model
				updateFlowLogCollectorOptionsModel := new(vpcv1.UpdateFlowLogCollectorOptions)
				updateFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				updateFlowLogCollectorOptionsModel.Active = core.BoolPtr(true)
				updateFlowLogCollectorOptionsModel.Name = core.StringPtr("my-flow-log-collector")
				updateFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateFlowLogCollector(updateFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateFlowLogCollectorOptions model with no property values
				updateFlowLogCollectorOptionsModelNew := new(vpcv1.UpdateFlowLogCollectorOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateFlowLogCollector(updateFlowLogCollectorOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "https://vpcv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListRegions(listRegionsOptions *ListRegionsOptions) - Operation response error`, func() {
		version := "testString"
		listRegionsPath := "/regions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listRegionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListRegions with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListRegionsOptions model
				listRegionsOptionsModel := new(vpcv1.ListRegionsOptions)
				listRegionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListRegions(listRegionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListRegions(listRegionsOptions *ListRegionsOptions)`, func() {
		version := "testString"
		listRegionsPath := "/regions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listRegionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"regions": [{"name": "us-south", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "endpoint": "Endpoint", "status": "available"}]}`)
				}))
			})
			It(`Invoke ListRegions successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListRegions(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListRegionsOptions model
				listRegionsOptionsModel := new(vpcv1.ListRegionsOptions)
				listRegionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListRegions(listRegionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListRegions with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListRegionsOptions model
				listRegionsOptionsModel := new(vpcv1.ListRegionsOptions)
				listRegionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListRegions(listRegionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRegion(getRegionOptions *GetRegionOptions) - Operation response error`, func() {
		version := "testString"
		getRegionPath := "/regions/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getRegionPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetRegion with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetRegionOptions model
				getRegionOptionsModel := new(vpcv1.GetRegionOptions)
				getRegionOptionsModel.Name = core.StringPtr("testString")
				getRegionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetRegion(getRegionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetRegion(getRegionOptions *GetRegionOptions)`, func() {
		version := "testString"
		getRegionPath := "/regions/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getRegionPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"name": "us-south", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "endpoint": "Endpoint", "status": "available"}`)
				}))
			})
			It(`Invoke GetRegion successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetRegion(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetRegionOptions model
				getRegionOptionsModel := new(vpcv1.GetRegionOptions)
				getRegionOptionsModel.Name = core.StringPtr("testString")
				getRegionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetRegion(getRegionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetRegion with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetRegionOptions model
				getRegionOptionsModel := new(vpcv1.GetRegionOptions)
				getRegionOptionsModel.Name = core.StringPtr("testString")
				getRegionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetRegion(getRegionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetRegionOptions model with no property values
				getRegionOptionsModelNew := new(vpcv1.GetRegionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetRegion(getRegionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListZones(listZonesOptions *ListZonesOptions) - Operation response error`, func() {
		version := "testString"
		listZonesPath := "/regions/testString/zones"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listZonesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListZones with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListZonesOptions model
				listZonesOptionsModel := new(vpcv1.ListZonesOptions)
				listZonesOptionsModel.RegionName = core.StringPtr("testString")
				listZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListZones(listZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListZones(listZonesOptions *ListZonesOptions)`, func() {
		version := "testString"
		listZonesPath := "/regions/testString/zones"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listZonesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"zones": [{"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "region": {"name": "us-south", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south"}, "status": "available"}]}`)
				}))
			})
			It(`Invoke ListZones successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListZones(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListZonesOptions model
				listZonesOptionsModel := new(vpcv1.ListZonesOptions)
				listZonesOptionsModel.RegionName = core.StringPtr("testString")
				listZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListZones(listZonesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListZones with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListZonesOptions model
				listZonesOptionsModel := new(vpcv1.ListZonesOptions)
				listZonesOptionsModel.RegionName = core.StringPtr("testString")
				listZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListZones(listZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListZonesOptions model with no property values
				listZonesOptionsModelNew := new(vpcv1.ListZonesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListZones(listZonesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetZone(getZoneOptions *GetZoneOptions) - Operation response error`, func() {
		version := "testString"
		getZonePath := "/regions/testString/zones/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getZonePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetZone with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetZoneOptions model
				getZoneOptionsModel := new(vpcv1.GetZoneOptions)
				getZoneOptionsModel.RegionName = core.StringPtr("testString")
				getZoneOptionsModel.ZoneName = core.StringPtr("testString")
				getZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetZone(getZoneOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetZone(getZoneOptions *GetZoneOptions)`, func() {
		version := "testString"
		getZonePath := "/regions/testString/zones/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getZonePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "region": {"name": "us-south", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south"}, "status": "available"}`)
				}))
			})
			It(`Invoke GetZone successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetZone(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetZoneOptions model
				getZoneOptionsModel := new(vpcv1.GetZoneOptions)
				getZoneOptionsModel.RegionName = core.StringPtr("testString")
				getZoneOptionsModel.ZoneName = core.StringPtr("testString")
				getZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetZone(getZoneOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetZone with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetZoneOptions model
				getZoneOptionsModel := new(vpcv1.GetZoneOptions)
				getZoneOptionsModel.RegionName = core.StringPtr("testString")
				getZoneOptionsModel.ZoneName = core.StringPtr("testString")
				getZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetZone(getZoneOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetZoneOptions model with no property values
				getZoneOptionsModelNew := new(vpcv1.GetZoneOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetZone(getZoneOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "https://vpcv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListImages(listImagesOptions *ListImagesOptions) - Operation response error`, func() {
		version := "testString"
		listImagesPath := "/images"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listImagesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["visibility"]).To(Equal([]string{"private"}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListImages with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListImagesOptions model
				listImagesOptionsModel := new(vpcv1.ListImagesOptions)
				listImagesOptionsModel.Start = core.StringPtr("testString")
				listImagesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listImagesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listImagesOptionsModel.Name = core.StringPtr("testString")
				listImagesOptionsModel.Visibility = core.StringPtr("private")
				listImagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListImages(listImagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListImages(listImagesOptions *ListImagesOptions)`, func() {
		version := "testString"
		listImagesPath := "/images"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listImagesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["visibility"]).To(Equal([]string{"private"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "images": [{"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image", "minimum_provisioned_size": 22, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "file": {"size": 4}, "operating_system": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "gpu_supported": ["nvidia"], "vendor": "Canonical", "version": "16.04 LTS"}, "status": "available", "visibility": "private"}]}`)
				}))
			})
			It(`Invoke ListImages successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListImages(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListImagesOptions model
				listImagesOptionsModel := new(vpcv1.ListImagesOptions)
				listImagesOptionsModel.Start = core.StringPtr("testString")
				listImagesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listImagesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listImagesOptionsModel.Name = core.StringPtr("testString")
				listImagesOptionsModel.Visibility = core.StringPtr("private")
				listImagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListImages(listImagesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListImages with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListImagesOptions model
				listImagesOptionsModel := new(vpcv1.ListImagesOptions)
				listImagesOptionsModel.Start = core.StringPtr("testString")
				listImagesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listImagesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listImagesOptionsModel.Name = core.StringPtr("testString")
				listImagesOptionsModel.Visibility = core.StringPtr("private")
				listImagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListImages(listImagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateImage(createImageOptions *CreateImageOptions) - Operation response error`, func() {
		version := "testString"
		createImagePath := "/images"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createImagePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateImage with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ImageFilePrototype model
				imageFilePrototypeModel := new(vpcv1.ImageFilePrototype)
				imageFilePrototypeModel.Href = core.StringPtr("cos://us-south/custom-image-vpc-bucket/customImage-0.vhd")

				// Construct an instance of the OperatingSystemIdentityByName model
				operatingSystemIdentityModel := new(vpcv1.OperatingSystemIdentityByName)
				operatingSystemIdentityModel.Name = core.StringPtr("ubuntu-16-amd64")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ImagePrototypeImageByFile model
				imagePrototypeModel := new(vpcv1.ImagePrototypeImageByFile)
				imagePrototypeModel.Name = core.StringPtr("my-image")
				imagePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				imagePrototypeModel.File = imageFilePrototypeModel
				imagePrototypeModel.OperatingSystem = operatingSystemIdentityModel

				// Construct an instance of the CreateImageOptions model
				createImageOptionsModel := new(vpcv1.CreateImageOptions)
				createImageOptionsModel.ImagePrototype = imagePrototypeModel
				createImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateImage(createImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateImage(createImageOptions *CreateImageOptions)`, func() {
		version := "testString"
		createImagePath := "/images"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createImagePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image", "minimum_provisioned_size": 22, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "file": {"size": 4}, "operating_system": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "gpu_supported": ["nvidia"], "vendor": "Canonical", "version": "16.04 LTS"}, "status": "available", "visibility": "private"}`)
				}))
			})
			It(`Invoke CreateImage successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateImage(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ImageFilePrototype model
				imageFilePrototypeModel := new(vpcv1.ImageFilePrototype)
				imageFilePrototypeModel.Href = core.StringPtr("cos://us-south/custom-image-vpc-bucket/customImage-0.vhd")

				// Construct an instance of the OperatingSystemIdentityByName model
				operatingSystemIdentityModel := new(vpcv1.OperatingSystemIdentityByName)
				operatingSystemIdentityModel.Name = core.StringPtr("ubuntu-16-amd64")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ImagePrototypeImageByFile model
				imagePrototypeModel := new(vpcv1.ImagePrototypeImageByFile)
				imagePrototypeModel.Name = core.StringPtr("my-image")
				imagePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				imagePrototypeModel.File = imageFilePrototypeModel
				imagePrototypeModel.OperatingSystem = operatingSystemIdentityModel

				// Construct an instance of the CreateImageOptions model
				createImageOptionsModel := new(vpcv1.CreateImageOptions)
				createImageOptionsModel.ImagePrototype = imagePrototypeModel
				createImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateImage(createImageOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateImage with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ImageFilePrototype model
				imageFilePrototypeModel := new(vpcv1.ImageFilePrototype)
				imageFilePrototypeModel.Href = core.StringPtr("cos://us-south/custom-image-vpc-bucket/customImage-0.vhd")

				// Construct an instance of the OperatingSystemIdentityByName model
				operatingSystemIdentityModel := new(vpcv1.OperatingSystemIdentityByName)
				operatingSystemIdentityModel.Name = core.StringPtr("ubuntu-16-amd64")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ImagePrototypeImageByFile model
				imagePrototypeModel := new(vpcv1.ImagePrototypeImageByFile)
				imagePrototypeModel.Name = core.StringPtr("my-image")
				imagePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				imagePrototypeModel.File = imageFilePrototypeModel
				imagePrototypeModel.OperatingSystem = operatingSystemIdentityModel

				// Construct an instance of the CreateImageOptions model
				createImageOptionsModel := new(vpcv1.CreateImageOptions)
				createImageOptionsModel.ImagePrototype = imagePrototypeModel
				createImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateImage(createImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateImageOptions model with no property values
				createImageOptionsModelNew := new(vpcv1.CreateImageOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateImage(createImageOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteImage(deleteImageOptions *DeleteImageOptions)`, func() {
		version := "testString"
		deleteImagePath := "/images/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteImagePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(202)
				}))
			})
			It(`Invoke DeleteImage successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteImage(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteImageOptions model
				deleteImageOptionsModel := new(vpcv1.DeleteImageOptions)
				deleteImageOptionsModel.ID = core.StringPtr("testString")
				deleteImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteImage(deleteImageOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteImage with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteImageOptions model
				deleteImageOptionsModel := new(vpcv1.DeleteImageOptions)
				deleteImageOptionsModel.ID = core.StringPtr("testString")
				deleteImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteImage(deleteImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteImageOptions model with no property values
				deleteImageOptionsModelNew := new(vpcv1.DeleteImageOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteImage(deleteImageOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetImage(getImageOptions *GetImageOptions) - Operation response error`, func() {
		version := "testString"
		getImagePath := "/images/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getImagePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetImage with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetImageOptions model
				getImageOptionsModel := new(vpcv1.GetImageOptions)
				getImageOptionsModel.ID = core.StringPtr("testString")
				getImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetImage(getImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetImage(getImageOptions *GetImageOptions)`, func() {
		version := "testString"
		getImagePath := "/images/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getImagePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image", "minimum_provisioned_size": 22, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "file": {"size": 4}, "operating_system": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "gpu_supported": ["nvidia"], "vendor": "Canonical", "version": "16.04 LTS"}, "status": "available", "visibility": "private"}`)
				}))
			})
			It(`Invoke GetImage successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetImage(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetImageOptions model
				getImageOptionsModel := new(vpcv1.GetImageOptions)
				getImageOptionsModel.ID = core.StringPtr("testString")
				getImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetImage(getImageOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetImage with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetImageOptions model
				getImageOptionsModel := new(vpcv1.GetImageOptions)
				getImageOptionsModel.ID = core.StringPtr("testString")
				getImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetImage(getImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetImageOptions model with no property values
				getImageOptionsModelNew := new(vpcv1.GetImageOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetImage(getImageOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateImage(updateImageOptions *UpdateImageOptions) - Operation response error`, func() {
		version := "testString"
		updateImagePath := "/images/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateImagePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateImage with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateImageOptions model
				updateImageOptionsModel := new(vpcv1.UpdateImageOptions)
				updateImageOptionsModel.ID = core.StringPtr("testString")
				updateImageOptionsModel.Name = core.StringPtr("my-image")
				updateImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateImage(updateImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateImage(updateImageOptions *UpdateImageOptions)`, func() {
		version := "testString"
		updateImagePath := "/images/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateImagePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image", "minimum_provisioned_size": 22, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "file": {"size": 4}, "operating_system": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "gpu_supported": ["nvidia"], "vendor": "Canonical", "version": "16.04 LTS"}, "status": "available", "visibility": "private"}`)
				}))
			})
			It(`Invoke UpdateImage successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateImage(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateImageOptions model
				updateImageOptionsModel := new(vpcv1.UpdateImageOptions)
				updateImageOptionsModel.ID = core.StringPtr("testString")
				updateImageOptionsModel.Name = core.StringPtr("my-image")
				updateImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateImage(updateImageOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateImage with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateImageOptions model
				updateImageOptionsModel := new(vpcv1.UpdateImageOptions)
				updateImageOptionsModel.ID = core.StringPtr("testString")
				updateImageOptionsModel.Name = core.StringPtr("my-image")
				updateImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateImage(updateImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateImageOptions model with no property values
				updateImageOptionsModelNew := new(vpcv1.UpdateImageOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateImage(updateImageOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListOperatingSystems(listOperatingSystemsOptions *ListOperatingSystemsOptions) - Operation response error`, func() {
		version := "testString"
		listOperatingSystemsPath := "/operating_systems"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listOperatingSystemsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListOperatingSystems with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListOperatingSystemsOptions model
				listOperatingSystemsOptionsModel := new(vpcv1.ListOperatingSystemsOptions)
				listOperatingSystemsOptionsModel.Start = core.StringPtr("testString")
				listOperatingSystemsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listOperatingSystemsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListOperatingSystems(listOperatingSystemsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListOperatingSystems(listOperatingSystemsOptions *ListOperatingSystemsOptions)`, func() {
		version := "testString"
		listOperatingSystemsPath := "/operating_systems"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listOperatingSystemsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "operating_systems": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "gpu_supported": ["nvidia"], "vendor": "Canonical", "version": "16.04 LTS"}]}`)
				}))
			})
			It(`Invoke ListOperatingSystems successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListOperatingSystems(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListOperatingSystemsOptions model
				listOperatingSystemsOptionsModel := new(vpcv1.ListOperatingSystemsOptions)
				listOperatingSystemsOptionsModel.Start = core.StringPtr("testString")
				listOperatingSystemsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listOperatingSystemsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListOperatingSystems(listOperatingSystemsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListOperatingSystems with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListOperatingSystemsOptions model
				listOperatingSystemsOptionsModel := new(vpcv1.ListOperatingSystemsOptions)
				listOperatingSystemsOptionsModel.Start = core.StringPtr("testString")
				listOperatingSystemsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listOperatingSystemsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListOperatingSystems(listOperatingSystemsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetOperatingSystem(getOperatingSystemOptions *GetOperatingSystemOptions) - Operation response error`, func() {
		version := "testString"
		getOperatingSystemPath := "/operating_systems/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getOperatingSystemPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetOperatingSystem with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetOperatingSystemOptions model
				getOperatingSystemOptionsModel := new(vpcv1.GetOperatingSystemOptions)
				getOperatingSystemOptionsModel.Name = core.StringPtr("testString")
				getOperatingSystemOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetOperatingSystem(getOperatingSystemOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetOperatingSystem(getOperatingSystemOptions *GetOperatingSystemOptions)`, func() {
		version := "testString"
		getOperatingSystemPath := "/operating_systems/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getOperatingSystemPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "gpu_supported": ["nvidia"], "vendor": "Canonical", "version": "16.04 LTS"}`)
				}))
			})
			It(`Invoke GetOperatingSystem successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetOperatingSystem(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetOperatingSystemOptions model
				getOperatingSystemOptionsModel := new(vpcv1.GetOperatingSystemOptions)
				getOperatingSystemOptionsModel.Name = core.StringPtr("testString")
				getOperatingSystemOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetOperatingSystem(getOperatingSystemOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetOperatingSystem with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetOperatingSystemOptions model
				getOperatingSystemOptionsModel := new(vpcv1.GetOperatingSystemOptions)
				getOperatingSystemOptionsModel.Name = core.StringPtr("testString")
				getOperatingSystemOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetOperatingSystem(getOperatingSystemOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetOperatingSystemOptions model with no property values
				getOperatingSystemOptionsModelNew := new(vpcv1.GetOperatingSystemOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetOperatingSystem(getOperatingSystemOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "https://vpcv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListInstanceGroups(listInstanceGroupsOptions *ListInstanceGroupsOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceGroupsPath := "/instance_groups"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceGroupsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceGroups with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupsOptions model
				listInstanceGroupsOptionsModel := new(vpcv1.ListInstanceGroupsOptions)
				listInstanceGroupsOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listInstanceGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListInstanceGroups(listInstanceGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListInstanceGroups(listInstanceGroupsOptions *ListInstanceGroupsOptions)`, func() {
		version := "testString"
		listInstanceGroupsPath := "/instance_groups"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceGroupsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "instance_groups": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group", "membership_count": 10, "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "managers": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "status": "deleting", "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}]}`)
				}))
			})
			It(`Invoke ListInstanceGroups successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListInstanceGroups(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceGroupsOptions model
				listInstanceGroupsOptionsModel := new(vpcv1.ListInstanceGroupsOptions)
				listInstanceGroupsOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listInstanceGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListInstanceGroups(listInstanceGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListInstanceGroups with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupsOptions model
				listInstanceGroupsOptionsModel := new(vpcv1.ListInstanceGroupsOptions)
				listInstanceGroupsOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listInstanceGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListInstanceGroups(listInstanceGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceGroup(createInstanceGroupOptions *CreateInstanceGroupOptions) - Operation response error`, func() {
		version := "testString"
		createInstanceGroupPath := "/instance_groups"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createInstanceGroupPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstanceGroup with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the CreateInstanceGroupOptions model
				createInstanceGroupOptionsModel := new(vpcv1.CreateInstanceGroupOptions)
				createInstanceGroupOptionsModel.InstanceTemplate = instanceTemplateIdentityModel
				createInstanceGroupOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				createInstanceGroupOptionsModel.Name = core.StringPtr("my-instance-group")
				createInstanceGroupOptionsModel.MembershipCount = core.Int64Ptr(int64(10))
				createInstanceGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateInstanceGroup(createInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateInstanceGroup(createInstanceGroupOptions *CreateInstanceGroupOptions)`, func() {
		version := "testString"
		createInstanceGroupPath := "/instance_groups"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createInstanceGroupPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group", "membership_count": 10, "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "managers": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "status": "deleting", "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke CreateInstanceGroup successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateInstanceGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the CreateInstanceGroupOptions model
				createInstanceGroupOptionsModel := new(vpcv1.CreateInstanceGroupOptions)
				createInstanceGroupOptionsModel.InstanceTemplate = instanceTemplateIdentityModel
				createInstanceGroupOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				createInstanceGroupOptionsModel.Name = core.StringPtr("my-instance-group")
				createInstanceGroupOptionsModel.MembershipCount = core.Int64Ptr(int64(10))
				createInstanceGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateInstanceGroup(createInstanceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateInstanceGroup with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the CreateInstanceGroupOptions model
				createInstanceGroupOptionsModel := new(vpcv1.CreateInstanceGroupOptions)
				createInstanceGroupOptionsModel.InstanceTemplate = instanceTemplateIdentityModel
				createInstanceGroupOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				createInstanceGroupOptionsModel.Name = core.StringPtr("my-instance-group")
				createInstanceGroupOptionsModel.MembershipCount = core.Int64Ptr(int64(10))
				createInstanceGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateInstanceGroup(createInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceGroupOptions model with no property values
				createInstanceGroupOptionsModelNew := new(vpcv1.CreateInstanceGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateInstanceGroup(createInstanceGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteInstanceGroup(deleteInstanceGroupOptions *DeleteInstanceGroupOptions)`, func() {
		version := "testString"
		deleteInstanceGroupPath := "/instance_groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteInstanceGroupPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstanceGroup successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteInstanceGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceGroupOptions model
				deleteInstanceGroupOptionsModel := new(vpcv1.DeleteInstanceGroupOptions)
				deleteInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteInstanceGroup(deleteInstanceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstanceGroup with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceGroupOptions model
				deleteInstanceGroupOptionsModel := new(vpcv1.DeleteInstanceGroupOptions)
				deleteInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteInstanceGroup(deleteInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceGroupOptions model with no property values
				deleteInstanceGroupOptionsModelNew := new(vpcv1.DeleteInstanceGroupOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteInstanceGroup(deleteInstanceGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceGroup(getInstanceGroupOptions *GetInstanceGroupOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceGroupPath := "/instance_groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceGroupPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceGroup with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupOptions model
				getInstanceGroupOptionsModel := new(vpcv1.GetInstanceGroupOptions)
				getInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetInstanceGroup(getInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInstanceGroup(getInstanceGroupOptions *GetInstanceGroupOptions)`, func() {
		version := "testString"
		getInstanceGroupPath := "/instance_groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceGroupPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group", "membership_count": 10, "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "managers": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "status": "deleting", "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetInstanceGroup successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetInstanceGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceGroupOptions model
				getInstanceGroupOptionsModel := new(vpcv1.GetInstanceGroupOptions)
				getInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetInstanceGroup(getInstanceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetInstanceGroup with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupOptions model
				getInstanceGroupOptionsModel := new(vpcv1.GetInstanceGroupOptions)
				getInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetInstanceGroup(getInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceGroupOptions model with no property values
				getInstanceGroupOptionsModelNew := new(vpcv1.GetInstanceGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetInstanceGroup(getInstanceGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceGroup(updateInstanceGroupOptions *UpdateInstanceGroupOptions) - Operation response error`, func() {
		version := "testString"
		updateInstanceGroupPath := "/instance_groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateInstanceGroupPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateInstanceGroup with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the UpdateInstanceGroupOptions model
				updateInstanceGroupOptionsModel := new(vpcv1.UpdateInstanceGroupOptions)
				updateInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupOptionsModel.Name = core.StringPtr("my-instance-group")
				updateInstanceGroupOptionsModel.MembershipCount = core.Int64Ptr(int64(10))
				updateInstanceGroupOptionsModel.InstanceTemplate = instanceTemplateIdentityModel
				updateInstanceGroupOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				updateInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateInstanceGroup(updateInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateInstanceGroup(updateInstanceGroupOptions *UpdateInstanceGroupOptions)`, func() {
		version := "testString"
		updateInstanceGroupPath := "/instance_groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateInstanceGroupPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group", "membership_count": 10, "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "managers": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "status": "deleting", "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke UpdateInstanceGroup successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateInstanceGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the UpdateInstanceGroupOptions model
				updateInstanceGroupOptionsModel := new(vpcv1.UpdateInstanceGroupOptions)
				updateInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupOptionsModel.Name = core.StringPtr("my-instance-group")
				updateInstanceGroupOptionsModel.MembershipCount = core.Int64Ptr(int64(10))
				updateInstanceGroupOptionsModel.InstanceTemplate = instanceTemplateIdentityModel
				updateInstanceGroupOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				updateInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateInstanceGroup(updateInstanceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateInstanceGroup with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the UpdateInstanceGroupOptions model
				updateInstanceGroupOptionsModel := new(vpcv1.UpdateInstanceGroupOptions)
				updateInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupOptionsModel.Name = core.StringPtr("my-instance-group")
				updateInstanceGroupOptionsModel.MembershipCount = core.Int64Ptr(int64(10))
				updateInstanceGroupOptionsModel.InstanceTemplate = instanceTemplateIdentityModel
				updateInstanceGroupOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				updateInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateInstanceGroup(updateInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateInstanceGroupOptions model with no property values
				updateInstanceGroupOptionsModelNew := new(vpcv1.UpdateInstanceGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateInstanceGroup(updateInstanceGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceGroupManagers(listInstanceGroupManagersOptions *ListInstanceGroupManagersOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceGroupManagersPath := "/instance_groups/testString/managers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceGroupManagersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceGroupManagers with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupManagersOptions model
				listInstanceGroupManagersOptionsModel := new(vpcv1.ListInstanceGroupManagersOptions)
				listInstanceGroupManagersOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListInstanceGroupManagers(listInstanceGroupManagersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListInstanceGroupManagers(listInstanceGroupManagersOptions *ListInstanceGroupManagersOptions)`, func() {
		version := "testString"
		listInstanceGroupManagersPath := "/instance_groups/testString/managers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceGroupManagersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "managers": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "policies": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a"}], "status": "enabled", "aggregation_window": 120, "cooldown": 210, "max_membership_count": 10, "min_membership_count": 10, "manager_type": "autoscale"}]}`)
				}))
			})
			It(`Invoke ListInstanceGroupManagers successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListInstanceGroupManagers(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceGroupManagersOptions model
				listInstanceGroupManagersOptionsModel := new(vpcv1.ListInstanceGroupManagersOptions)
				listInstanceGroupManagersOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListInstanceGroupManagers(listInstanceGroupManagersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListInstanceGroupManagers with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupManagersOptions model
				listInstanceGroupManagersOptionsModel := new(vpcv1.ListInstanceGroupManagersOptions)
				listInstanceGroupManagersOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListInstanceGroupManagers(listInstanceGroupManagersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListInstanceGroupManagersOptions model with no property values
				listInstanceGroupManagersOptionsModelNew := new(vpcv1.ListInstanceGroupManagersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListInstanceGroupManagers(listInstanceGroupManagersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceGroupManager(createInstanceGroupManagerOptions *CreateInstanceGroupManagerOptions) - Operation response error`, func() {
		version := "testString"
		createInstanceGroupManagerPath := "/instance_groups/testString/managers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createInstanceGroupManagerPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstanceGroupManager with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype model
				instanceGroupManagerPrototypeModel := new(vpcv1.InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype)
				instanceGroupManagerPrototypeModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPrototypeModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPrototypeModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPrototypeModel.MinMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPrototypeModel.ManagerType = core.StringPtr("autoscale")

				// Construct an instance of the CreateInstanceGroupManagerOptions model
				createInstanceGroupManagerOptionsModel := new(vpcv1.CreateInstanceGroupManagerOptions)
				createInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerOptionsModel.InstanceGroupManagerPrototype = instanceGroupManagerPrototypeModel
				createInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateInstanceGroupManager(createInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateInstanceGroupManager(createInstanceGroupManagerOptions *CreateInstanceGroupManagerOptions)`, func() {
		version := "testString"
		createInstanceGroupManagerPath := "/instance_groups/testString/managers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createInstanceGroupManagerPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "policies": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a"}], "status": "enabled", "aggregation_window": 120, "cooldown": 210, "max_membership_count": 10, "min_membership_count": 10, "manager_type": "autoscale"}`)
				}))
			})
			It(`Invoke CreateInstanceGroupManager successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateInstanceGroupManager(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype model
				instanceGroupManagerPrototypeModel := new(vpcv1.InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype)
				instanceGroupManagerPrototypeModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPrototypeModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPrototypeModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPrototypeModel.MinMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPrototypeModel.ManagerType = core.StringPtr("autoscale")

				// Construct an instance of the CreateInstanceGroupManagerOptions model
				createInstanceGroupManagerOptionsModel := new(vpcv1.CreateInstanceGroupManagerOptions)
				createInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerOptionsModel.InstanceGroupManagerPrototype = instanceGroupManagerPrototypeModel
				createInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateInstanceGroupManager(createInstanceGroupManagerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateInstanceGroupManager with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype model
				instanceGroupManagerPrototypeModel := new(vpcv1.InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype)
				instanceGroupManagerPrototypeModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPrototypeModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPrototypeModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPrototypeModel.MinMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPrototypeModel.ManagerType = core.StringPtr("autoscale")

				// Construct an instance of the CreateInstanceGroupManagerOptions model
				createInstanceGroupManagerOptionsModel := new(vpcv1.CreateInstanceGroupManagerOptions)
				createInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerOptionsModel.InstanceGroupManagerPrototype = instanceGroupManagerPrototypeModel
				createInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateInstanceGroupManager(createInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceGroupManagerOptions model with no property values
				createInstanceGroupManagerOptionsModelNew := new(vpcv1.CreateInstanceGroupManagerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateInstanceGroupManager(createInstanceGroupManagerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteInstanceGroupManager(deleteInstanceGroupManagerOptions *DeleteInstanceGroupManagerOptions)`, func() {
		version := "testString"
		deleteInstanceGroupManagerPath := "/instance_groups/testString/managers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteInstanceGroupManagerPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstanceGroupManager successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteInstanceGroupManager(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceGroupManagerOptions model
				deleteInstanceGroupManagerOptionsModel := new(vpcv1.DeleteInstanceGroupManagerOptions)
				deleteInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteInstanceGroupManager(deleteInstanceGroupManagerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstanceGroupManager with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceGroupManagerOptions model
				deleteInstanceGroupManagerOptionsModel := new(vpcv1.DeleteInstanceGroupManagerOptions)
				deleteInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteInstanceGroupManager(deleteInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceGroupManagerOptions model with no property values
				deleteInstanceGroupManagerOptionsModelNew := new(vpcv1.DeleteInstanceGroupManagerOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteInstanceGroupManager(deleteInstanceGroupManagerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceGroupManager(getInstanceGroupManagerOptions *GetInstanceGroupManagerOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceGroupManagerPath := "/instance_groups/testString/managers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceGroupManagerPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceGroupManager with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupManagerOptions model
				getInstanceGroupManagerOptionsModel := new(vpcv1.GetInstanceGroupManagerOptions)
				getInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetInstanceGroupManager(getInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInstanceGroupManager(getInstanceGroupManagerOptions *GetInstanceGroupManagerOptions)`, func() {
		version := "testString"
		getInstanceGroupManagerPath := "/instance_groups/testString/managers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceGroupManagerPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "policies": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a"}], "status": "enabled", "aggregation_window": 120, "cooldown": 210, "max_membership_count": 10, "min_membership_count": 10, "manager_type": "autoscale"}`)
				}))
			})
			It(`Invoke GetInstanceGroupManager successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetInstanceGroupManager(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceGroupManagerOptions model
				getInstanceGroupManagerOptionsModel := new(vpcv1.GetInstanceGroupManagerOptions)
				getInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetInstanceGroupManager(getInstanceGroupManagerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetInstanceGroupManager with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupManagerOptions model
				getInstanceGroupManagerOptionsModel := new(vpcv1.GetInstanceGroupManagerOptions)
				getInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetInstanceGroupManager(getInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceGroupManagerOptions model with no property values
				getInstanceGroupManagerOptionsModelNew := new(vpcv1.GetInstanceGroupManagerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetInstanceGroupManager(getInstanceGroupManagerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceGroupManager(updateInstanceGroupManagerOptions *UpdateInstanceGroupManagerOptions) - Operation response error`, func() {
		version := "testString"
		updateInstanceGroupManagerPath := "/instance_groups/testString/managers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateInstanceGroupManagerPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateInstanceGroupManager with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPatchInstanceGroupManagerAutoScalePatch model
				instanceGroupManagerPatchModel := new(vpcv1.InstanceGroupManagerPatchInstanceGroupManagerAutoScalePatch)
				instanceGroupManagerPatchModel.Name = core.StringPtr("my-instance-group-manager")
				instanceGroupManagerPatchModel.Status = core.StringPtr("enabled")
				instanceGroupManagerPatchModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPatchModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPatchModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPatchModel.MinMembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the UpdateInstanceGroupManagerOptions model
				updateInstanceGroupManagerOptionsModel := new(vpcv1.UpdateInstanceGroupManagerOptions)
				updateInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerOptionsModel.InstanceGroupManagerPatch = instanceGroupManagerPatchModel
				updateInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateInstanceGroupManager(updateInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateInstanceGroupManager(updateInstanceGroupManagerOptions *UpdateInstanceGroupManagerOptions)`, func() {
		version := "testString"
		updateInstanceGroupManagerPath := "/instance_groups/testString/managers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateInstanceGroupManagerPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "policies": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a"}], "status": "enabled", "aggregation_window": 120, "cooldown": 210, "max_membership_count": 10, "min_membership_count": 10, "manager_type": "autoscale"}`)
				}))
			})
			It(`Invoke UpdateInstanceGroupManager successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateInstanceGroupManager(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InstanceGroupManagerPatchInstanceGroupManagerAutoScalePatch model
				instanceGroupManagerPatchModel := new(vpcv1.InstanceGroupManagerPatchInstanceGroupManagerAutoScalePatch)
				instanceGroupManagerPatchModel.Name = core.StringPtr("my-instance-group-manager")
				instanceGroupManagerPatchModel.Status = core.StringPtr("enabled")
				instanceGroupManagerPatchModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPatchModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPatchModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPatchModel.MinMembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the UpdateInstanceGroupManagerOptions model
				updateInstanceGroupManagerOptionsModel := new(vpcv1.UpdateInstanceGroupManagerOptions)
				updateInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerOptionsModel.InstanceGroupManagerPatch = instanceGroupManagerPatchModel
				updateInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateInstanceGroupManager(updateInstanceGroupManagerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateInstanceGroupManager with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPatchInstanceGroupManagerAutoScalePatch model
				instanceGroupManagerPatchModel := new(vpcv1.InstanceGroupManagerPatchInstanceGroupManagerAutoScalePatch)
				instanceGroupManagerPatchModel.Name = core.StringPtr("my-instance-group-manager")
				instanceGroupManagerPatchModel.Status = core.StringPtr("enabled")
				instanceGroupManagerPatchModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPatchModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPatchModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPatchModel.MinMembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the UpdateInstanceGroupManagerOptions model
				updateInstanceGroupManagerOptionsModel := new(vpcv1.UpdateInstanceGroupManagerOptions)
				updateInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerOptionsModel.InstanceGroupManagerPatch = instanceGroupManagerPatchModel
				updateInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateInstanceGroupManager(updateInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateInstanceGroupManagerOptions model with no property values
				updateInstanceGroupManagerOptionsModelNew := new(vpcv1.UpdateInstanceGroupManagerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateInstanceGroupManager(updateInstanceGroupManagerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceGroupManagerPolicies(listInstanceGroupManagerPoliciesOptions *ListInstanceGroupManagerPoliciesOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceGroupManagerPoliciesPath := "/instance_groups/testString/managers/testString/policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceGroupManagerPoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceGroupManagerPolicies with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupManagerPoliciesOptions model
				listInstanceGroupManagerPoliciesOptionsModel := new(vpcv1.ListInstanceGroupManagerPoliciesOptions)
				listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListInstanceGroupManagerPolicies(listInstanceGroupManagerPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListInstanceGroupManagerPolicies(listInstanceGroupManagerPoliciesOptions *ListInstanceGroupManagerPoliciesOptions)`, func() {
		version := "testString"
		listInstanceGroupManagerPoliciesPath := "/instance_groups/testString/managers/testString/policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceGroupManagerPoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "policies": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "metric_type": "cpu", "metric_value": 11, "policy_type": "target"}]}`)
				}))
			})
			It(`Invoke ListInstanceGroupManagerPolicies successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListInstanceGroupManagerPolicies(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceGroupManagerPoliciesOptions model
				listInstanceGroupManagerPoliciesOptionsModel := new(vpcv1.ListInstanceGroupManagerPoliciesOptions)
				listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListInstanceGroupManagerPolicies(listInstanceGroupManagerPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListInstanceGroupManagerPolicies with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupManagerPoliciesOptions model
				listInstanceGroupManagerPoliciesOptionsModel := new(vpcv1.ListInstanceGroupManagerPoliciesOptions)
				listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListInstanceGroupManagerPolicies(listInstanceGroupManagerPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListInstanceGroupManagerPoliciesOptions model with no property values
				listInstanceGroupManagerPoliciesOptionsModelNew := new(vpcv1.ListInstanceGroupManagerPoliciesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListInstanceGroupManagerPolicies(listInstanceGroupManagerPoliciesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceGroupManagerPolicy(createInstanceGroupManagerPolicyOptions *CreateInstanceGroupManagerPolicyOptions) - Operation response error`, func() {
		version := "testString"
		createInstanceGroupManagerPolicyPath := "/instance_groups/testString/managers/testString/policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createInstanceGroupManagerPolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstanceGroupManagerPolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype model
				instanceGroupManagerPolicyPrototypeModel := new(vpcv1.InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype)
				instanceGroupManagerPolicyPrototypeModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPrototypeModel.MetricValue = core.Int64Ptr(int64(38))
				instanceGroupManagerPolicyPrototypeModel.PolicyType = core.StringPtr("target")

				// Construct an instance of the CreateInstanceGroupManagerPolicyOptions model
				createInstanceGroupManagerPolicyOptionsModel := new(vpcv1.CreateInstanceGroupManagerPolicyOptions)
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPrototype = instanceGroupManagerPolicyPrototypeModel
				createInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateInstanceGroupManagerPolicy(createInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateInstanceGroupManagerPolicy(createInstanceGroupManagerPolicyOptions *CreateInstanceGroupManagerPolicyOptions)`, func() {
		version := "testString"
		createInstanceGroupManagerPolicyPath := "/instance_groups/testString/managers/testString/policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createInstanceGroupManagerPolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "metric_type": "cpu", "metric_value": 11, "policy_type": "target"}`)
				}))
			})
			It(`Invoke CreateInstanceGroupManagerPolicy successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateInstanceGroupManagerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype model
				instanceGroupManagerPolicyPrototypeModel := new(vpcv1.InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype)
				instanceGroupManagerPolicyPrototypeModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPrototypeModel.MetricValue = core.Int64Ptr(int64(38))
				instanceGroupManagerPolicyPrototypeModel.PolicyType = core.StringPtr("target")

				// Construct an instance of the CreateInstanceGroupManagerPolicyOptions model
				createInstanceGroupManagerPolicyOptionsModel := new(vpcv1.CreateInstanceGroupManagerPolicyOptions)
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPrototype = instanceGroupManagerPolicyPrototypeModel
				createInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateInstanceGroupManagerPolicy(createInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateInstanceGroupManagerPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype model
				instanceGroupManagerPolicyPrototypeModel := new(vpcv1.InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype)
				instanceGroupManagerPolicyPrototypeModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPrototypeModel.MetricValue = core.Int64Ptr(int64(38))
				instanceGroupManagerPolicyPrototypeModel.PolicyType = core.StringPtr("target")

				// Construct an instance of the CreateInstanceGroupManagerPolicyOptions model
				createInstanceGroupManagerPolicyOptionsModel := new(vpcv1.CreateInstanceGroupManagerPolicyOptions)
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPrototype = instanceGroupManagerPolicyPrototypeModel
				createInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateInstanceGroupManagerPolicy(createInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceGroupManagerPolicyOptions model with no property values
				createInstanceGroupManagerPolicyOptionsModelNew := new(vpcv1.CreateInstanceGroupManagerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateInstanceGroupManagerPolicy(createInstanceGroupManagerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteInstanceGroupManagerPolicy(deleteInstanceGroupManagerPolicyOptions *DeleteInstanceGroupManagerPolicyOptions)`, func() {
		version := "testString"
		deleteInstanceGroupManagerPolicyPath := "/instance_groups/testString/managers/testString/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteInstanceGroupManagerPolicyPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstanceGroupManagerPolicy successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteInstanceGroupManagerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceGroupManagerPolicyOptions model
				deleteInstanceGroupManagerPolicyOptionsModel := new(vpcv1.DeleteInstanceGroupManagerPolicyOptions)
				deleteInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				deleteInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteInstanceGroupManagerPolicy(deleteInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstanceGroupManagerPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceGroupManagerPolicyOptions model
				deleteInstanceGroupManagerPolicyOptionsModel := new(vpcv1.DeleteInstanceGroupManagerPolicyOptions)
				deleteInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				deleteInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteInstanceGroupManagerPolicy(deleteInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceGroupManagerPolicyOptions model with no property values
				deleteInstanceGroupManagerPolicyOptionsModelNew := new(vpcv1.DeleteInstanceGroupManagerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteInstanceGroupManagerPolicy(deleteInstanceGroupManagerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceGroupManagerPolicy(getInstanceGroupManagerPolicyOptions *GetInstanceGroupManagerPolicyOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceGroupManagerPolicyPath := "/instance_groups/testString/managers/testString/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceGroupManagerPolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceGroupManagerPolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupManagerPolicyOptions model
				getInstanceGroupManagerPolicyOptionsModel := new(vpcv1.GetInstanceGroupManagerPolicyOptions)
				getInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetInstanceGroupManagerPolicy(getInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInstanceGroupManagerPolicy(getInstanceGroupManagerPolicyOptions *GetInstanceGroupManagerPolicyOptions)`, func() {
		version := "testString"
		getInstanceGroupManagerPolicyPath := "/instance_groups/testString/managers/testString/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceGroupManagerPolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "metric_type": "cpu", "metric_value": 11, "policy_type": "target"}`)
				}))
			})
			It(`Invoke GetInstanceGroupManagerPolicy successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetInstanceGroupManagerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceGroupManagerPolicyOptions model
				getInstanceGroupManagerPolicyOptionsModel := new(vpcv1.GetInstanceGroupManagerPolicyOptions)
				getInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetInstanceGroupManagerPolicy(getInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetInstanceGroupManagerPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupManagerPolicyOptions model
				getInstanceGroupManagerPolicyOptionsModel := new(vpcv1.GetInstanceGroupManagerPolicyOptions)
				getInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetInstanceGroupManagerPolicy(getInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceGroupManagerPolicyOptions model with no property values
				getInstanceGroupManagerPolicyOptionsModelNew := new(vpcv1.GetInstanceGroupManagerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetInstanceGroupManagerPolicy(getInstanceGroupManagerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceGroupManagerPolicy(updateInstanceGroupManagerPolicyOptions *UpdateInstanceGroupManagerPolicyOptions) - Operation response error`, func() {
		version := "testString"
		updateInstanceGroupManagerPolicyPath := "/instance_groups/testString/managers/testString/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateInstanceGroupManagerPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateInstanceGroupManagerPolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPolicyPatchInstanceGroupManagerTargetPolicyPatch model
				instanceGroupManagerPolicyPatchModel := new(vpcv1.InstanceGroupManagerPolicyPatchInstanceGroupManagerTargetPolicyPatch)
				instanceGroupManagerPolicyPatchModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPatchModel.MetricValue = core.Int64Ptr(int64(38))

				// Construct an instance of the UpdateInstanceGroupManagerPolicyOptions model
				updateInstanceGroupManagerPolicyOptionsModel := new(vpcv1.UpdateInstanceGroupManagerPolicyOptions)
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPatch = instanceGroupManagerPolicyPatchModel
				updateInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateInstanceGroupManagerPolicy(updateInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateInstanceGroupManagerPolicy(updateInstanceGroupManagerPolicyOptions *UpdateInstanceGroupManagerPolicyOptions)`, func() {
		version := "testString"
		updateInstanceGroupManagerPolicyPath := "/instance_groups/testString/managers/testString/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateInstanceGroupManagerPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "metric_type": "cpu", "metric_value": 11, "policy_type": "target"}`)
				}))
			})
			It(`Invoke UpdateInstanceGroupManagerPolicy successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateInstanceGroupManagerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InstanceGroupManagerPolicyPatchInstanceGroupManagerTargetPolicyPatch model
				instanceGroupManagerPolicyPatchModel := new(vpcv1.InstanceGroupManagerPolicyPatchInstanceGroupManagerTargetPolicyPatch)
				instanceGroupManagerPolicyPatchModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPatchModel.MetricValue = core.Int64Ptr(int64(38))

				// Construct an instance of the UpdateInstanceGroupManagerPolicyOptions model
				updateInstanceGroupManagerPolicyOptionsModel := new(vpcv1.UpdateInstanceGroupManagerPolicyOptions)
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPatch = instanceGroupManagerPolicyPatchModel
				updateInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateInstanceGroupManagerPolicy(updateInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateInstanceGroupManagerPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPolicyPatchInstanceGroupManagerTargetPolicyPatch model
				instanceGroupManagerPolicyPatchModel := new(vpcv1.InstanceGroupManagerPolicyPatchInstanceGroupManagerTargetPolicyPatch)
				instanceGroupManagerPolicyPatchModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPatchModel.MetricValue = core.Int64Ptr(int64(38))

				// Construct an instance of the UpdateInstanceGroupManagerPolicyOptions model
				updateInstanceGroupManagerPolicyOptionsModel := new(vpcv1.UpdateInstanceGroupManagerPolicyOptions)
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPatch = instanceGroupManagerPolicyPatchModel
				updateInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateInstanceGroupManagerPolicy(updateInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateInstanceGroupManagerPolicyOptions model with no property values
				updateInstanceGroupManagerPolicyOptionsModelNew := new(vpcv1.UpdateInstanceGroupManagerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateInstanceGroupManagerPolicy(updateInstanceGroupManagerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteAllInstanceGroupMemberships(deleteAllInstanceGroupMembershipsOptions *DeleteAllInstanceGroupMembershipsOptions)`, func() {
		version := "testString"
		deleteAllInstanceGroupMembershipsPath := "/instance_groups/testString/memberships"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteAllInstanceGroupMembershipsPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteAllInstanceGroupMemberships successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteAllInstanceGroupMemberships(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteAllInstanceGroupMembershipsOptions model
				deleteAllInstanceGroupMembershipsOptionsModel := new(vpcv1.DeleteAllInstanceGroupMembershipsOptions)
				deleteAllInstanceGroupMembershipsOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteAllInstanceGroupMembershipsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteAllInstanceGroupMemberships(deleteAllInstanceGroupMembershipsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteAllInstanceGroupMemberships with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteAllInstanceGroupMembershipsOptions model
				deleteAllInstanceGroupMembershipsOptionsModel := new(vpcv1.DeleteAllInstanceGroupMembershipsOptions)
				deleteAllInstanceGroupMembershipsOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteAllInstanceGroupMembershipsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteAllInstanceGroupMemberships(deleteAllInstanceGroupMembershipsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteAllInstanceGroupMembershipsOptions model with no property values
				deleteAllInstanceGroupMembershipsOptionsModelNew := new(vpcv1.DeleteAllInstanceGroupMembershipsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteAllInstanceGroupMemberships(deleteAllInstanceGroupMembershipsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceGroupMemberships(listInstanceGroupMembershipsOptions *ListInstanceGroupMembershipsOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceGroupMembershipsPath := "/instance_groups/testString/memberships"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceGroupMembershipsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceGroupMemberships with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupMembershipsOptions model
				listInstanceGroupMembershipsOptionsModel := new(vpcv1.ListInstanceGroupMembershipsOptions)
				listInstanceGroupMembershipsOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupMembershipsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListInstanceGroupMemberships(listInstanceGroupMembershipsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListInstanceGroupMemberships(listInstanceGroupMembershipsOptions *ListInstanceGroupMembershipsOptions)`, func() {
		version := "testString"
		listInstanceGroupMembershipsPath := "/instance_groups/testString/memberships"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceGroupMembershipsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/7241e2a8-601f-11ea-8503-000c29475bed/memberships?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/7241e2a8-601f-11ea-8503-000c29475bed/memberships?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "memberships": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed", "delete_instance_on_membership_delete": true, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "status": "deleting"}]}`)
				}))
			})
			It(`Invoke ListInstanceGroupMemberships successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListInstanceGroupMemberships(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceGroupMembershipsOptions model
				listInstanceGroupMembershipsOptionsModel := new(vpcv1.ListInstanceGroupMembershipsOptions)
				listInstanceGroupMembershipsOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupMembershipsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListInstanceGroupMemberships(listInstanceGroupMembershipsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListInstanceGroupMemberships with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupMembershipsOptions model
				listInstanceGroupMembershipsOptionsModel := new(vpcv1.ListInstanceGroupMembershipsOptions)
				listInstanceGroupMembershipsOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupMembershipsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListInstanceGroupMemberships(listInstanceGroupMembershipsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListInstanceGroupMembershipsOptions model with no property values
				listInstanceGroupMembershipsOptionsModelNew := new(vpcv1.ListInstanceGroupMembershipsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListInstanceGroupMemberships(listInstanceGroupMembershipsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteInstanceGroupMembership(deleteInstanceGroupMembershipOptions *DeleteInstanceGroupMembershipOptions)`, func() {
		version := "testString"
		deleteInstanceGroupMembershipPath := "/instance_groups/testString/memberships/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteInstanceGroupMembershipPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstanceGroupMembership successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteInstanceGroupMembership(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceGroupMembershipOptions model
				deleteInstanceGroupMembershipOptionsModel := new(vpcv1.DeleteInstanceGroupMembershipOptions)
				deleteInstanceGroupMembershipOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteInstanceGroupMembershipOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceGroupMembershipOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteInstanceGroupMembership(deleteInstanceGroupMembershipOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstanceGroupMembership with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceGroupMembershipOptions model
				deleteInstanceGroupMembershipOptionsModel := new(vpcv1.DeleteInstanceGroupMembershipOptions)
				deleteInstanceGroupMembershipOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteInstanceGroupMembershipOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceGroupMembershipOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteInstanceGroupMembership(deleteInstanceGroupMembershipOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceGroupMembershipOptions model with no property values
				deleteInstanceGroupMembershipOptionsModelNew := new(vpcv1.DeleteInstanceGroupMembershipOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteInstanceGroupMembership(deleteInstanceGroupMembershipOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceGroupMembership(getInstanceGroupMembershipOptions *GetInstanceGroupMembershipOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceGroupMembershipPath := "/instance_groups/testString/memberships/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceGroupMembershipPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceGroupMembership with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupMembershipOptions model
				getInstanceGroupMembershipOptionsModel := new(vpcv1.GetInstanceGroupMembershipOptions)
				getInstanceGroupMembershipOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupMembershipOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupMembershipOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetInstanceGroupMembership(getInstanceGroupMembershipOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInstanceGroupMembership(getInstanceGroupMembershipOptions *GetInstanceGroupMembershipOptions)`, func() {
		version := "testString"
		getInstanceGroupMembershipPath := "/instance_groups/testString/memberships/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceGroupMembershipPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed", "delete_instance_on_membership_delete": true, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "status": "deleting"}`)
				}))
			})
			It(`Invoke GetInstanceGroupMembership successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetInstanceGroupMembership(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceGroupMembershipOptions model
				getInstanceGroupMembershipOptionsModel := new(vpcv1.GetInstanceGroupMembershipOptions)
				getInstanceGroupMembershipOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupMembershipOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupMembershipOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetInstanceGroupMembership(getInstanceGroupMembershipOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetInstanceGroupMembership with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupMembershipOptions model
				getInstanceGroupMembershipOptionsModel := new(vpcv1.GetInstanceGroupMembershipOptions)
				getInstanceGroupMembershipOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupMembershipOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupMembershipOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetInstanceGroupMembership(getInstanceGroupMembershipOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceGroupMembershipOptions model with no property values
				getInstanceGroupMembershipOptionsModelNew := new(vpcv1.GetInstanceGroupMembershipOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetInstanceGroupMembership(getInstanceGroupMembershipOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "https://vpcv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListInstanceProfiles(listInstanceProfilesOptions *ListInstanceProfilesOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceProfilesPath := "/instance/profiles"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceProfilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceProfiles with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceProfilesOptions model
				listInstanceProfilesOptionsModel := new(vpcv1.ListInstanceProfilesOptions)
				listInstanceProfilesOptionsModel.Start = core.StringPtr("testString")
				listInstanceProfilesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listInstanceProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListInstanceProfiles(listInstanceProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListInstanceProfiles(listInstanceProfilesOptions *ListInstanceProfilesOptions)`, func() {
		version := "testString"
		listInstanceProfilesPath := "/instance/profiles"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceProfilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "profiles": [{"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "bandwidth": {"type": "fixed", "value": 20000}, "port_speed": {"type": "fixed", "value": 1000}, "memory": {"type": "fixed", "value": 16}, "os_architecture": {"type": "enum", "default": "Default", "values": ["amd64"]}, "vcpu_architecture": {"type": "fixed", "value": "amd64", "default": "Default"}, "vcpu_count": {"type": "fixed", "value": 16}, "gpu_count": {"type": "fixed", "value": 2}, "gpu_manufacturer": {"type": "enum", "values": ["nvidia"]}, "gpu_memory": {"type": "fixed", "value": 16}, "gpu_model": {"type": "enum", "values": ["Tesla V100"]}, "family": "balanced"}]}`)
				}))
			})
			It(`Invoke ListInstanceProfiles successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListInstanceProfiles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceProfilesOptions model
				listInstanceProfilesOptionsModel := new(vpcv1.ListInstanceProfilesOptions)
				listInstanceProfilesOptionsModel.Start = core.StringPtr("testString")
				listInstanceProfilesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listInstanceProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListInstanceProfiles(listInstanceProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListInstanceProfiles with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceProfilesOptions model
				listInstanceProfilesOptionsModel := new(vpcv1.ListInstanceProfilesOptions)
				listInstanceProfilesOptionsModel.Start = core.StringPtr("testString")
				listInstanceProfilesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listInstanceProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListInstanceProfiles(listInstanceProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceProfile(getInstanceProfileOptions *GetInstanceProfileOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceProfilePath := "/instance/profiles/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceProfilePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceProfile with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceProfileOptions model
				getInstanceProfileOptionsModel := new(vpcv1.GetInstanceProfileOptions)
				getInstanceProfileOptionsModel.Name = core.StringPtr("testString")
				getInstanceProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetInstanceProfile(getInstanceProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInstanceProfile(getInstanceProfileOptions *GetInstanceProfileOptions)`, func() {
		version := "testString"
		getInstanceProfilePath := "/instance/profiles/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceProfilePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "bandwidth": {"type": "fixed", "value": 20000}, "port_speed": {"type": "fixed", "value": 1000}, "memory": {"type": "fixed", "value": 16}, "os_architecture": {"type": "enum", "default": "Default", "values": ["amd64"]}, "vcpu_architecture": {"type": "fixed", "value": "amd64", "default": "Default"}, "vcpu_count": {"type": "fixed", "value": 16}, "gpu_count": {"type": "fixed", "value": 2}, "gpu_manufacturer": {"type": "enum", "values": ["nvidia"]}, "gpu_memory": {"type": "fixed", "value": 16}, "gpu_model": {"type": "enum", "values": ["Tesla V100"]}, "family": "balanced"}`)
				}))
			})
			It(`Invoke GetInstanceProfile successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetInstanceProfile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceProfileOptions model
				getInstanceProfileOptionsModel := new(vpcv1.GetInstanceProfileOptions)
				getInstanceProfileOptionsModel.Name = core.StringPtr("testString")
				getInstanceProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetInstanceProfile(getInstanceProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetInstanceProfile with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceProfileOptions model
				getInstanceProfileOptionsModel := new(vpcv1.GetInstanceProfileOptions)
				getInstanceProfileOptionsModel.Name = core.StringPtr("testString")
				getInstanceProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetInstanceProfile(getInstanceProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceProfileOptions model with no property values
				getInstanceProfileOptionsModelNew := new(vpcv1.GetInstanceProfileOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetInstanceProfile(getInstanceProfileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceTemplates(listInstanceTemplatesOptions *ListInstanceTemplatesOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceTemplatesPath := "/instance/templates"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceTemplatesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceTemplates with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceTemplatesOptions model
				listInstanceTemplatesOptionsModel := new(vpcv1.ListInstanceTemplatesOptions)
				listInstanceTemplatesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListInstanceTemplates(listInstanceTemplatesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListInstanceTemplates(listInstanceTemplatesOptions *ListInstanceTemplatesOptions)`, func() {
		version := "testString"
		listInstanceTemplatesPath := "/instance/templates"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceTemplatesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "templates": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-template", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "network_interfaces": [{"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "placement_target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a"}, "profile": {"name": "bc1-4x16"}, "user_data": "UserData", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "primary_network_interface": {"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"name": "my-volume", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "profile": {"name": "general-purpose"}, "capacity": 100, "iops": 10000}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}}]}`)
				}))
			})
			It(`Invoke ListInstanceTemplates successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListInstanceTemplates(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceTemplatesOptions model
				listInstanceTemplatesOptionsModel := new(vpcv1.ListInstanceTemplatesOptions)
				listInstanceTemplatesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListInstanceTemplates(listInstanceTemplatesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListInstanceTemplates with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceTemplatesOptions model
				listInstanceTemplatesOptionsModel := new(vpcv1.ListInstanceTemplatesOptions)
				listInstanceTemplatesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListInstanceTemplates(listInstanceTemplatesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceTemplate(createInstanceTemplateOptions *CreateInstanceTemplateOptions) - Operation response error`, func() {
		version := "testString"
		createInstanceTemplatePath := "/instance/templates"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createInstanceTemplatePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstanceTemplate with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByID model
				volumeAttachmentPrototypeInstanceContextVolumeModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByID)
				volumeAttachmentPrototypeInstanceContextVolumeModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")

				// Construct an instance of the InstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementPrototypeModel := new(vpcv1.InstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				instancePlacementPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bc1-4x16")

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.AllowIpSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentPrototypeInstanceContextVolumeModel

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstanceTemplatePrototypeInstanceByImage model
				instanceTemplatePrototypeModel := new(vpcv1.InstanceTemplatePrototypeInstanceByImage)
				instanceTemplatePrototypeModel.Name = core.StringPtr("my-instance")
				instanceTemplatePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instanceTemplatePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instanceTemplatePrototypeModel.PlacementTarget = instancePlacementPrototypeModel
				instanceTemplatePrototypeModel.Profile = instanceProfileIdentityModel
				instanceTemplatePrototypeModel.UserData = core.StringPtr("testString")
				instanceTemplatePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instanceTemplatePrototypeModel.Vpc = vpcIdentityModel
				instanceTemplatePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instanceTemplatePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instanceTemplatePrototypeModel.Zone = zoneIdentityModel
				instanceTemplatePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instanceTemplatePrototypeModel.Image = imageIdentityModel

				// Construct an instance of the CreateInstanceTemplateOptions model
				createInstanceTemplateOptionsModel := new(vpcv1.CreateInstanceTemplateOptions)
				createInstanceTemplateOptionsModel.InstanceTemplatePrototype = instanceTemplatePrototypeModel
				createInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateInstanceTemplate(createInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateInstanceTemplate(createInstanceTemplateOptions *CreateInstanceTemplateOptions)`, func() {
		version := "testString"
		createInstanceTemplatePath := "/instance/templates"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createInstanceTemplatePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-template", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "network_interfaces": [{"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "placement_target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a"}, "profile": {"name": "bc1-4x16"}, "user_data": "UserData", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "primary_network_interface": {"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"name": "my-volume", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "profile": {"name": "general-purpose"}, "capacity": 100, "iops": 10000}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}}`)
				}))
			})
			It(`Invoke CreateInstanceTemplate successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateInstanceTemplate(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByID model
				volumeAttachmentPrototypeInstanceContextVolumeModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByID)
				volumeAttachmentPrototypeInstanceContextVolumeModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")

				// Construct an instance of the InstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementPrototypeModel := new(vpcv1.InstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				instancePlacementPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bc1-4x16")

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.AllowIpSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentPrototypeInstanceContextVolumeModel

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstanceTemplatePrototypeInstanceByImage model
				instanceTemplatePrototypeModel := new(vpcv1.InstanceTemplatePrototypeInstanceByImage)
				instanceTemplatePrototypeModel.Name = core.StringPtr("my-instance")
				instanceTemplatePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instanceTemplatePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instanceTemplatePrototypeModel.PlacementTarget = instancePlacementPrototypeModel
				instanceTemplatePrototypeModel.Profile = instanceProfileIdentityModel
				instanceTemplatePrototypeModel.UserData = core.StringPtr("testString")
				instanceTemplatePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instanceTemplatePrototypeModel.Vpc = vpcIdentityModel
				instanceTemplatePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instanceTemplatePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instanceTemplatePrototypeModel.Zone = zoneIdentityModel
				instanceTemplatePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instanceTemplatePrototypeModel.Image = imageIdentityModel

				// Construct an instance of the CreateInstanceTemplateOptions model
				createInstanceTemplateOptionsModel := new(vpcv1.CreateInstanceTemplateOptions)
				createInstanceTemplateOptionsModel.InstanceTemplatePrototype = instanceTemplatePrototypeModel
				createInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateInstanceTemplate(createInstanceTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateInstanceTemplate with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByID model
				volumeAttachmentPrototypeInstanceContextVolumeModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByID)
				volumeAttachmentPrototypeInstanceContextVolumeModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")

				// Construct an instance of the InstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementPrototypeModel := new(vpcv1.InstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				instancePlacementPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bc1-4x16")

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.AllowIpSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentPrototypeInstanceContextVolumeModel

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstanceTemplatePrototypeInstanceByImage model
				instanceTemplatePrototypeModel := new(vpcv1.InstanceTemplatePrototypeInstanceByImage)
				instanceTemplatePrototypeModel.Name = core.StringPtr("my-instance")
				instanceTemplatePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instanceTemplatePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instanceTemplatePrototypeModel.PlacementTarget = instancePlacementPrototypeModel
				instanceTemplatePrototypeModel.Profile = instanceProfileIdentityModel
				instanceTemplatePrototypeModel.UserData = core.StringPtr("testString")
				instanceTemplatePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instanceTemplatePrototypeModel.Vpc = vpcIdentityModel
				instanceTemplatePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instanceTemplatePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instanceTemplatePrototypeModel.Zone = zoneIdentityModel
				instanceTemplatePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instanceTemplatePrototypeModel.Image = imageIdentityModel

				// Construct an instance of the CreateInstanceTemplateOptions model
				createInstanceTemplateOptionsModel := new(vpcv1.CreateInstanceTemplateOptions)
				createInstanceTemplateOptionsModel.InstanceTemplatePrototype = instanceTemplatePrototypeModel
				createInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateInstanceTemplate(createInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceTemplateOptions model with no property values
				createInstanceTemplateOptionsModelNew := new(vpcv1.CreateInstanceTemplateOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateInstanceTemplate(createInstanceTemplateOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteInstanceTemplate(deleteInstanceTemplateOptions *DeleteInstanceTemplateOptions)`, func() {
		version := "testString"
		deleteInstanceTemplatePath := "/instance/templates/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteInstanceTemplatePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstanceTemplate successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteInstanceTemplate(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceTemplateOptions model
				deleteInstanceTemplateOptionsModel := new(vpcv1.DeleteInstanceTemplateOptions)
				deleteInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteInstanceTemplate(deleteInstanceTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstanceTemplate with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceTemplateOptions model
				deleteInstanceTemplateOptionsModel := new(vpcv1.DeleteInstanceTemplateOptions)
				deleteInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteInstanceTemplate(deleteInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceTemplateOptions model with no property values
				deleteInstanceTemplateOptionsModelNew := new(vpcv1.DeleteInstanceTemplateOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteInstanceTemplate(deleteInstanceTemplateOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceTemplate(getInstanceTemplateOptions *GetInstanceTemplateOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceTemplatePath := "/instance/templates/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceTemplatePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceTemplate with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceTemplateOptions model
				getInstanceTemplateOptionsModel := new(vpcv1.GetInstanceTemplateOptions)
				getInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				getInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetInstanceTemplate(getInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInstanceTemplate(getInstanceTemplateOptions *GetInstanceTemplateOptions)`, func() {
		version := "testString"
		getInstanceTemplatePath := "/instance/templates/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceTemplatePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-template", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "network_interfaces": [{"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "placement_target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a"}, "profile": {"name": "bc1-4x16"}, "user_data": "UserData", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "primary_network_interface": {"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"name": "my-volume", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "profile": {"name": "general-purpose"}, "capacity": 100, "iops": 10000}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}}`)
				}))
			})
			It(`Invoke GetInstanceTemplate successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetInstanceTemplate(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceTemplateOptions model
				getInstanceTemplateOptionsModel := new(vpcv1.GetInstanceTemplateOptions)
				getInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				getInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetInstanceTemplate(getInstanceTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetInstanceTemplate with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceTemplateOptions model
				getInstanceTemplateOptionsModel := new(vpcv1.GetInstanceTemplateOptions)
				getInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				getInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetInstanceTemplate(getInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceTemplateOptions model with no property values
				getInstanceTemplateOptionsModelNew := new(vpcv1.GetInstanceTemplateOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetInstanceTemplate(getInstanceTemplateOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceTemplate(updateInstanceTemplateOptions *UpdateInstanceTemplateOptions) - Operation response error`, func() {
		version := "testString"
		updateInstanceTemplatePath := "/instance/templates/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateInstanceTemplatePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateInstanceTemplate with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateInstanceTemplateOptions model
				updateInstanceTemplateOptionsModel := new(vpcv1.UpdateInstanceTemplateOptions)
				updateInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				updateInstanceTemplateOptionsModel.Name = core.StringPtr("my-instance-template")
				updateInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateInstanceTemplate(updateInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateInstanceTemplate(updateInstanceTemplateOptions *UpdateInstanceTemplateOptions)`, func() {
		version := "testString"
		updateInstanceTemplatePath := "/instance/templates/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateInstanceTemplatePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-template", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "network_interfaces": [{"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "placement_target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a"}, "profile": {"name": "bc1-4x16"}, "user_data": "UserData", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "primary_network_interface": {"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"name": "my-volume", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "profile": {"name": "general-purpose"}, "capacity": 100, "iops": 10000}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}}`)
				}))
			})
			It(`Invoke UpdateInstanceTemplate successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateInstanceTemplate(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateInstanceTemplateOptions model
				updateInstanceTemplateOptionsModel := new(vpcv1.UpdateInstanceTemplateOptions)
				updateInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				updateInstanceTemplateOptionsModel.Name = core.StringPtr("my-instance-template")
				updateInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateInstanceTemplate(updateInstanceTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateInstanceTemplate with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateInstanceTemplateOptions model
				updateInstanceTemplateOptionsModel := new(vpcv1.UpdateInstanceTemplateOptions)
				updateInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				updateInstanceTemplateOptionsModel.Name = core.StringPtr("my-instance-template")
				updateInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateInstanceTemplate(updateInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateInstanceTemplateOptions model with no property values
				updateInstanceTemplateOptionsModelNew := new(vpcv1.UpdateInstanceTemplateOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateInstanceTemplate(updateInstanceTemplateOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstances(listInstancesOptions *ListInstancesOptions) - Operation response error`, func() {
		version := "testString"
		listInstancesPath := "/instances"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstancesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.crn"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["network_interfaces.subnet.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["network_interfaces.subnet.crn"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["network_interfaces.subnet.name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["dedicated_host.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["dedicated_host.crn"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["dedicated_host.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstances with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstancesOptions model
				listInstancesOptionsModel := new(vpcv1.ListInstancesOptions)
				listInstancesOptionsModel.Start = core.StringPtr("testString")
				listInstancesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listInstancesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listInstancesOptionsModel.Name = core.StringPtr("testString")
				listInstancesOptionsModel.VpcID = core.StringPtr("testString")
				listInstancesOptionsModel.VpcCrn = core.StringPtr("testString")
				listInstancesOptionsModel.VpcName = core.StringPtr("testString")
				listInstancesOptionsModel.NetworkInterfacesSubnetID = core.StringPtr("testString")
				listInstancesOptionsModel.NetworkInterfacesSubnetCrn = core.StringPtr("testString")
				listInstancesOptionsModel.NetworkInterfacesSubnetName = core.StringPtr("testString")
				listInstancesOptionsModel.DedicatedHostID = core.StringPtr("testString")
				listInstancesOptionsModel.DedicatedHostCrn = core.StringPtr("testString")
				listInstancesOptionsModel.DedicatedHostName = core.StringPtr("testString")
				listInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListInstances(listInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListInstances(listInstancesOptions *ListInstancesOptions)`, func() {
		version := "testString"
		listInstancesPath := "/instances"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstancesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.crn"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["network_interfaces.subnet.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["network_interfaces.subnet.crn"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["network_interfaces.subnet.name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["dedicated_host.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["dedicated_host.crn"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["dedicated_host.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "instances": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "bandwidth": 1000, "boot_volume_attachment": {"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "dedicated_host": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-host"}, "gpu": {"count": 5, "manufacturer": "nvidia", "memory": 6, "model": "Tesla V100"}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "network_interfaces": [{"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "placement_target": {"name": "my-host-group", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "resource_type": "dedicated_host_group"}, "primary_network_interface": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListInstances successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListInstances(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstancesOptions model
				listInstancesOptionsModel := new(vpcv1.ListInstancesOptions)
				listInstancesOptionsModel.Start = core.StringPtr("testString")
				listInstancesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listInstancesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listInstancesOptionsModel.Name = core.StringPtr("testString")
				listInstancesOptionsModel.VpcID = core.StringPtr("testString")
				listInstancesOptionsModel.VpcCrn = core.StringPtr("testString")
				listInstancesOptionsModel.VpcName = core.StringPtr("testString")
				listInstancesOptionsModel.NetworkInterfacesSubnetID = core.StringPtr("testString")
				listInstancesOptionsModel.NetworkInterfacesSubnetCrn = core.StringPtr("testString")
				listInstancesOptionsModel.NetworkInterfacesSubnetName = core.StringPtr("testString")
				listInstancesOptionsModel.DedicatedHostID = core.StringPtr("testString")
				listInstancesOptionsModel.DedicatedHostCrn = core.StringPtr("testString")
				listInstancesOptionsModel.DedicatedHostName = core.StringPtr("testString")
				listInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListInstances(listInstancesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListInstances with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstancesOptions model
				listInstancesOptionsModel := new(vpcv1.ListInstancesOptions)
				listInstancesOptionsModel.Start = core.StringPtr("testString")
				listInstancesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listInstancesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listInstancesOptionsModel.Name = core.StringPtr("testString")
				listInstancesOptionsModel.VpcID = core.StringPtr("testString")
				listInstancesOptionsModel.VpcCrn = core.StringPtr("testString")
				listInstancesOptionsModel.VpcName = core.StringPtr("testString")
				listInstancesOptionsModel.NetworkInterfacesSubnetID = core.StringPtr("testString")
				listInstancesOptionsModel.NetworkInterfacesSubnetCrn = core.StringPtr("testString")
				listInstancesOptionsModel.NetworkInterfacesSubnetName = core.StringPtr("testString")
				listInstancesOptionsModel.DedicatedHostID = core.StringPtr("testString")
				listInstancesOptionsModel.DedicatedHostCrn = core.StringPtr("testString")
				listInstancesOptionsModel.DedicatedHostName = core.StringPtr("testString")
				listInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListInstances(listInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstance(createInstanceOptions *CreateInstanceOptions) - Operation response error`, func() {
		version := "testString"
		createInstancePath := "/instances"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createInstancePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstance with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByID model
				volumeAttachmentPrototypeInstanceContextVolumeModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByID)
				volumeAttachmentPrototypeInstanceContextVolumeModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")

				// Construct an instance of the InstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementPrototypeModel := new(vpcv1.InstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				instancePlacementPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bc1-4x16")

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.AllowIpSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentPrototypeInstanceContextVolumeModel

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstancePrototypeInstanceByImage model
				instancePrototypeModel := new(vpcv1.InstancePrototypeInstanceByImage)
				instancePrototypeModel.Name = core.StringPtr("my-instance")
				instancePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instancePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instancePrototypeModel.PlacementTarget = instancePlacementPrototypeModel
				instancePrototypeModel.Profile = instanceProfileIdentityModel
				instancePrototypeModel.UserData = core.StringPtr("testString")
				instancePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instancePrototypeModel.Vpc = vpcIdentityModel
				instancePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instancePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instancePrototypeModel.Zone = zoneIdentityModel
				instancePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instancePrototypeModel.Image = imageIdentityModel

				// Construct an instance of the CreateInstanceOptions model
				createInstanceOptionsModel := new(vpcv1.CreateInstanceOptions)
				createInstanceOptionsModel.InstancePrototype = instancePrototypeModel
				createInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateInstance(createInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateInstance(createInstanceOptions *CreateInstanceOptions)`, func() {
		version := "testString"
		createInstancePath := "/instances"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createInstancePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "bandwidth": 1000, "boot_volume_attachment": {"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "dedicated_host": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-host"}, "gpu": {"count": 5, "manufacturer": "nvidia", "memory": 6, "model": "Tesla V100"}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "network_interfaces": [{"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "placement_target": {"name": "my-host-group", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "resource_type": "dedicated_host_group"}, "primary_network_interface": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke CreateInstance successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByID model
				volumeAttachmentPrototypeInstanceContextVolumeModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByID)
				volumeAttachmentPrototypeInstanceContextVolumeModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")

				// Construct an instance of the InstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementPrototypeModel := new(vpcv1.InstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				instancePlacementPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bc1-4x16")

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.AllowIpSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentPrototypeInstanceContextVolumeModel

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstancePrototypeInstanceByImage model
				instancePrototypeModel := new(vpcv1.InstancePrototypeInstanceByImage)
				instancePrototypeModel.Name = core.StringPtr("my-instance")
				instancePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instancePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instancePrototypeModel.PlacementTarget = instancePlacementPrototypeModel
				instancePrototypeModel.Profile = instanceProfileIdentityModel
				instancePrototypeModel.UserData = core.StringPtr("testString")
				instancePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instancePrototypeModel.Vpc = vpcIdentityModel
				instancePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instancePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instancePrototypeModel.Zone = zoneIdentityModel
				instancePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instancePrototypeModel.Image = imageIdentityModel

				// Construct an instance of the CreateInstanceOptions model
				createInstanceOptionsModel := new(vpcv1.CreateInstanceOptions)
				createInstanceOptionsModel.InstancePrototype = instancePrototypeModel
				createInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateInstance(createInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateInstance with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByID model
				volumeAttachmentPrototypeInstanceContextVolumeModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByID)
				volumeAttachmentPrototypeInstanceContextVolumeModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")

				// Construct an instance of the InstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementPrototypeModel := new(vpcv1.InstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				instancePlacementPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bc1-4x16")

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.AllowIpSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentPrototypeInstanceContextVolumeModel

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstancePrototypeInstanceByImage model
				instancePrototypeModel := new(vpcv1.InstancePrototypeInstanceByImage)
				instancePrototypeModel.Name = core.StringPtr("my-instance")
				instancePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instancePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instancePrototypeModel.PlacementTarget = instancePlacementPrototypeModel
				instancePrototypeModel.Profile = instanceProfileIdentityModel
				instancePrototypeModel.UserData = core.StringPtr("testString")
				instancePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instancePrototypeModel.Vpc = vpcIdentityModel
				instancePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instancePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instancePrototypeModel.Zone = zoneIdentityModel
				instancePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instancePrototypeModel.Image = imageIdentityModel

				// Construct an instance of the CreateInstanceOptions model
				createInstanceOptionsModel := new(vpcv1.CreateInstanceOptions)
				createInstanceOptionsModel.InstancePrototype = instancePrototypeModel
				createInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateInstance(createInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceOptions model with no property values
				createInstanceOptionsModelNew := new(vpcv1.CreateInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateInstance(createInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteInstance(deleteInstanceOptions *DeleteInstanceOptions)`, func() {
		version := "testString"
		deleteInstancePath := "/instances/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteInstancePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstance successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceOptions model
				deleteInstanceOptionsModel := new(vpcv1.DeleteInstanceOptions)
				deleteInstanceOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteInstance(deleteInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstance with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceOptions model
				deleteInstanceOptionsModel := new(vpcv1.DeleteInstanceOptions)
				deleteInstanceOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteInstance(deleteInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceOptions model with no property values
				deleteInstanceOptionsModelNew := new(vpcv1.DeleteInstanceOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteInstance(deleteInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstance(getInstanceOptions *GetInstanceOptions) - Operation response error`, func() {
		version := "testString"
		getInstancePath := "/instances/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstancePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstance with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceOptions model
				getInstanceOptionsModel := new(vpcv1.GetInstanceOptions)
				getInstanceOptionsModel.ID = core.StringPtr("testString")
				getInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetInstance(getInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInstance(getInstanceOptions *GetInstanceOptions)`, func() {
		version := "testString"
		getInstancePath := "/instances/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstancePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "bandwidth": 1000, "boot_volume_attachment": {"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "dedicated_host": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-host"}, "gpu": {"count": 5, "manufacturer": "nvidia", "memory": 6, "model": "Tesla V100"}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "network_interfaces": [{"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "placement_target": {"name": "my-host-group", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "resource_type": "dedicated_host_group"}, "primary_network_interface": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke GetInstance successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceOptions model
				getInstanceOptionsModel := new(vpcv1.GetInstanceOptions)
				getInstanceOptionsModel.ID = core.StringPtr("testString")
				getInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetInstance(getInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetInstance with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceOptions model
				getInstanceOptionsModel := new(vpcv1.GetInstanceOptions)
				getInstanceOptionsModel.ID = core.StringPtr("testString")
				getInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetInstance(getInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceOptions model with no property values
				getInstanceOptionsModelNew := new(vpcv1.GetInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetInstance(getInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstance(updateInstanceOptions *UpdateInstanceOptions) - Operation response error`, func() {
		version := "testString"
		updateInstancePath := "/instances/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateInstancePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateInstance with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateInstanceOptions model
				updateInstanceOptionsModel := new(vpcv1.UpdateInstanceOptions)
				updateInstanceOptionsModel.ID = core.StringPtr("testString")
				updateInstanceOptionsModel.Name = core.StringPtr("my-instance")
				updateInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateInstance(updateInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateInstance(updateInstanceOptions *UpdateInstanceOptions)`, func() {
		version := "testString"
		updateInstancePath := "/instances/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateInstancePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "bandwidth": 1000, "boot_volume_attachment": {"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "dedicated_host": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-host"}, "gpu": {"count": 5, "manufacturer": "nvidia", "memory": 6, "model": "Tesla V100"}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "network_interfaces": [{"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "placement_target": {"name": "my-host-group", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "resource_type": "dedicated_host_group"}, "primary_network_interface": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateInstance successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateInstanceOptions model
				updateInstanceOptionsModel := new(vpcv1.UpdateInstanceOptions)
				updateInstanceOptionsModel.ID = core.StringPtr("testString")
				updateInstanceOptionsModel.Name = core.StringPtr("my-instance")
				updateInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateInstance(updateInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateInstance with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateInstanceOptions model
				updateInstanceOptionsModel := new(vpcv1.UpdateInstanceOptions)
				updateInstanceOptionsModel.ID = core.StringPtr("testString")
				updateInstanceOptionsModel.Name = core.StringPtr("my-instance")
				updateInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateInstance(updateInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateInstanceOptions model with no property values
				updateInstanceOptionsModelNew := new(vpcv1.UpdateInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateInstance(updateInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceInitialization(getInstanceInitializationOptions *GetInstanceInitializationOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceInitializationPath := "/instances/testString/initialization"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceInitializationPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceInitialization with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceInitializationOptions model
				getInstanceInitializationOptionsModel := new(vpcv1.GetInstanceInitializationOptions)
				getInstanceInitializationOptionsModel.ID = core.StringPtr("testString")
				getInstanceInitializationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetInstanceInitialization(getInstanceInitializationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInstanceInitialization(getInstanceInitializationOptions *GetInstanceInitializationOptions)`, func() {
		version := "testString"
		getInstanceInitializationPath := "/instances/testString/initialization"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceInitializationPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key"}], "password": {"encrypted_password": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "encryption_key": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key"}}}`)
				}))
			})
			It(`Invoke GetInstanceInitialization successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetInstanceInitialization(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceInitializationOptions model
				getInstanceInitializationOptionsModel := new(vpcv1.GetInstanceInitializationOptions)
				getInstanceInitializationOptionsModel.ID = core.StringPtr("testString")
				getInstanceInitializationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetInstanceInitialization(getInstanceInitializationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetInstanceInitialization with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceInitializationOptions model
				getInstanceInitializationOptionsModel := new(vpcv1.GetInstanceInitializationOptions)
				getInstanceInitializationOptionsModel.ID = core.StringPtr("testString")
				getInstanceInitializationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetInstanceInitialization(getInstanceInitializationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceInitializationOptions model with no property values
				getInstanceInitializationOptionsModelNew := new(vpcv1.GetInstanceInitializationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetInstanceInitialization(getInstanceInitializationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceAction(createInstanceActionOptions *CreateInstanceActionOptions) - Operation response error`, func() {
		version := "testString"
		createInstanceActionPath := "/instances/testString/actions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createInstanceActionPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstanceAction with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CreateInstanceActionOptions model
				createInstanceActionOptionsModel := new(vpcv1.CreateInstanceActionOptions)
				createInstanceActionOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceActionOptionsModel.Type = core.StringPtr("reboot")
				createInstanceActionOptionsModel.Force = core.BoolPtr(true)
				createInstanceActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateInstanceAction(createInstanceActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateInstanceAction(createInstanceActionOptions *CreateInstanceActionOptions)`, func() {
		version := "testString"
		createInstanceActionPath := "/instances/testString/actions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createInstanceActionPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "109a1b6e-1242-4de1-be44-38705e9474ed", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/actions/109a1b6e-1242-4de1-be44-38705e9474ed", "force": false, "type": "reboot", "completed_at": "2019-01-01T12:00:00", "created_at": "2019-01-01T12:00:00", "started_at": "2019-01-01T12:00:00", "status": "completed"}`)
				}))
			})
			It(`Invoke CreateInstanceAction successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateInstanceAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateInstanceActionOptions model
				createInstanceActionOptionsModel := new(vpcv1.CreateInstanceActionOptions)
				createInstanceActionOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceActionOptionsModel.Type = core.StringPtr("reboot")
				createInstanceActionOptionsModel.Force = core.BoolPtr(true)
				createInstanceActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateInstanceAction(createInstanceActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateInstanceAction with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CreateInstanceActionOptions model
				createInstanceActionOptionsModel := new(vpcv1.CreateInstanceActionOptions)
				createInstanceActionOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceActionOptionsModel.Type = core.StringPtr("reboot")
				createInstanceActionOptionsModel.Force = core.BoolPtr(true)
				createInstanceActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateInstanceAction(createInstanceActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceActionOptions model with no property values
				createInstanceActionOptionsModelNew := new(vpcv1.CreateInstanceActionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateInstanceAction(createInstanceActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListNetworkInterfaces(listNetworkInterfacesOptions *ListNetworkInterfacesOptions) - Operation response error`, func() {
		version := "testString"
		listNetworkInterfacesPath := "/instances/testString/network_interfaces"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listNetworkInterfacesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListNetworkInterfaces with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListNetworkInterfacesOptions model
				listNetworkInterfacesOptionsModel := new(vpcv1.ListNetworkInterfacesOptions)
				listNetworkInterfacesOptionsModel.InstanceID = core.StringPtr("testString")
				listNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListNetworkInterfaces(listNetworkInterfacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListNetworkInterfaces(listNetworkInterfacesOptions *ListNetworkInterfacesOptions)`, func() {
		version := "testString"
		listNetworkInterfacesPath := "/instances/testString/network_interfaces"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listNetworkInterfacesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"network_interfaces": [{"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface", "allow_ip_spoofing": true, "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}]}`)
				}))
			})
			It(`Invoke ListNetworkInterfaces successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListNetworkInterfaces(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListNetworkInterfacesOptions model
				listNetworkInterfacesOptionsModel := new(vpcv1.ListNetworkInterfacesOptions)
				listNetworkInterfacesOptionsModel.InstanceID = core.StringPtr("testString")
				listNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListNetworkInterfaces(listNetworkInterfacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListNetworkInterfaces with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListNetworkInterfacesOptions model
				listNetworkInterfacesOptionsModel := new(vpcv1.ListNetworkInterfacesOptions)
				listNetworkInterfacesOptionsModel.InstanceID = core.StringPtr("testString")
				listNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListNetworkInterfaces(listNetworkInterfacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListNetworkInterfacesOptions model with no property values
				listNetworkInterfacesOptionsModelNew := new(vpcv1.ListNetworkInterfacesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListNetworkInterfaces(listNetworkInterfacesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateNetworkInterface(createNetworkInterfaceOptions *CreateNetworkInterfaceOptions) - Operation response error`, func() {
		version := "testString"
		createNetworkInterfacePath := "/instances/testString/network_interfaces"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createNetworkInterfacePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateNetworkInterface with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the CreateNetworkInterfaceOptions model
				createNetworkInterfaceOptionsModel := new(vpcv1.CreateNetworkInterfaceOptions)
				createNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				createNetworkInterfaceOptionsModel.Subnet = subnetIdentityModel
				createNetworkInterfaceOptionsModel.AllowIpSpoofing = core.BoolPtr(true)
				createNetworkInterfaceOptionsModel.Name = core.StringPtr("my-network-interface")
				createNetworkInterfaceOptionsModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				createNetworkInterfaceOptionsModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				createNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateNetworkInterface(createNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateNetworkInterface(createNetworkInterfaceOptions *CreateNetworkInterfaceOptions)`, func() {
		version := "testString"
		createNetworkInterfacePath := "/instances/testString/network_interfaces"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createNetworkInterfacePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface", "allow_ip_spoofing": true, "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}`)
				}))
			})
			It(`Invoke CreateNetworkInterface successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateNetworkInterface(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the CreateNetworkInterfaceOptions model
				createNetworkInterfaceOptionsModel := new(vpcv1.CreateNetworkInterfaceOptions)
				createNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				createNetworkInterfaceOptionsModel.Subnet = subnetIdentityModel
				createNetworkInterfaceOptionsModel.AllowIpSpoofing = core.BoolPtr(true)
				createNetworkInterfaceOptionsModel.Name = core.StringPtr("my-network-interface")
				createNetworkInterfaceOptionsModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				createNetworkInterfaceOptionsModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				createNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateNetworkInterface(createNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateNetworkInterface with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the CreateNetworkInterfaceOptions model
				createNetworkInterfaceOptionsModel := new(vpcv1.CreateNetworkInterfaceOptions)
				createNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				createNetworkInterfaceOptionsModel.Subnet = subnetIdentityModel
				createNetworkInterfaceOptionsModel.AllowIpSpoofing = core.BoolPtr(true)
				createNetworkInterfaceOptionsModel.Name = core.StringPtr("my-network-interface")
				createNetworkInterfaceOptionsModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				createNetworkInterfaceOptionsModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				createNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateNetworkInterface(createNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateNetworkInterfaceOptions model with no property values
				createNetworkInterfaceOptionsModelNew := new(vpcv1.CreateNetworkInterfaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateNetworkInterface(createNetworkInterfaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteNetworkInterface(deleteNetworkInterfaceOptions *DeleteNetworkInterfaceOptions)`, func() {
		version := "testString"
		deleteNetworkInterfacePath := "/instances/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteNetworkInterfacePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteNetworkInterface successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteNetworkInterface(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteNetworkInterfaceOptions model
				deleteNetworkInterfaceOptionsModel := new(vpcv1.DeleteNetworkInterfaceOptions)
				deleteNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				deleteNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				deleteNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteNetworkInterface(deleteNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteNetworkInterface with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteNetworkInterfaceOptions model
				deleteNetworkInterfaceOptionsModel := new(vpcv1.DeleteNetworkInterfaceOptions)
				deleteNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				deleteNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				deleteNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteNetworkInterface(deleteNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteNetworkInterfaceOptions model with no property values
				deleteNetworkInterfaceOptionsModelNew := new(vpcv1.DeleteNetworkInterfaceOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteNetworkInterface(deleteNetworkInterfaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetNetworkInterface(getNetworkInterfaceOptions *GetNetworkInterfaceOptions) - Operation response error`, func() {
		version := "testString"
		getNetworkInterfacePath := "/instances/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getNetworkInterfacePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetNetworkInterface with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetNetworkInterfaceOptions model
				getNetworkInterfaceOptionsModel := new(vpcv1.GetNetworkInterfaceOptions)
				getNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				getNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetNetworkInterface(getNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetNetworkInterface(getNetworkInterfaceOptions *GetNetworkInterfaceOptions)`, func() {
		version := "testString"
		getNetworkInterfacePath := "/instances/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getNetworkInterfacePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface", "allow_ip_spoofing": true, "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}`)
				}))
			})
			It(`Invoke GetNetworkInterface successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetNetworkInterface(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetNetworkInterfaceOptions model
				getNetworkInterfaceOptionsModel := new(vpcv1.GetNetworkInterfaceOptions)
				getNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				getNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetNetworkInterface(getNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetNetworkInterface with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetNetworkInterfaceOptions model
				getNetworkInterfaceOptionsModel := new(vpcv1.GetNetworkInterfaceOptions)
				getNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				getNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetNetworkInterface(getNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetNetworkInterfaceOptions model with no property values
				getNetworkInterfaceOptionsModelNew := new(vpcv1.GetNetworkInterfaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetNetworkInterface(getNetworkInterfaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateNetworkInterface(updateNetworkInterfaceOptions *UpdateNetworkInterfaceOptions) - Operation response error`, func() {
		version := "testString"
		updateNetworkInterfacePath := "/instances/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateNetworkInterfacePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateNetworkInterface with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateNetworkInterfaceOptions model
				updateNetworkInterfaceOptionsModel := new(vpcv1.UpdateNetworkInterfaceOptions)
				updateNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				updateNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				updateNetworkInterfaceOptionsModel.AllowIpSpoofing = core.BoolPtr(true)
				updateNetworkInterfaceOptionsModel.Name = core.StringPtr("my-network-interface")
				updateNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateNetworkInterface(updateNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateNetworkInterface(updateNetworkInterfaceOptions *UpdateNetworkInterfaceOptions)`, func() {
		version := "testString"
		updateNetworkInterfacePath := "/instances/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateNetworkInterfacePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface", "allow_ip_spoofing": true, "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}`)
				}))
			})
			It(`Invoke UpdateNetworkInterface successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateNetworkInterface(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateNetworkInterfaceOptions model
				updateNetworkInterfaceOptionsModel := new(vpcv1.UpdateNetworkInterfaceOptions)
				updateNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				updateNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				updateNetworkInterfaceOptionsModel.AllowIpSpoofing = core.BoolPtr(true)
				updateNetworkInterfaceOptionsModel.Name = core.StringPtr("my-network-interface")
				updateNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateNetworkInterface(updateNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateNetworkInterface with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateNetworkInterfaceOptions model
				updateNetworkInterfaceOptionsModel := new(vpcv1.UpdateNetworkInterfaceOptions)
				updateNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				updateNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				updateNetworkInterfaceOptionsModel.AllowIpSpoofing = core.BoolPtr(true)
				updateNetworkInterfaceOptionsModel.Name = core.StringPtr("my-network-interface")
				updateNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateNetworkInterface(updateNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateNetworkInterfaceOptions model with no property values
				updateNetworkInterfaceOptionsModelNew := new(vpcv1.UpdateNetworkInterfaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateNetworkInterface(updateNetworkInterfaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListNetworkInterfaceFloatingIps(listNetworkInterfaceFloatingIpsOptions *ListNetworkInterfaceFloatingIpsOptions) - Operation response error`, func() {
		version := "testString"
		listNetworkInterfaceFloatingIpsPath := "/instances/testString/network_interfaces/testString/floating_ips"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listNetworkInterfaceFloatingIpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListNetworkInterfaceFloatingIps with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListNetworkInterfaceFloatingIpsOptions model
				listNetworkInterfaceFloatingIpsOptionsModel := new(vpcv1.ListNetworkInterfaceFloatingIpsOptions)
				listNetworkInterfaceFloatingIpsOptionsModel.InstanceID = core.StringPtr("testString")
				listNetworkInterfaceFloatingIpsOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				listNetworkInterfaceFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListNetworkInterfaceFloatingIps(listNetworkInterfaceFloatingIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListNetworkInterfaceFloatingIps(listNetworkInterfaceFloatingIpsOptions *ListNetworkInterfaceFloatingIpsOptions)`, func() {
		version := "testString"
		listNetworkInterfaceFloatingIpsPath := "/instances/testString/network_interfaces/testString/floating_ips"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listNetworkInterfaceFloatingIpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListNetworkInterfaceFloatingIps successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListNetworkInterfaceFloatingIps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListNetworkInterfaceFloatingIpsOptions model
				listNetworkInterfaceFloatingIpsOptionsModel := new(vpcv1.ListNetworkInterfaceFloatingIpsOptions)
				listNetworkInterfaceFloatingIpsOptionsModel.InstanceID = core.StringPtr("testString")
				listNetworkInterfaceFloatingIpsOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				listNetworkInterfaceFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListNetworkInterfaceFloatingIps(listNetworkInterfaceFloatingIpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListNetworkInterfaceFloatingIps with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListNetworkInterfaceFloatingIpsOptions model
				listNetworkInterfaceFloatingIpsOptionsModel := new(vpcv1.ListNetworkInterfaceFloatingIpsOptions)
				listNetworkInterfaceFloatingIpsOptionsModel.InstanceID = core.StringPtr("testString")
				listNetworkInterfaceFloatingIpsOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				listNetworkInterfaceFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListNetworkInterfaceFloatingIps(listNetworkInterfaceFloatingIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListNetworkInterfaceFloatingIpsOptions model with no property values
				listNetworkInterfaceFloatingIpsOptionsModelNew := new(vpcv1.ListNetworkInterfaceFloatingIpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListNetworkInterfaceFloatingIps(listNetworkInterfaceFloatingIpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteNetworkInterfaceFloatingIpBinding(deleteNetworkInterfaceFloatingIpBindingOptions *DeleteNetworkInterfaceFloatingIpBindingOptions)`, func() {
		version := "testString"
		deleteNetworkInterfaceFloatingIpBindingPath := "/instances/testString/network_interfaces/testString/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteNetworkInterfaceFloatingIpBindingPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteNetworkInterfaceFloatingIpBinding successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteNetworkInterfaceFloatingIpBinding(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteNetworkInterfaceFloatingIpBindingOptions model
				deleteNetworkInterfaceFloatingIpBindingOptionsModel := new(vpcv1.DeleteNetworkInterfaceFloatingIpBindingOptions)
				deleteNetworkInterfaceFloatingIpBindingOptionsModel.InstanceID = core.StringPtr("testString")
				deleteNetworkInterfaceFloatingIpBindingOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				deleteNetworkInterfaceFloatingIpBindingOptionsModel.ID = core.StringPtr("testString")
				deleteNetworkInterfaceFloatingIpBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteNetworkInterfaceFloatingIpBinding(deleteNetworkInterfaceFloatingIpBindingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteNetworkInterfaceFloatingIpBinding with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteNetworkInterfaceFloatingIpBindingOptions model
				deleteNetworkInterfaceFloatingIpBindingOptionsModel := new(vpcv1.DeleteNetworkInterfaceFloatingIpBindingOptions)
				deleteNetworkInterfaceFloatingIpBindingOptionsModel.InstanceID = core.StringPtr("testString")
				deleteNetworkInterfaceFloatingIpBindingOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				deleteNetworkInterfaceFloatingIpBindingOptionsModel.ID = core.StringPtr("testString")
				deleteNetworkInterfaceFloatingIpBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteNetworkInterfaceFloatingIpBinding(deleteNetworkInterfaceFloatingIpBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteNetworkInterfaceFloatingIpBindingOptions model with no property values
				deleteNetworkInterfaceFloatingIpBindingOptionsModelNew := new(vpcv1.DeleteNetworkInterfaceFloatingIpBindingOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteNetworkInterfaceFloatingIpBinding(deleteNetworkInterfaceFloatingIpBindingOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetNetworkInterfaceFloatingIp(getNetworkInterfaceFloatingIpOptions *GetNetworkInterfaceFloatingIpOptions) - Operation response error`, func() {
		version := "testString"
		getNetworkInterfaceFloatingIpPath := "/instances/testString/network_interfaces/testString/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getNetworkInterfaceFloatingIpPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetNetworkInterfaceFloatingIp with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetNetworkInterfaceFloatingIpOptions model
				getNetworkInterfaceFloatingIpOptionsModel := new(vpcv1.GetNetworkInterfaceFloatingIpOptions)
				getNetworkInterfaceFloatingIpOptionsModel.InstanceID = core.StringPtr("testString")
				getNetworkInterfaceFloatingIpOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				getNetworkInterfaceFloatingIpOptionsModel.ID = core.StringPtr("testString")
				getNetworkInterfaceFloatingIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetNetworkInterfaceFloatingIp(getNetworkInterfaceFloatingIpOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetNetworkInterfaceFloatingIp(getNetworkInterfaceFloatingIpOptions *GetNetworkInterfaceFloatingIpOptions)`, func() {
		version := "testString"
		getNetworkInterfaceFloatingIpPath := "/instances/testString/network_interfaces/testString/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getNetworkInterfaceFloatingIpPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke GetNetworkInterfaceFloatingIp successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetNetworkInterfaceFloatingIp(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetNetworkInterfaceFloatingIpOptions model
				getNetworkInterfaceFloatingIpOptionsModel := new(vpcv1.GetNetworkInterfaceFloatingIpOptions)
				getNetworkInterfaceFloatingIpOptionsModel.InstanceID = core.StringPtr("testString")
				getNetworkInterfaceFloatingIpOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				getNetworkInterfaceFloatingIpOptionsModel.ID = core.StringPtr("testString")
				getNetworkInterfaceFloatingIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetNetworkInterfaceFloatingIp(getNetworkInterfaceFloatingIpOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetNetworkInterfaceFloatingIp with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetNetworkInterfaceFloatingIpOptions model
				getNetworkInterfaceFloatingIpOptionsModel := new(vpcv1.GetNetworkInterfaceFloatingIpOptions)
				getNetworkInterfaceFloatingIpOptionsModel.InstanceID = core.StringPtr("testString")
				getNetworkInterfaceFloatingIpOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				getNetworkInterfaceFloatingIpOptionsModel.ID = core.StringPtr("testString")
				getNetworkInterfaceFloatingIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetNetworkInterfaceFloatingIp(getNetworkInterfaceFloatingIpOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetNetworkInterfaceFloatingIpOptions model with no property values
				getNetworkInterfaceFloatingIpOptionsModelNew := new(vpcv1.GetNetworkInterfaceFloatingIpOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetNetworkInterfaceFloatingIp(getNetworkInterfaceFloatingIpOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateNetworkInterfaceFloatingIpBinding(createNetworkInterfaceFloatingIpBindingOptions *CreateNetworkInterfaceFloatingIpBindingOptions) - Operation response error`, func() {
		version := "testString"
		createNetworkInterfaceFloatingIpBindingPath := "/instances/testString/network_interfaces/testString/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createNetworkInterfaceFloatingIpBindingPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateNetworkInterfaceFloatingIpBinding with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CreateNetworkInterfaceFloatingIpBindingOptions model
				createNetworkInterfaceFloatingIpBindingOptionsModel := new(vpcv1.CreateNetworkInterfaceFloatingIpBindingOptions)
				createNetworkInterfaceFloatingIpBindingOptionsModel.InstanceID = core.StringPtr("testString")
				createNetworkInterfaceFloatingIpBindingOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				createNetworkInterfaceFloatingIpBindingOptionsModel.ID = core.StringPtr("testString")
				createNetworkInterfaceFloatingIpBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateNetworkInterfaceFloatingIpBinding(createNetworkInterfaceFloatingIpBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateNetworkInterfaceFloatingIpBinding(createNetworkInterfaceFloatingIpBindingOptions *CreateNetworkInterfaceFloatingIpBindingOptions)`, func() {
		version := "testString"
		createNetworkInterfaceFloatingIpBindingPath := "/instances/testString/network_interfaces/testString/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createNetworkInterfaceFloatingIpBindingPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke CreateNetworkInterfaceFloatingIpBinding successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateNetworkInterfaceFloatingIpBinding(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateNetworkInterfaceFloatingIpBindingOptions model
				createNetworkInterfaceFloatingIpBindingOptionsModel := new(vpcv1.CreateNetworkInterfaceFloatingIpBindingOptions)
				createNetworkInterfaceFloatingIpBindingOptionsModel.InstanceID = core.StringPtr("testString")
				createNetworkInterfaceFloatingIpBindingOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				createNetworkInterfaceFloatingIpBindingOptionsModel.ID = core.StringPtr("testString")
				createNetworkInterfaceFloatingIpBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateNetworkInterfaceFloatingIpBinding(createNetworkInterfaceFloatingIpBindingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateNetworkInterfaceFloatingIpBinding with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CreateNetworkInterfaceFloatingIpBindingOptions model
				createNetworkInterfaceFloatingIpBindingOptionsModel := new(vpcv1.CreateNetworkInterfaceFloatingIpBindingOptions)
				createNetworkInterfaceFloatingIpBindingOptionsModel.InstanceID = core.StringPtr("testString")
				createNetworkInterfaceFloatingIpBindingOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				createNetworkInterfaceFloatingIpBindingOptionsModel.ID = core.StringPtr("testString")
				createNetworkInterfaceFloatingIpBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateNetworkInterfaceFloatingIpBinding(createNetworkInterfaceFloatingIpBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateNetworkInterfaceFloatingIpBindingOptions model with no property values
				createNetworkInterfaceFloatingIpBindingOptionsModelNew := new(vpcv1.CreateNetworkInterfaceFloatingIpBindingOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateNetworkInterfaceFloatingIpBinding(createNetworkInterfaceFloatingIpBindingOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVolumeAttachments(listVolumeAttachmentsOptions *ListVolumeAttachmentsOptions) - Operation response error`, func() {
		version := "testString"
		listVolumeAttachmentsPath := "/instances/testString/volume_attachments"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVolumeAttachmentsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVolumeAttachments with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVolumeAttachmentsOptions model
				listVolumeAttachmentsOptionsModel := new(vpcv1.ListVolumeAttachmentsOptions)
				listVolumeAttachmentsOptionsModel.InstanceID = core.StringPtr("testString")
				listVolumeAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVolumeAttachments(listVolumeAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVolumeAttachments(listVolumeAttachmentsOptions *ListVolumeAttachmentsOptions)`, func() {
		version := "testString"
		listVolumeAttachmentsPath := "/instances/testString/volume_attachments"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVolumeAttachmentsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}, "created_at": "2019-01-01T12:00:00", "status": "attached", "type": "boot"}]}`)
				}))
			})
			It(`Invoke ListVolumeAttachments successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVolumeAttachments(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVolumeAttachmentsOptions model
				listVolumeAttachmentsOptionsModel := new(vpcv1.ListVolumeAttachmentsOptions)
				listVolumeAttachmentsOptionsModel.InstanceID = core.StringPtr("testString")
				listVolumeAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVolumeAttachments(listVolumeAttachmentsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVolumeAttachments with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVolumeAttachmentsOptions model
				listVolumeAttachmentsOptionsModel := new(vpcv1.ListVolumeAttachmentsOptions)
				listVolumeAttachmentsOptionsModel.InstanceID = core.StringPtr("testString")
				listVolumeAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVolumeAttachments(listVolumeAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVolumeAttachmentsOptions model with no property values
				listVolumeAttachmentsOptionsModelNew := new(vpcv1.ListVolumeAttachmentsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListVolumeAttachments(listVolumeAttachmentsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVolumeAttachment(createVolumeAttachmentOptions *CreateVolumeAttachmentOptions) - Operation response error`, func() {
		version := "testString"
		createVolumeAttachmentPath := "/instances/testString/volume_attachments"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVolumeAttachmentPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVolumeAttachment with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the VolumeIdentityByID model
				volumeIdentityModel := new(vpcv1.VolumeIdentityByID)
				volumeIdentityModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the CreateVolumeAttachmentOptions model
				createVolumeAttachmentOptionsModel := new(vpcv1.CreateVolumeAttachmentOptions)
				createVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				createVolumeAttachmentOptionsModel.Volume = volumeIdentityModel
				createVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				createVolumeAttachmentOptionsModel.Name = core.StringPtr("my-volume-attachment")
				createVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateVolumeAttachment(createVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateVolumeAttachment(createVolumeAttachmentOptions *CreateVolumeAttachmentOptions)`, func() {
		version := "testString"
		createVolumeAttachmentPath := "/instances/testString/volume_attachments"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVolumeAttachmentPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}, "created_at": "2019-01-01T12:00:00", "status": "attached", "type": "boot"}`)
				}))
			})
			It(`Invoke CreateVolumeAttachment successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateVolumeAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VolumeIdentityByID model
				volumeIdentityModel := new(vpcv1.VolumeIdentityByID)
				volumeIdentityModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the CreateVolumeAttachmentOptions model
				createVolumeAttachmentOptionsModel := new(vpcv1.CreateVolumeAttachmentOptions)
				createVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				createVolumeAttachmentOptionsModel.Volume = volumeIdentityModel
				createVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				createVolumeAttachmentOptionsModel.Name = core.StringPtr("my-volume-attachment")
				createVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateVolumeAttachment(createVolumeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateVolumeAttachment with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the VolumeIdentityByID model
				volumeIdentityModel := new(vpcv1.VolumeIdentityByID)
				volumeIdentityModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the CreateVolumeAttachmentOptions model
				createVolumeAttachmentOptionsModel := new(vpcv1.CreateVolumeAttachmentOptions)
				createVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				createVolumeAttachmentOptionsModel.Volume = volumeIdentityModel
				createVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				createVolumeAttachmentOptionsModel.Name = core.StringPtr("my-volume-attachment")
				createVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateVolumeAttachment(createVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVolumeAttachmentOptions model with no property values
				createVolumeAttachmentOptionsModelNew := new(vpcv1.CreateVolumeAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateVolumeAttachment(createVolumeAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteVolumeAttachment(deleteVolumeAttachmentOptions *DeleteVolumeAttachmentOptions)`, func() {
		version := "testString"
		deleteVolumeAttachmentPath := "/instances/testString/volume_attachments/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteVolumeAttachmentPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVolumeAttachment successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteVolumeAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVolumeAttachmentOptions model
				deleteVolumeAttachmentOptionsModel := new(vpcv1.DeleteVolumeAttachmentOptions)
				deleteVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				deleteVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				deleteVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteVolumeAttachment(deleteVolumeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVolumeAttachment with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteVolumeAttachmentOptions model
				deleteVolumeAttachmentOptionsModel := new(vpcv1.DeleteVolumeAttachmentOptions)
				deleteVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				deleteVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				deleteVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteVolumeAttachment(deleteVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVolumeAttachmentOptions model with no property values
				deleteVolumeAttachmentOptionsModelNew := new(vpcv1.DeleteVolumeAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteVolumeAttachment(deleteVolumeAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVolumeAttachment(getVolumeAttachmentOptions *GetVolumeAttachmentOptions) - Operation response error`, func() {
		version := "testString"
		getVolumeAttachmentPath := "/instances/testString/volume_attachments/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVolumeAttachmentPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVolumeAttachment with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVolumeAttachmentOptions model
				getVolumeAttachmentOptionsModel := new(vpcv1.GetVolumeAttachmentOptions)
				getVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				getVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				getVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVolumeAttachment(getVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVolumeAttachment(getVolumeAttachmentOptions *GetVolumeAttachmentOptions)`, func() {
		version := "testString"
		getVolumeAttachmentPath := "/instances/testString/volume_attachments/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVolumeAttachmentPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}, "created_at": "2019-01-01T12:00:00", "status": "attached", "type": "boot"}`)
				}))
			})
			It(`Invoke GetVolumeAttachment successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVolumeAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVolumeAttachmentOptions model
				getVolumeAttachmentOptionsModel := new(vpcv1.GetVolumeAttachmentOptions)
				getVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				getVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				getVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVolumeAttachment(getVolumeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVolumeAttachment with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVolumeAttachmentOptions model
				getVolumeAttachmentOptionsModel := new(vpcv1.GetVolumeAttachmentOptions)
				getVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				getVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				getVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVolumeAttachment(getVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVolumeAttachmentOptions model with no property values
				getVolumeAttachmentOptionsModelNew := new(vpcv1.GetVolumeAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVolumeAttachment(getVolumeAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVolumeAttachment(updateVolumeAttachmentOptions *UpdateVolumeAttachmentOptions) - Operation response error`, func() {
		version := "testString"
		updateVolumeAttachmentPath := "/instances/testString/volume_attachments/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVolumeAttachmentPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVolumeAttachment with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVolumeAttachmentOptions model
				updateVolumeAttachmentOptionsModel := new(vpcv1.UpdateVolumeAttachmentOptions)
				updateVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				updateVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				updateVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				updateVolumeAttachmentOptionsModel.Name = core.StringPtr("my-volume-attachment")
				updateVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateVolumeAttachment(updateVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateVolumeAttachment(updateVolumeAttachmentOptions *UpdateVolumeAttachmentOptions)`, func() {
		version := "testString"
		updateVolumeAttachmentPath := "/instances/testString/volume_attachments/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVolumeAttachmentPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}, "created_at": "2019-01-01T12:00:00", "status": "attached", "type": "boot"}`)
				}))
			})
			It(`Invoke UpdateVolumeAttachment successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateVolumeAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateVolumeAttachmentOptions model
				updateVolumeAttachmentOptionsModel := new(vpcv1.UpdateVolumeAttachmentOptions)
				updateVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				updateVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				updateVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				updateVolumeAttachmentOptionsModel.Name = core.StringPtr("my-volume-attachment")
				updateVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateVolumeAttachment(updateVolumeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateVolumeAttachment with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVolumeAttachmentOptions model
				updateVolumeAttachmentOptionsModel := new(vpcv1.UpdateVolumeAttachmentOptions)
				updateVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				updateVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				updateVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				updateVolumeAttachmentOptionsModel.Name = core.StringPtr("my-volume-attachment")
				updateVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateVolumeAttachment(updateVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVolumeAttachmentOptions model with no property values
				updateVolumeAttachmentOptionsModelNew := new(vpcv1.UpdateVolumeAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateVolumeAttachment(updateVolumeAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "https://vpcv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListLoadBalancerProfiles(listLoadBalancerProfilesOptions *ListLoadBalancerProfilesOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancerProfilesPath := "/load_balancer/profiles"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerProfilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancerProfiles with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerProfilesOptions model
				listLoadBalancerProfilesOptionsModel := new(vpcv1.ListLoadBalancerProfilesOptions)
				listLoadBalancerProfilesOptionsModel.Start = core.StringPtr("testString")
				listLoadBalancerProfilesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listLoadBalancerProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListLoadBalancerProfiles(listLoadBalancerProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListLoadBalancerProfiles(listLoadBalancerProfilesOptions *ListLoadBalancerProfilesOptions)`, func() {
		version := "testString"
		listLoadBalancerProfilesPath := "/load_balancer/profiles"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerProfilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "profiles": [{"name": "network-small", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-small", "family": "network"}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerProfiles successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListLoadBalancerProfiles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancerProfilesOptions model
				listLoadBalancerProfilesOptionsModel := new(vpcv1.ListLoadBalancerProfilesOptions)
				listLoadBalancerProfilesOptionsModel.Start = core.StringPtr("testString")
				listLoadBalancerProfilesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listLoadBalancerProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListLoadBalancerProfiles(listLoadBalancerProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListLoadBalancerProfiles with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerProfilesOptions model
				listLoadBalancerProfilesOptionsModel := new(vpcv1.ListLoadBalancerProfilesOptions)
				listLoadBalancerProfilesOptionsModel.Start = core.StringPtr("testString")
				listLoadBalancerProfilesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listLoadBalancerProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListLoadBalancerProfiles(listLoadBalancerProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerProfile(getLoadBalancerProfileOptions *GetLoadBalancerProfileOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerProfilePath := "/load_balancer/profiles/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerProfilePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerProfile with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerProfileOptions model
				getLoadBalancerProfileOptionsModel := new(vpcv1.GetLoadBalancerProfileOptions)
				getLoadBalancerProfileOptionsModel.Name = core.StringPtr("testString")
				getLoadBalancerProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetLoadBalancerProfile(getLoadBalancerProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetLoadBalancerProfile(getLoadBalancerProfileOptions *GetLoadBalancerProfileOptions)`, func() {
		version := "testString"
		getLoadBalancerProfilePath := "/load_balancer/profiles/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerProfilePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"name": "network-small", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-small", "family": "network"}`)
				}))
			})
			It(`Invoke GetLoadBalancerProfile successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetLoadBalancerProfile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerProfileOptions model
				getLoadBalancerProfileOptionsModel := new(vpcv1.GetLoadBalancerProfileOptions)
				getLoadBalancerProfileOptionsModel.Name = core.StringPtr("testString")
				getLoadBalancerProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetLoadBalancerProfile(getLoadBalancerProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetLoadBalancerProfile with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerProfileOptions model
				getLoadBalancerProfileOptionsModel := new(vpcv1.GetLoadBalancerProfileOptions)
				getLoadBalancerProfileOptionsModel.Name = core.StringPtr("testString")
				getLoadBalancerProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetLoadBalancerProfile(getLoadBalancerProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerProfileOptions model with no property values
				getLoadBalancerProfileOptionsModelNew := new(vpcv1.GetLoadBalancerProfileOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetLoadBalancerProfile(getLoadBalancerProfileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancers(listLoadBalancersOptions *ListLoadBalancersOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancersPath := "/load_balancers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancers with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancersOptions model
				listLoadBalancersOptionsModel := new(vpcv1.ListLoadBalancersOptions)
				listLoadBalancersOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listLoadBalancersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListLoadBalancers(listLoadBalancersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListLoadBalancers(listLoadBalancersOptions *ListLoadBalancersOptions)`, func() {
		version := "testString"
		listLoadBalancersPath := "/load_balancers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"load_balancers": [{"profile": {"name": "network-small", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-small", "family": "network"}, "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-load-balancer", "created_at": "2019-01-01T12:00:00", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "is_public": true, "listeners": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004"}], "operating_status": "offline", "pools": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}]}`)
				}))
			})
			It(`Invoke ListLoadBalancers successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListLoadBalancers(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancersOptions model
				listLoadBalancersOptionsModel := new(vpcv1.ListLoadBalancersOptions)
				listLoadBalancersOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listLoadBalancersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListLoadBalancers(listLoadBalancersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListLoadBalancers with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancersOptions model
				listLoadBalancersOptionsModel := new(vpcv1.ListLoadBalancersOptions)
				listLoadBalancersOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listLoadBalancersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListLoadBalancers(listLoadBalancersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancer(createLoadBalancerOptions *CreateLoadBalancerOptions) - Operation response error`, func() {
		version := "testString"
		createLoadBalancerPath := "/load_balancers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoadBalancer with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("https")
				loadBalancerPoolHealthMonitorPrototypeModel.UrlPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolIdentityByName model
				loadBalancerPoolIdentityByNameModel := new(vpcv1.LoadBalancerPoolIdentityByName)
				loadBalancerPoolIdentityByNameModel.Name = core.StringPtr("my-load-balancer-pool")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the LoadBalancerListenerPrototypeLoadBalancerContext model
				loadBalancerListenerPrototypeLoadBalancerContextModel := new(vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext)
				loadBalancerListenerPrototypeLoadBalancerContextModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPrototypeLoadBalancerContextModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPrototypeLoadBalancerContextModel.Protocol = core.StringPtr("http")
				loadBalancerListenerPrototypeLoadBalancerContextModel.DefaultPool = loadBalancerPoolIdentityByNameModel

				// Construct an instance of the LoadBalancerPoolPrototype model
				loadBalancerPoolPrototypeModel := new(vpcv1.LoadBalancerPoolPrototype)
				loadBalancerPoolPrototypeModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPrototypeModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPrototypeModel.Protocol = core.StringPtr("https")
				loadBalancerPoolPrototypeModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				loadBalancerPoolPrototypeModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				loadBalancerPoolPrototypeModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel

				// Construct an instance of the LoadBalancerProfileIdentityByName model
				loadBalancerProfileIdentityModel := new(vpcv1.LoadBalancerProfileIdentityByName)
				loadBalancerProfileIdentityModel.Name = core.StringPtr("network-small")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the CreateLoadBalancerOptions model
				createLoadBalancerOptionsModel := new(vpcv1.CreateLoadBalancerOptions)
				createLoadBalancerOptionsModel.IsPublic = core.BoolPtr(true)
				createLoadBalancerOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				createLoadBalancerOptionsModel.Name = core.StringPtr("my-load-balancer")
				createLoadBalancerOptionsModel.Listeners = []vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext{*loadBalancerListenerPrototypeLoadBalancerContextModel}
				createLoadBalancerOptionsModel.Pools = []vpcv1.LoadBalancerPoolPrototype{*loadBalancerPoolPrototypeModel}
				createLoadBalancerOptionsModel.Profile = loadBalancerProfileIdentityModel
				createLoadBalancerOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateLoadBalancer(createLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateLoadBalancer(createLoadBalancerOptions *CreateLoadBalancerOptions)`, func() {
		version := "testString"
		createLoadBalancerPath := "/load_balancers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"profile": {"name": "network-small", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-small", "family": "network"}, "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-load-balancer", "created_at": "2019-01-01T12:00:00", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "is_public": true, "listeners": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004"}], "operating_status": "offline", "pools": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke CreateLoadBalancer successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateLoadBalancer(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("https")
				loadBalancerPoolHealthMonitorPrototypeModel.UrlPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolIdentityByName model
				loadBalancerPoolIdentityByNameModel := new(vpcv1.LoadBalancerPoolIdentityByName)
				loadBalancerPoolIdentityByNameModel.Name = core.StringPtr("my-load-balancer-pool")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the LoadBalancerListenerPrototypeLoadBalancerContext model
				loadBalancerListenerPrototypeLoadBalancerContextModel := new(vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext)
				loadBalancerListenerPrototypeLoadBalancerContextModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPrototypeLoadBalancerContextModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPrototypeLoadBalancerContextModel.Protocol = core.StringPtr("http")
				loadBalancerListenerPrototypeLoadBalancerContextModel.DefaultPool = loadBalancerPoolIdentityByNameModel

				// Construct an instance of the LoadBalancerPoolPrototype model
				loadBalancerPoolPrototypeModel := new(vpcv1.LoadBalancerPoolPrototype)
				loadBalancerPoolPrototypeModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPrototypeModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPrototypeModel.Protocol = core.StringPtr("https")
				loadBalancerPoolPrototypeModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				loadBalancerPoolPrototypeModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				loadBalancerPoolPrototypeModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel

				// Construct an instance of the LoadBalancerProfileIdentityByName model
				loadBalancerProfileIdentityModel := new(vpcv1.LoadBalancerProfileIdentityByName)
				loadBalancerProfileIdentityModel.Name = core.StringPtr("network-small")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the CreateLoadBalancerOptions model
				createLoadBalancerOptionsModel := new(vpcv1.CreateLoadBalancerOptions)
				createLoadBalancerOptionsModel.IsPublic = core.BoolPtr(true)
				createLoadBalancerOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				createLoadBalancerOptionsModel.Name = core.StringPtr("my-load-balancer")
				createLoadBalancerOptionsModel.Listeners = []vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext{*loadBalancerListenerPrototypeLoadBalancerContextModel}
				createLoadBalancerOptionsModel.Pools = []vpcv1.LoadBalancerPoolPrototype{*loadBalancerPoolPrototypeModel}
				createLoadBalancerOptionsModel.Profile = loadBalancerProfileIdentityModel
				createLoadBalancerOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateLoadBalancer(createLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateLoadBalancer with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("https")
				loadBalancerPoolHealthMonitorPrototypeModel.UrlPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolIdentityByName model
				loadBalancerPoolIdentityByNameModel := new(vpcv1.LoadBalancerPoolIdentityByName)
				loadBalancerPoolIdentityByNameModel.Name = core.StringPtr("my-load-balancer-pool")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the LoadBalancerListenerPrototypeLoadBalancerContext model
				loadBalancerListenerPrototypeLoadBalancerContextModel := new(vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext)
				loadBalancerListenerPrototypeLoadBalancerContextModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPrototypeLoadBalancerContextModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPrototypeLoadBalancerContextModel.Protocol = core.StringPtr("http")
				loadBalancerListenerPrototypeLoadBalancerContextModel.DefaultPool = loadBalancerPoolIdentityByNameModel

				// Construct an instance of the LoadBalancerPoolPrototype model
				loadBalancerPoolPrototypeModel := new(vpcv1.LoadBalancerPoolPrototype)
				loadBalancerPoolPrototypeModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPrototypeModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPrototypeModel.Protocol = core.StringPtr("https")
				loadBalancerPoolPrototypeModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				loadBalancerPoolPrototypeModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				loadBalancerPoolPrototypeModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel

				// Construct an instance of the LoadBalancerProfileIdentityByName model
				loadBalancerProfileIdentityModel := new(vpcv1.LoadBalancerProfileIdentityByName)
				loadBalancerProfileIdentityModel.Name = core.StringPtr("network-small")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the CreateLoadBalancerOptions model
				createLoadBalancerOptionsModel := new(vpcv1.CreateLoadBalancerOptions)
				createLoadBalancerOptionsModel.IsPublic = core.BoolPtr(true)
				createLoadBalancerOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				createLoadBalancerOptionsModel.Name = core.StringPtr("my-load-balancer")
				createLoadBalancerOptionsModel.Listeners = []vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext{*loadBalancerListenerPrototypeLoadBalancerContextModel}
				createLoadBalancerOptionsModel.Pools = []vpcv1.LoadBalancerPoolPrototype{*loadBalancerPoolPrototypeModel}
				createLoadBalancerOptionsModel.Profile = loadBalancerProfileIdentityModel
				createLoadBalancerOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateLoadBalancer(createLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoadBalancerOptions model with no property values
				createLoadBalancerOptionsModelNew := new(vpcv1.CreateLoadBalancerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateLoadBalancer(createLoadBalancerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteLoadBalancer(deleteLoadBalancerOptions *DeleteLoadBalancerOptions)`, func() {
		version := "testString"
		deleteLoadBalancerPath := "/load_balancers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteLoadBalancerPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoadBalancer successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteLoadBalancer(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoadBalancerOptions model
				deleteLoadBalancerOptionsModel := new(vpcv1.DeleteLoadBalancerOptions)
				deleteLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteLoadBalancer(deleteLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoadBalancer with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteLoadBalancerOptions model
				deleteLoadBalancerOptionsModel := new(vpcv1.DeleteLoadBalancerOptions)
				deleteLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteLoadBalancer(deleteLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoadBalancerOptions model with no property values
				deleteLoadBalancerOptionsModelNew := new(vpcv1.DeleteLoadBalancerOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteLoadBalancer(deleteLoadBalancerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancer(getLoadBalancerOptions *GetLoadBalancerOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerPath := "/load_balancers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancer with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerOptions model
				getLoadBalancerOptionsModel := new(vpcv1.GetLoadBalancerOptions)
				getLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetLoadBalancer(getLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetLoadBalancer(getLoadBalancerOptions *GetLoadBalancerOptions)`, func() {
		version := "testString"
		getLoadBalancerPath := "/load_balancers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"profile": {"name": "network-small", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-small", "family": "network"}, "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-load-balancer", "created_at": "2019-01-01T12:00:00", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "is_public": true, "listeners": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004"}], "operating_status": "offline", "pools": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetLoadBalancer successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetLoadBalancer(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerOptions model
				getLoadBalancerOptionsModel := new(vpcv1.GetLoadBalancerOptions)
				getLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetLoadBalancer(getLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetLoadBalancer with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerOptions model
				getLoadBalancerOptionsModel := new(vpcv1.GetLoadBalancerOptions)
				getLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetLoadBalancer(getLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerOptions model with no property values
				getLoadBalancerOptionsModelNew := new(vpcv1.GetLoadBalancerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetLoadBalancer(getLoadBalancerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancer(updateLoadBalancerOptions *UpdateLoadBalancerOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerPath := "/load_balancers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancer with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateLoadBalancerOptions model
				updateLoadBalancerOptionsModel := new(vpcv1.UpdateLoadBalancerOptions)
				updateLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerOptionsModel.Name = core.StringPtr("my-load-balancer")
				updateLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateLoadBalancer(updateLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateLoadBalancer(updateLoadBalancerOptions *UpdateLoadBalancerOptions)`, func() {
		version := "testString"
		updateLoadBalancerPath := "/load_balancers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"profile": {"name": "network-small", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-small", "family": "network"}, "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-load-balancer", "created_at": "2019-01-01T12:00:00", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "is_public": true, "listeners": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004"}], "operating_status": "offline", "pools": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke UpdateLoadBalancer successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateLoadBalancer(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerOptions model
				updateLoadBalancerOptionsModel := new(vpcv1.UpdateLoadBalancerOptions)
				updateLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerOptionsModel.Name = core.StringPtr("my-load-balancer")
				updateLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateLoadBalancer(updateLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateLoadBalancer with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateLoadBalancerOptions model
				updateLoadBalancerOptionsModel := new(vpcv1.UpdateLoadBalancerOptions)
				updateLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerOptionsModel.Name = core.StringPtr("my-load-balancer")
				updateLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateLoadBalancer(updateLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerOptions model with no property values
				updateLoadBalancerOptionsModelNew := new(vpcv1.UpdateLoadBalancerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateLoadBalancer(updateLoadBalancerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerStatistics(getLoadBalancerStatisticsOptions *GetLoadBalancerStatisticsOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerStatisticsPath := "/load_balancers/testString/statistics"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerStatisticsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerStatistics with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerStatisticsOptions model
				getLoadBalancerStatisticsOptionsModel := new(vpcv1.GetLoadBalancerStatisticsOptions)
				getLoadBalancerStatisticsOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerStatisticsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetLoadBalancerStatistics(getLoadBalancerStatisticsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetLoadBalancerStatistics(getLoadBalancerStatisticsOptions *GetLoadBalancerStatisticsOptions)`, func() {
		version := "testString"
		getLoadBalancerStatisticsPath := "/load_balancers/testString/statistics"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerStatisticsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"active_connections": 797, "connection_rate": 91.121, "data_processed_this_month": 10093173145, "throughput": 167.278}`)
				}))
			})
			It(`Invoke GetLoadBalancerStatistics successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetLoadBalancerStatistics(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerStatisticsOptions model
				getLoadBalancerStatisticsOptionsModel := new(vpcv1.GetLoadBalancerStatisticsOptions)
				getLoadBalancerStatisticsOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerStatisticsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetLoadBalancerStatistics(getLoadBalancerStatisticsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetLoadBalancerStatistics with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerStatisticsOptions model
				getLoadBalancerStatisticsOptionsModel := new(vpcv1.GetLoadBalancerStatisticsOptions)
				getLoadBalancerStatisticsOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerStatisticsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetLoadBalancerStatistics(getLoadBalancerStatisticsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerStatisticsOptions model with no property values
				getLoadBalancerStatisticsOptionsModelNew := new(vpcv1.GetLoadBalancerStatisticsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetLoadBalancerStatistics(getLoadBalancerStatisticsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerListeners(listLoadBalancerListenersOptions *ListLoadBalancerListenersOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancerListenersPath := "/load_balancers/testString/listeners"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerListenersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancerListeners with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenersOptions model
				listLoadBalancerListenersOptionsModel := new(vpcv1.ListLoadBalancerListenersOptions)
				listLoadBalancerListenersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListLoadBalancerListeners(listLoadBalancerListenersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListLoadBalancerListeners(listLoadBalancerListenersOptions *ListLoadBalancerListenersOptions)`, func() {
		version := "testString"
		listLoadBalancerListenersPath := "/load_balancers/testString/listeners"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerListenersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"listeners": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "connection_limit": 2000, "port": 443, "protocol": "http", "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "created_at": "2019-01-01T12:00:00", "default_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "policies": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278"}], "provisioning_status": "active"}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerListeners successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListLoadBalancerListeners(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancerListenersOptions model
				listLoadBalancerListenersOptionsModel := new(vpcv1.ListLoadBalancerListenersOptions)
				listLoadBalancerListenersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListLoadBalancerListeners(listLoadBalancerListenersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListLoadBalancerListeners with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenersOptions model
				listLoadBalancerListenersOptionsModel := new(vpcv1.ListLoadBalancerListenersOptions)
				listLoadBalancerListenersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListLoadBalancerListeners(listLoadBalancerListenersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListLoadBalancerListenersOptions model with no property values
				listLoadBalancerListenersOptionsModelNew := new(vpcv1.ListLoadBalancerListenersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListLoadBalancerListeners(listLoadBalancerListenersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerListener(createLoadBalancerListenerOptions *CreateLoadBalancerListenerOptions) - Operation response error`, func() {
		version := "testString"
		createLoadBalancerListenerPath := "/load_balancers/testString/listeners"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoadBalancerListener with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPrototypeTargetModel := new(vpcv1.LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyPrototypeTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerListenerPolicyPrototype model
				loadBalancerListenerPolicyPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyPrototype)
				loadBalancerListenerPolicyPrototypeModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPrototypeModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPrototypeModel.Action = core.StringPtr("forward")
				loadBalancerListenerPolicyPrototypeModel.Rules = []vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				loadBalancerListenerPolicyPrototypeModel.Target = loadBalancerListenerPolicyPrototypeTargetModel

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the CreateLoadBalancerListenerOptions model
				createLoadBalancerListenerOptionsModel := new(vpcv1.CreateLoadBalancerListenerOptions)
				createLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerOptionsModel.Port = core.Int64Ptr(int64(443))
				createLoadBalancerListenerOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerListenerOptionsModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				createLoadBalancerListenerOptionsModel.CertificateInstance = certificateInstanceIdentityModel
				createLoadBalancerListenerOptionsModel.DefaultPool = loadBalancerPoolIdentityModel
				createLoadBalancerListenerOptionsModel.Policies = []vpcv1.LoadBalancerListenerPolicyPrototype{*loadBalancerListenerPolicyPrototypeModel}
				createLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateLoadBalancerListener(createLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateLoadBalancerListener(createLoadBalancerListenerOptions *CreateLoadBalancerListenerOptions)`, func() {
		version := "testString"
		createLoadBalancerListenerPath := "/load_balancers/testString/listeners"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "connection_limit": 2000, "port": 443, "protocol": "http", "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "created_at": "2019-01-01T12:00:00", "default_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "policies": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278"}], "provisioning_status": "active"}`)
				}))
			})
			It(`Invoke CreateLoadBalancerListener successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateLoadBalancerListener(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPrototypeTargetModel := new(vpcv1.LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyPrototypeTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerListenerPolicyPrototype model
				loadBalancerListenerPolicyPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyPrototype)
				loadBalancerListenerPolicyPrototypeModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPrototypeModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPrototypeModel.Action = core.StringPtr("forward")
				loadBalancerListenerPolicyPrototypeModel.Rules = []vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				loadBalancerListenerPolicyPrototypeModel.Target = loadBalancerListenerPolicyPrototypeTargetModel

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the CreateLoadBalancerListenerOptions model
				createLoadBalancerListenerOptionsModel := new(vpcv1.CreateLoadBalancerListenerOptions)
				createLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerOptionsModel.Port = core.Int64Ptr(int64(443))
				createLoadBalancerListenerOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerListenerOptionsModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				createLoadBalancerListenerOptionsModel.CertificateInstance = certificateInstanceIdentityModel
				createLoadBalancerListenerOptionsModel.DefaultPool = loadBalancerPoolIdentityModel
				createLoadBalancerListenerOptionsModel.Policies = []vpcv1.LoadBalancerListenerPolicyPrototype{*loadBalancerListenerPolicyPrototypeModel}
				createLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateLoadBalancerListener(createLoadBalancerListenerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateLoadBalancerListener with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPrototypeTargetModel := new(vpcv1.LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyPrototypeTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerListenerPolicyPrototype model
				loadBalancerListenerPolicyPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyPrototype)
				loadBalancerListenerPolicyPrototypeModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPrototypeModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPrototypeModel.Action = core.StringPtr("forward")
				loadBalancerListenerPolicyPrototypeModel.Rules = []vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				loadBalancerListenerPolicyPrototypeModel.Target = loadBalancerListenerPolicyPrototypeTargetModel

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the CreateLoadBalancerListenerOptions model
				createLoadBalancerListenerOptionsModel := new(vpcv1.CreateLoadBalancerListenerOptions)
				createLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerOptionsModel.Port = core.Int64Ptr(int64(443))
				createLoadBalancerListenerOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerListenerOptionsModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				createLoadBalancerListenerOptionsModel.CertificateInstance = certificateInstanceIdentityModel
				createLoadBalancerListenerOptionsModel.DefaultPool = loadBalancerPoolIdentityModel
				createLoadBalancerListenerOptionsModel.Policies = []vpcv1.LoadBalancerListenerPolicyPrototype{*loadBalancerListenerPolicyPrototypeModel}
				createLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateLoadBalancerListener(createLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoadBalancerListenerOptions model with no property values
				createLoadBalancerListenerOptionsModelNew := new(vpcv1.CreateLoadBalancerListenerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateLoadBalancerListener(createLoadBalancerListenerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteLoadBalancerListener(deleteLoadBalancerListenerOptions *DeleteLoadBalancerListenerOptions)`, func() {
		version := "testString"
		deleteLoadBalancerListenerPath := "/load_balancers/testString/listeners/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoadBalancerListener successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteLoadBalancerListener(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoadBalancerListenerOptions model
				deleteLoadBalancerListenerOptionsModel := new(vpcv1.DeleteLoadBalancerListenerOptions)
				deleteLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteLoadBalancerListener(deleteLoadBalancerListenerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoadBalancerListener with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteLoadBalancerListenerOptions model
				deleteLoadBalancerListenerOptionsModel := new(vpcv1.DeleteLoadBalancerListenerOptions)
				deleteLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteLoadBalancerListener(deleteLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoadBalancerListenerOptions model with no property values
				deleteLoadBalancerListenerOptionsModelNew := new(vpcv1.DeleteLoadBalancerListenerOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteLoadBalancerListener(deleteLoadBalancerListenerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerListener(getLoadBalancerListenerOptions *GetLoadBalancerListenerOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerListenerPath := "/load_balancers/testString/listeners/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerListener with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerOptions model
				getLoadBalancerListenerOptionsModel := new(vpcv1.GetLoadBalancerListenerOptions)
				getLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetLoadBalancerListener(getLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetLoadBalancerListener(getLoadBalancerListenerOptions *GetLoadBalancerListenerOptions)`, func() {
		version := "testString"
		getLoadBalancerListenerPath := "/load_balancers/testString/listeners/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "connection_limit": 2000, "port": 443, "protocol": "http", "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "created_at": "2019-01-01T12:00:00", "default_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "policies": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278"}], "provisioning_status": "active"}`)
				}))
			})
			It(`Invoke GetLoadBalancerListener successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetLoadBalancerListener(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerListenerOptions model
				getLoadBalancerListenerOptionsModel := new(vpcv1.GetLoadBalancerListenerOptions)
				getLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetLoadBalancerListener(getLoadBalancerListenerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetLoadBalancerListener with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerOptions model
				getLoadBalancerListenerOptionsModel := new(vpcv1.GetLoadBalancerListenerOptions)
				getLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetLoadBalancerListener(getLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerListenerOptions model with no property values
				getLoadBalancerListenerOptionsModelNew := new(vpcv1.GetLoadBalancerListenerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetLoadBalancerListener(getLoadBalancerListenerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerListener(updateLoadBalancerListenerOptions *UpdateLoadBalancerListenerOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerListenerPath := "/load_balancers/testString/listeners/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListener with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the UpdateLoadBalancerListenerOptions model
				updateLoadBalancerListenerOptionsModel := new(vpcv1.UpdateLoadBalancerListenerOptions)
				updateLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				updateLoadBalancerListenerOptionsModel.Port = core.Int64Ptr(int64(443))
				updateLoadBalancerListenerOptionsModel.Protocol = core.StringPtr("http")
				updateLoadBalancerListenerOptionsModel.CertificateInstance = certificateInstanceIdentityModel
				updateLoadBalancerListenerOptionsModel.DefaultPool = loadBalancerPoolIdentityModel
				updateLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateLoadBalancerListener(updateLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateLoadBalancerListener(updateLoadBalancerListenerOptions *UpdateLoadBalancerListenerOptions)`, func() {
		version := "testString"
		updateLoadBalancerListenerPath := "/load_balancers/testString/listeners/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "connection_limit": 2000, "port": 443, "protocol": "http", "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "created_at": "2019-01-01T12:00:00", "default_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "policies": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278"}], "provisioning_status": "active"}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListener successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateLoadBalancerListener(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the UpdateLoadBalancerListenerOptions model
				updateLoadBalancerListenerOptionsModel := new(vpcv1.UpdateLoadBalancerListenerOptions)
				updateLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				updateLoadBalancerListenerOptionsModel.Port = core.Int64Ptr(int64(443))
				updateLoadBalancerListenerOptionsModel.Protocol = core.StringPtr("http")
				updateLoadBalancerListenerOptionsModel.CertificateInstance = certificateInstanceIdentityModel
				updateLoadBalancerListenerOptionsModel.DefaultPool = loadBalancerPoolIdentityModel
				updateLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateLoadBalancerListener(updateLoadBalancerListenerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateLoadBalancerListener with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the UpdateLoadBalancerListenerOptions model
				updateLoadBalancerListenerOptionsModel := new(vpcv1.UpdateLoadBalancerListenerOptions)
				updateLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				updateLoadBalancerListenerOptionsModel.Port = core.Int64Ptr(int64(443))
				updateLoadBalancerListenerOptionsModel.Protocol = core.StringPtr("http")
				updateLoadBalancerListenerOptionsModel.CertificateInstance = certificateInstanceIdentityModel
				updateLoadBalancerListenerOptionsModel.DefaultPool = loadBalancerPoolIdentityModel
				updateLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateLoadBalancerListener(updateLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerListenerOptions model with no property values
				updateLoadBalancerListenerOptionsModelNew := new(vpcv1.UpdateLoadBalancerListenerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateLoadBalancerListener(updateLoadBalancerListenerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptions *ListLoadBalancerListenerPoliciesOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancerListenerPoliciesPath := "/load_balancers/testString/listeners/testString/policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerListenerPoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancerListenerPolicies with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPoliciesOptions model
				listLoadBalancerListenerPoliciesOptionsModel := new(vpcv1.ListLoadBalancerListenerPoliciesOptions)
				listLoadBalancerListenerPoliciesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptions *ListLoadBalancerListenerPoliciesOptions)`, func() {
		version := "testString"
		listLoadBalancerListenerPoliciesPath := "/load_balancers/testString/listeners/testString/policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerListenerPoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"policies": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "name": "my-policy", "priority": 5, "action": "forward", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "rules": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762"}], "target": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerListenerPolicies successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListLoadBalancerListenerPolicies(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPoliciesOptions model
				listLoadBalancerListenerPoliciesOptionsModel := new(vpcv1.ListLoadBalancerListenerPoliciesOptions)
				listLoadBalancerListenerPoliciesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListLoadBalancerListenerPolicies with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPoliciesOptions model
				listLoadBalancerListenerPoliciesOptionsModel := new(vpcv1.ListLoadBalancerListenerPoliciesOptions)
				listLoadBalancerListenerPoliciesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListLoadBalancerListenerPoliciesOptions model with no property values
				listLoadBalancerListenerPoliciesOptionsModelNew := new(vpcv1.ListLoadBalancerListenerPoliciesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptions *CreateLoadBalancerListenerPolicyOptions) - Operation response error`, func() {
		version := "testString"
		createLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoadBalancerListenerPolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPrototypeTargetModel := new(vpcv1.LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyPrototypeTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the CreateLoadBalancerListenerPolicyOptions model
				createLoadBalancerListenerPolicyOptionsModel := new(vpcv1.CreateLoadBalancerListenerPolicyOptions)
				createLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.Priority = core.Int64Ptr(int64(5))
				createLoadBalancerListenerPolicyOptionsModel.Action = core.StringPtr("forward")
				createLoadBalancerListenerPolicyOptionsModel.Name = core.StringPtr("my-policy")
				createLoadBalancerListenerPolicyOptionsModel.Rules = []vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				createLoadBalancerListenerPolicyOptionsModel.Target = loadBalancerListenerPolicyPrototypeTargetModel
				createLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptions *CreateLoadBalancerListenerPolicyOptions)`, func() {
		version := "testString"
		createLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "name": "my-policy", "priority": 5, "action": "forward", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "rules": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762"}], "target": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}`)
				}))
			})
			It(`Invoke CreateLoadBalancerListenerPolicy successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateLoadBalancerListenerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPrototypeTargetModel := new(vpcv1.LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyPrototypeTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the CreateLoadBalancerListenerPolicyOptions model
				createLoadBalancerListenerPolicyOptionsModel := new(vpcv1.CreateLoadBalancerListenerPolicyOptions)
				createLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.Priority = core.Int64Ptr(int64(5))
				createLoadBalancerListenerPolicyOptionsModel.Action = core.StringPtr("forward")
				createLoadBalancerListenerPolicyOptionsModel.Name = core.StringPtr("my-policy")
				createLoadBalancerListenerPolicyOptionsModel.Rules = []vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				createLoadBalancerListenerPolicyOptionsModel.Target = loadBalancerListenerPolicyPrototypeTargetModel
				createLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateLoadBalancerListenerPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPrototypeTargetModel := new(vpcv1.LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyPrototypeTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the CreateLoadBalancerListenerPolicyOptions model
				createLoadBalancerListenerPolicyOptionsModel := new(vpcv1.CreateLoadBalancerListenerPolicyOptions)
				createLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.Priority = core.Int64Ptr(int64(5))
				createLoadBalancerListenerPolicyOptionsModel.Action = core.StringPtr("forward")
				createLoadBalancerListenerPolicyOptionsModel.Name = core.StringPtr("my-policy")
				createLoadBalancerListenerPolicyOptionsModel.Rules = []vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				createLoadBalancerListenerPolicyOptionsModel.Target = loadBalancerListenerPolicyPrototypeTargetModel
				createLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoadBalancerListenerPolicyOptions model with no property values
				createLoadBalancerListenerPolicyOptionsModelNew := new(vpcv1.CreateLoadBalancerListenerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteLoadBalancerListenerPolicy(deleteLoadBalancerListenerPolicyOptions *DeleteLoadBalancerListenerPolicyOptions)`, func() {
		version := "testString"
		deleteLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoadBalancerListenerPolicy successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteLoadBalancerListenerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoadBalancerListenerPolicyOptions model
				deleteLoadBalancerListenerPolicyOptionsModel := new(vpcv1.DeleteLoadBalancerListenerPolicyOptions)
				deleteLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteLoadBalancerListenerPolicy(deleteLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoadBalancerListenerPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteLoadBalancerListenerPolicyOptions model
				deleteLoadBalancerListenerPolicyOptionsModel := new(vpcv1.DeleteLoadBalancerListenerPolicyOptions)
				deleteLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteLoadBalancerListenerPolicy(deleteLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoadBalancerListenerPolicyOptions model with no property values
				deleteLoadBalancerListenerPolicyOptionsModelNew := new(vpcv1.DeleteLoadBalancerListenerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteLoadBalancerListenerPolicy(deleteLoadBalancerListenerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptions *GetLoadBalancerListenerPolicyOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerListenerPolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyOptions model
				getLoadBalancerListenerPolicyOptionsModel := new(vpcv1.GetLoadBalancerListenerPolicyOptions)
				getLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptions *GetLoadBalancerListenerPolicyOptions)`, func() {
		version := "testString"
		getLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "name": "my-policy", "priority": 5, "action": "forward", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "rules": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762"}], "target": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}`)
				}))
			})
			It(`Invoke GetLoadBalancerListenerPolicy successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetLoadBalancerListenerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyOptions model
				getLoadBalancerListenerPolicyOptionsModel := new(vpcv1.GetLoadBalancerListenerPolicyOptions)
				getLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetLoadBalancerListenerPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyOptions model
				getLoadBalancerListenerPolicyOptionsModel := new(vpcv1.GetLoadBalancerListenerPolicyOptions)
				getLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerListenerPolicyOptions model with no property values
				getLoadBalancerListenerPolicyOptionsModelNew := new(vpcv1.GetLoadBalancerListenerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptions *UpdateLoadBalancerListenerPolicyOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListenerPolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPatchTargetModel := new(vpcv1.LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyPatchTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the UpdateLoadBalancerListenerPolicyOptions model
				updateLoadBalancerListenerPolicyOptionsModel := new(vpcv1.UpdateLoadBalancerListenerPolicyOptions)
				updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.Name = core.StringPtr("my-policy")
				updateLoadBalancerListenerPolicyOptionsModel.Priority = core.Int64Ptr(int64(5))
				updateLoadBalancerListenerPolicyOptionsModel.Target = loadBalancerListenerPolicyPatchTargetModel
				updateLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptions *UpdateLoadBalancerListenerPolicyOptions)`, func() {
		version := "testString"
		updateLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "name": "my-policy", "priority": 5, "action": "forward", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "rules": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762"}], "target": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListenerPolicy successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateLoadBalancerListenerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPatchTargetModel := new(vpcv1.LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyPatchTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the UpdateLoadBalancerListenerPolicyOptions model
				updateLoadBalancerListenerPolicyOptionsModel := new(vpcv1.UpdateLoadBalancerListenerPolicyOptions)
				updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.Name = core.StringPtr("my-policy")
				updateLoadBalancerListenerPolicyOptionsModel.Priority = core.Int64Ptr(int64(5))
				updateLoadBalancerListenerPolicyOptionsModel.Target = loadBalancerListenerPolicyPatchTargetModel
				updateLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateLoadBalancerListenerPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPatchTargetModel := new(vpcv1.LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyPatchTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the UpdateLoadBalancerListenerPolicyOptions model
				updateLoadBalancerListenerPolicyOptionsModel := new(vpcv1.UpdateLoadBalancerListenerPolicyOptions)
				updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.Name = core.StringPtr("my-policy")
				updateLoadBalancerListenerPolicyOptionsModel.Priority = core.Int64Ptr(int64(5))
				updateLoadBalancerListenerPolicyOptionsModel.Target = loadBalancerListenerPolicyPatchTargetModel
				updateLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerListenerPolicyOptions model with no property values
				updateLoadBalancerListenerPolicyOptionsModelNew := new(vpcv1.UpdateLoadBalancerListenerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptions *ListLoadBalancerListenerPolicyRulesOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancerListenerPolicyRulesPath := "/load_balancers/testString/listeners/testString/policies/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerListenerPolicyRulesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancerListenerPolicyRules with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPolicyRulesOptions model
				listLoadBalancerListenerPolicyRulesOptionsModel := new(vpcv1.ListLoadBalancerListenerPolicyRulesOptions)
				listLoadBalancerListenerPolicyRulesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.PolicyID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptions *ListLoadBalancerListenerPolicyRulesOptions)`, func() {
		version := "testString"
		listLoadBalancerListenerPolicyRulesPath := "/load_balancers/testString/listeners/testString/policies/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerListenerPolicyRulesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"rules": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "condition": "contains", "field": "MY-APP-HEADER", "type": "header", "value": "Value", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active"}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerListenerPolicyRules successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListLoadBalancerListenerPolicyRules(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPolicyRulesOptions model
				listLoadBalancerListenerPolicyRulesOptionsModel := new(vpcv1.ListLoadBalancerListenerPolicyRulesOptions)
				listLoadBalancerListenerPolicyRulesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.PolicyID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListLoadBalancerListenerPolicyRules with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPolicyRulesOptions model
				listLoadBalancerListenerPolicyRulesOptionsModel := new(vpcv1.ListLoadBalancerListenerPolicyRulesOptions)
				listLoadBalancerListenerPolicyRulesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.PolicyID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListLoadBalancerListenerPolicyRulesOptions model with no property values
				listLoadBalancerListenerPolicyRulesOptionsModelNew := new(vpcv1.ListLoadBalancerListenerPolicyRulesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptions *CreateLoadBalancerListenerPolicyRuleOptions) - Operation response error`, func() {
		version := "testString"
		createLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoadBalancerListenerPolicyRule with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CreateLoadBalancerListenerPolicyRuleOptions model
				createLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.CreateLoadBalancerListenerPolicyRuleOptions)
				createLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Condition = core.StringPtr("contains")
				createLoadBalancerListenerPolicyRuleOptionsModel.Type = core.StringPtr("header")
				createLoadBalancerListenerPolicyRuleOptionsModel.Value = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Field = core.StringPtr("MY-APP-HEADER")
				createLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptions *CreateLoadBalancerListenerPolicyRuleOptions)`, func() {
		version := "testString"
		createLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "condition": "contains", "field": "MY-APP-HEADER", "type": "header", "value": "Value", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active"}`)
				}))
			})
			It(`Invoke CreateLoadBalancerListenerPolicyRule successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateLoadBalancerListenerPolicyRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateLoadBalancerListenerPolicyRuleOptions model
				createLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.CreateLoadBalancerListenerPolicyRuleOptions)
				createLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Condition = core.StringPtr("contains")
				createLoadBalancerListenerPolicyRuleOptionsModel.Type = core.StringPtr("header")
				createLoadBalancerListenerPolicyRuleOptionsModel.Value = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Field = core.StringPtr("MY-APP-HEADER")
				createLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateLoadBalancerListenerPolicyRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CreateLoadBalancerListenerPolicyRuleOptions model
				createLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.CreateLoadBalancerListenerPolicyRuleOptions)
				createLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Condition = core.StringPtr("contains")
				createLoadBalancerListenerPolicyRuleOptionsModel.Type = core.StringPtr("header")
				createLoadBalancerListenerPolicyRuleOptionsModel.Value = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Field = core.StringPtr("MY-APP-HEADER")
				createLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoadBalancerListenerPolicyRuleOptions model with no property values
				createLoadBalancerListenerPolicyRuleOptionsModelNew := new(vpcv1.CreateLoadBalancerListenerPolicyRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteLoadBalancerListenerPolicyRule(deleteLoadBalancerListenerPolicyRuleOptions *DeleteLoadBalancerListenerPolicyRuleOptions)`, func() {
		version := "testString"
		deleteLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoadBalancerListenerPolicyRule successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteLoadBalancerListenerPolicyRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoadBalancerListenerPolicyRuleOptions model
				deleteLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.DeleteLoadBalancerListenerPolicyRuleOptions)
				deleteLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteLoadBalancerListenerPolicyRule(deleteLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoadBalancerListenerPolicyRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteLoadBalancerListenerPolicyRuleOptions model
				deleteLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.DeleteLoadBalancerListenerPolicyRuleOptions)
				deleteLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteLoadBalancerListenerPolicyRule(deleteLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoadBalancerListenerPolicyRuleOptions model with no property values
				deleteLoadBalancerListenerPolicyRuleOptionsModelNew := new(vpcv1.DeleteLoadBalancerListenerPolicyRuleOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteLoadBalancerListenerPolicyRule(deleteLoadBalancerListenerPolicyRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptions *GetLoadBalancerListenerPolicyRuleOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerListenerPolicyRule with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyRuleOptions model
				getLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.GetLoadBalancerListenerPolicyRuleOptions)
				getLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptions *GetLoadBalancerListenerPolicyRuleOptions)`, func() {
		version := "testString"
		getLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "condition": "contains", "field": "MY-APP-HEADER", "type": "header", "value": "Value", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active"}`)
				}))
			})
			It(`Invoke GetLoadBalancerListenerPolicyRule successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetLoadBalancerListenerPolicyRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyRuleOptions model
				getLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.GetLoadBalancerListenerPolicyRuleOptions)
				getLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetLoadBalancerListenerPolicyRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyRuleOptions model
				getLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.GetLoadBalancerListenerPolicyRuleOptions)
				getLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerListenerPolicyRuleOptions model with no property values
				getLoadBalancerListenerPolicyRuleOptionsModelNew := new(vpcv1.GetLoadBalancerListenerPolicyRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptions *UpdateLoadBalancerListenerPolicyRuleOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListenerPolicyRule with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerPolicyRuleOptions model
				updateLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.UpdateLoadBalancerListenerPolicyRuleOptions)
				updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Condition = core.StringPtr("contains")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Field = core.StringPtr("MY-APP-HEADER")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Type = core.StringPtr("header")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Value = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptions *UpdateLoadBalancerListenerPolicyRuleOptions)`, func() {
		version := "testString"
		updateLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "condition": "contains", "field": "MY-APP-HEADER", "type": "header", "value": "Value", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active"}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListenerPolicyRule successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateLoadBalancerListenerPolicyRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerPolicyRuleOptions model
				updateLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.UpdateLoadBalancerListenerPolicyRuleOptions)
				updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Condition = core.StringPtr("contains")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Field = core.StringPtr("MY-APP-HEADER")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Type = core.StringPtr("header")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Value = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateLoadBalancerListenerPolicyRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerPolicyRuleOptions model
				updateLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.UpdateLoadBalancerListenerPolicyRuleOptions)
				updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Condition = core.StringPtr("contains")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Field = core.StringPtr("MY-APP-HEADER")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Type = core.StringPtr("header")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Value = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerListenerPolicyRuleOptions model with no property values
				updateLoadBalancerListenerPolicyRuleOptionsModelNew := new(vpcv1.UpdateLoadBalancerListenerPolicyRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerPools(listLoadBalancerPoolsOptions *ListLoadBalancerPoolsOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancerPoolsPath := "/load_balancers/testString/pools"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerPoolsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancerPools with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerPoolsOptions model
				listLoadBalancerPoolsOptionsModel := new(vpcv1.ListLoadBalancerPoolsOptions)
				listLoadBalancerPoolsOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListLoadBalancerPools(listLoadBalancerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListLoadBalancerPools(listLoadBalancerPoolsOptions *ListLoadBalancerPoolsOptions)`, func() {
		version := "testString"
		listLoadBalancerPoolsPath := "/load_balancers/testString/pools"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerPoolsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"pools": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool", "algorithm": "least_connections", "protocol": "https", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "https", "url_path": "/"}, "instance_group": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004"}], "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerPools successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListLoadBalancerPools(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancerPoolsOptions model
				listLoadBalancerPoolsOptionsModel := new(vpcv1.ListLoadBalancerPoolsOptions)
				listLoadBalancerPoolsOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListLoadBalancerPools(listLoadBalancerPoolsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListLoadBalancerPools with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerPoolsOptions model
				listLoadBalancerPoolsOptionsModel := new(vpcv1.ListLoadBalancerPoolsOptions)
				listLoadBalancerPoolsOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListLoadBalancerPools(listLoadBalancerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListLoadBalancerPoolsOptions model with no property values
				listLoadBalancerPoolsOptionsModelNew := new(vpcv1.ListLoadBalancerPoolsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListLoadBalancerPools(listLoadBalancerPoolsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerPool(createLoadBalancerPoolOptions *CreateLoadBalancerPoolOptions) - Operation response error`, func() {
		version := "testString"
		createLoadBalancerPoolPath := "/load_balancers/testString/pools"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoadBalancerPool with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("https")
				loadBalancerPoolHealthMonitorPrototypeModel.UrlPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the CreateLoadBalancerPoolOptions model
				createLoadBalancerPoolOptionsModel := new(vpcv1.CreateLoadBalancerPoolOptions)
				createLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolOptionsModel.Algorithm = core.StringPtr("least_connections")
				createLoadBalancerPoolOptionsModel.Protocol = core.StringPtr("https")
				createLoadBalancerPoolOptionsModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				createLoadBalancerPoolOptionsModel.Name = core.StringPtr("my-load-balancer-pool")
				createLoadBalancerPoolOptionsModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				createLoadBalancerPoolOptionsModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel
				createLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateLoadBalancerPool(createLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateLoadBalancerPool(createLoadBalancerPoolOptions *CreateLoadBalancerPoolOptions)`, func() {
		version := "testString"
		createLoadBalancerPoolPath := "/load_balancers/testString/pools"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool", "algorithm": "least_connections", "protocol": "https", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "https", "url_path": "/"}, "instance_group": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004"}], "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}`)
				}))
			})
			It(`Invoke CreateLoadBalancerPool successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateLoadBalancerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("https")
				loadBalancerPoolHealthMonitorPrototypeModel.UrlPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the CreateLoadBalancerPoolOptions model
				createLoadBalancerPoolOptionsModel := new(vpcv1.CreateLoadBalancerPoolOptions)
				createLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolOptionsModel.Algorithm = core.StringPtr("least_connections")
				createLoadBalancerPoolOptionsModel.Protocol = core.StringPtr("https")
				createLoadBalancerPoolOptionsModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				createLoadBalancerPoolOptionsModel.Name = core.StringPtr("my-load-balancer-pool")
				createLoadBalancerPoolOptionsModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				createLoadBalancerPoolOptionsModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel
				createLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateLoadBalancerPool(createLoadBalancerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateLoadBalancerPool with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("https")
				loadBalancerPoolHealthMonitorPrototypeModel.UrlPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the CreateLoadBalancerPoolOptions model
				createLoadBalancerPoolOptionsModel := new(vpcv1.CreateLoadBalancerPoolOptions)
				createLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolOptionsModel.Algorithm = core.StringPtr("least_connections")
				createLoadBalancerPoolOptionsModel.Protocol = core.StringPtr("https")
				createLoadBalancerPoolOptionsModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				createLoadBalancerPoolOptionsModel.Name = core.StringPtr("my-load-balancer-pool")
				createLoadBalancerPoolOptionsModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				createLoadBalancerPoolOptionsModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel
				createLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateLoadBalancerPool(createLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoadBalancerPoolOptions model with no property values
				createLoadBalancerPoolOptionsModelNew := new(vpcv1.CreateLoadBalancerPoolOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateLoadBalancerPool(createLoadBalancerPoolOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteLoadBalancerPool(deleteLoadBalancerPoolOptions *DeleteLoadBalancerPoolOptions)`, func() {
		version := "testString"
		deleteLoadBalancerPoolPath := "/load_balancers/testString/pools/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoadBalancerPool successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteLoadBalancerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoadBalancerPoolOptions model
				deleteLoadBalancerPoolOptionsModel := new(vpcv1.DeleteLoadBalancerPoolOptions)
				deleteLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteLoadBalancerPool(deleteLoadBalancerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoadBalancerPool with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteLoadBalancerPoolOptions model
				deleteLoadBalancerPoolOptionsModel := new(vpcv1.DeleteLoadBalancerPoolOptions)
				deleteLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteLoadBalancerPool(deleteLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoadBalancerPoolOptions model with no property values
				deleteLoadBalancerPoolOptionsModelNew := new(vpcv1.DeleteLoadBalancerPoolOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteLoadBalancerPool(deleteLoadBalancerPoolOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerPool(getLoadBalancerPoolOptions *GetLoadBalancerPoolOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerPoolPath := "/load_balancers/testString/pools/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerPool with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerPoolOptions model
				getLoadBalancerPoolOptionsModel := new(vpcv1.GetLoadBalancerPoolOptions)
				getLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetLoadBalancerPool(getLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetLoadBalancerPool(getLoadBalancerPoolOptions *GetLoadBalancerPoolOptions)`, func() {
		version := "testString"
		getLoadBalancerPoolPath := "/load_balancers/testString/pools/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool", "algorithm": "least_connections", "protocol": "https", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "https", "url_path": "/"}, "instance_group": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004"}], "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}`)
				}))
			})
			It(`Invoke GetLoadBalancerPool successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetLoadBalancerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerPoolOptions model
				getLoadBalancerPoolOptionsModel := new(vpcv1.GetLoadBalancerPoolOptions)
				getLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetLoadBalancerPool(getLoadBalancerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetLoadBalancerPool with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerPoolOptions model
				getLoadBalancerPoolOptionsModel := new(vpcv1.GetLoadBalancerPoolOptions)
				getLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetLoadBalancerPool(getLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerPoolOptions model with no property values
				getLoadBalancerPoolOptionsModelNew := new(vpcv1.GetLoadBalancerPoolOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetLoadBalancerPool(getLoadBalancerPoolOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerPool(updateLoadBalancerPoolOptions *UpdateLoadBalancerPoolOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerPoolPath := "/load_balancers/testString/pools/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancerPool with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolHealthMonitorPatch model
				loadBalancerPoolHealthMonitorPatchModel := new(vpcv1.LoadBalancerPoolHealthMonitorPatch)
				loadBalancerPoolHealthMonitorPatchModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPatchModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPatchModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Type = core.StringPtr("https")
				loadBalancerPoolHealthMonitorPatchModel.UrlPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolSessionPersistencePatch model
				loadBalancerPoolSessionPersistencePatchModel := new(vpcv1.LoadBalancerPoolSessionPersistencePatch)
				loadBalancerPoolSessionPersistencePatchModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the UpdateLoadBalancerPoolOptions model
				updateLoadBalancerPoolOptionsModel := new(vpcv1.UpdateLoadBalancerPoolOptions)
				updateLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.Algorithm = core.StringPtr("least_connections")
				updateLoadBalancerPoolOptionsModel.Name = core.StringPtr("my-load-balancer-pool")
				updateLoadBalancerPoolOptionsModel.Protocol = core.StringPtr("https")
				updateLoadBalancerPoolOptionsModel.HealthMonitor = loadBalancerPoolHealthMonitorPatchModel
				updateLoadBalancerPoolOptionsModel.SessionPersistence = loadBalancerPoolSessionPersistencePatchModel
				updateLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateLoadBalancerPool(updateLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateLoadBalancerPool(updateLoadBalancerPoolOptions *UpdateLoadBalancerPoolOptions)`, func() {
		version := "testString"
		updateLoadBalancerPoolPath := "/load_balancers/testString/pools/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool", "algorithm": "least_connections", "protocol": "https", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "https", "url_path": "/"}, "instance_group": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004"}], "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerPool successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateLoadBalancerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerPoolHealthMonitorPatch model
				loadBalancerPoolHealthMonitorPatchModel := new(vpcv1.LoadBalancerPoolHealthMonitorPatch)
				loadBalancerPoolHealthMonitorPatchModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPatchModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPatchModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Type = core.StringPtr("https")
				loadBalancerPoolHealthMonitorPatchModel.UrlPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolSessionPersistencePatch model
				loadBalancerPoolSessionPersistencePatchModel := new(vpcv1.LoadBalancerPoolSessionPersistencePatch)
				loadBalancerPoolSessionPersistencePatchModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the UpdateLoadBalancerPoolOptions model
				updateLoadBalancerPoolOptionsModel := new(vpcv1.UpdateLoadBalancerPoolOptions)
				updateLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.Algorithm = core.StringPtr("least_connections")
				updateLoadBalancerPoolOptionsModel.Name = core.StringPtr("my-load-balancer-pool")
				updateLoadBalancerPoolOptionsModel.Protocol = core.StringPtr("https")
				updateLoadBalancerPoolOptionsModel.HealthMonitor = loadBalancerPoolHealthMonitorPatchModel
				updateLoadBalancerPoolOptionsModel.SessionPersistence = loadBalancerPoolSessionPersistencePatchModel
				updateLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateLoadBalancerPool(updateLoadBalancerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateLoadBalancerPool with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolHealthMonitorPatch model
				loadBalancerPoolHealthMonitorPatchModel := new(vpcv1.LoadBalancerPoolHealthMonitorPatch)
				loadBalancerPoolHealthMonitorPatchModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPatchModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPatchModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Type = core.StringPtr("https")
				loadBalancerPoolHealthMonitorPatchModel.UrlPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolSessionPersistencePatch model
				loadBalancerPoolSessionPersistencePatchModel := new(vpcv1.LoadBalancerPoolSessionPersistencePatch)
				loadBalancerPoolSessionPersistencePatchModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the UpdateLoadBalancerPoolOptions model
				updateLoadBalancerPoolOptionsModel := new(vpcv1.UpdateLoadBalancerPoolOptions)
				updateLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.Algorithm = core.StringPtr("least_connections")
				updateLoadBalancerPoolOptionsModel.Name = core.StringPtr("my-load-balancer-pool")
				updateLoadBalancerPoolOptionsModel.Protocol = core.StringPtr("https")
				updateLoadBalancerPoolOptionsModel.HealthMonitor = loadBalancerPoolHealthMonitorPatchModel
				updateLoadBalancerPoolOptionsModel.SessionPersistence = loadBalancerPoolSessionPersistencePatchModel
				updateLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateLoadBalancerPool(updateLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerPoolOptions model with no property values
				updateLoadBalancerPoolOptionsModelNew := new(vpcv1.UpdateLoadBalancerPoolOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateLoadBalancerPool(updateLoadBalancerPoolOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptions *ListLoadBalancerPoolMembersOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancerPoolMembersPath := "/load_balancers/testString/pools/testString/members"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerPoolMembersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancerPoolMembers with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerPoolMembersOptions model
				listLoadBalancerPoolMembersOptionsModel := new(vpcv1.ListLoadBalancerPoolMembersOptions)
				listLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptions *ListLoadBalancerPoolMembersOptions)`, func() {
		version := "testString"
		listLoadBalancerPoolMembersPath := "/load_balancers/testString/pools/testString/members"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerPoolMembersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"members": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "weight": 50, "health": "faulted", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerPoolMembers successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListLoadBalancerPoolMembers(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancerPoolMembersOptions model
				listLoadBalancerPoolMembersOptionsModel := new(vpcv1.ListLoadBalancerPoolMembersOptions)
				listLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListLoadBalancerPoolMembers with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerPoolMembersOptions model
				listLoadBalancerPoolMembersOptionsModel := new(vpcv1.ListLoadBalancerPoolMembersOptions)
				listLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListLoadBalancerPoolMembersOptions model with no property values
				listLoadBalancerPoolMembersOptionsModelNew := new(vpcv1.ListLoadBalancerPoolMembersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptions *CreateLoadBalancerPoolMemberOptions) - Operation response error`, func() {
		version := "testString"
		createLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoadBalancerPoolMember with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the CreateLoadBalancerPoolMemberOptions model
				createLoadBalancerPoolMemberOptionsModel := new(vpcv1.CreateLoadBalancerPoolMemberOptions)
				createLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.Port = core.Int64Ptr(int64(80))
				createLoadBalancerPoolMemberOptionsModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				createLoadBalancerPoolMemberOptionsModel.Weight = core.Int64Ptr(int64(50))
				createLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptions *CreateLoadBalancerPoolMemberOptions)`, func() {
		version := "testString"
		createLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "weight": 50, "health": "faulted", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}}`)
				}))
			})
			It(`Invoke CreateLoadBalancerPoolMember successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateLoadBalancerPoolMember(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the CreateLoadBalancerPoolMemberOptions model
				createLoadBalancerPoolMemberOptionsModel := new(vpcv1.CreateLoadBalancerPoolMemberOptions)
				createLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.Port = core.Int64Ptr(int64(80))
				createLoadBalancerPoolMemberOptionsModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				createLoadBalancerPoolMemberOptionsModel.Weight = core.Int64Ptr(int64(50))
				createLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateLoadBalancerPoolMember with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the CreateLoadBalancerPoolMemberOptions model
				createLoadBalancerPoolMemberOptionsModel := new(vpcv1.CreateLoadBalancerPoolMemberOptions)
				createLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.Port = core.Int64Ptr(int64(80))
				createLoadBalancerPoolMemberOptionsModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				createLoadBalancerPoolMemberOptionsModel.Weight = core.Int64Ptr(int64(50))
				createLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoadBalancerPoolMemberOptions model with no property values
				createLoadBalancerPoolMemberOptionsModelNew := new(vpcv1.CreateLoadBalancerPoolMemberOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerPoolMembers(updateLoadBalancerPoolMembersOptions *UpdateLoadBalancerPoolMembersOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerPoolMembersPath := "/load_balancers/testString/pools/testString/members"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerPoolMembersPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(202)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancerPoolMembers with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel

				// Construct an instance of the UpdateLoadBalancerPoolMembersOptions model
				updateLoadBalancerPoolMembersOptionsModel := new(vpcv1.UpdateLoadBalancerPoolMembersOptions)
				updateLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				updateLoadBalancerPoolMembersOptionsModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				updateLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateLoadBalancerPoolMembers(updateLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateLoadBalancerPoolMembers(updateLoadBalancerPoolMembersOptions *UpdateLoadBalancerPoolMembersOptions)`, func() {
		version := "testString"
		updateLoadBalancerPoolMembersPath := "/load_balancers/testString/pools/testString/members"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerPoolMembersPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, `{"members": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "weight": 50, "health": "faulted", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}}]}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerPoolMembers successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateLoadBalancerPoolMembers(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel

				// Construct an instance of the UpdateLoadBalancerPoolMembersOptions model
				updateLoadBalancerPoolMembersOptionsModel := new(vpcv1.UpdateLoadBalancerPoolMembersOptions)
				updateLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				updateLoadBalancerPoolMembersOptionsModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				updateLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateLoadBalancerPoolMembers(updateLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateLoadBalancerPoolMembers with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel

				// Construct an instance of the UpdateLoadBalancerPoolMembersOptions model
				updateLoadBalancerPoolMembersOptionsModel := new(vpcv1.UpdateLoadBalancerPoolMembersOptions)
				updateLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				updateLoadBalancerPoolMembersOptionsModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				updateLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateLoadBalancerPoolMembers(updateLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerPoolMembersOptions model with no property values
				updateLoadBalancerPoolMembersOptionsModelNew := new(vpcv1.UpdateLoadBalancerPoolMembersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateLoadBalancerPoolMembers(updateLoadBalancerPoolMembersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteLoadBalancerPoolMember(deleteLoadBalancerPoolMemberOptions *DeleteLoadBalancerPoolMemberOptions)`, func() {
		version := "testString"
		deleteLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoadBalancerPoolMember successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteLoadBalancerPoolMember(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoadBalancerPoolMemberOptions model
				deleteLoadBalancerPoolMemberOptionsModel := new(vpcv1.DeleteLoadBalancerPoolMemberOptions)
				deleteLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				deleteLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteLoadBalancerPoolMember(deleteLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoadBalancerPoolMember with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteLoadBalancerPoolMemberOptions model
				deleteLoadBalancerPoolMemberOptionsModel := new(vpcv1.DeleteLoadBalancerPoolMemberOptions)
				deleteLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				deleteLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteLoadBalancerPoolMember(deleteLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoadBalancerPoolMemberOptions model with no property values
				deleteLoadBalancerPoolMemberOptionsModelNew := new(vpcv1.DeleteLoadBalancerPoolMemberOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteLoadBalancerPoolMember(deleteLoadBalancerPoolMemberOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptions *GetLoadBalancerPoolMemberOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerPoolMember with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerPoolMemberOptions model
				getLoadBalancerPoolMemberOptionsModel := new(vpcv1.GetLoadBalancerPoolMemberOptions)
				getLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptions *GetLoadBalancerPoolMemberOptions)`, func() {
		version := "testString"
		getLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "weight": 50, "health": "faulted", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}}`)
				}))
			})
			It(`Invoke GetLoadBalancerPoolMember successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetLoadBalancerPoolMember(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerPoolMemberOptions model
				getLoadBalancerPoolMemberOptionsModel := new(vpcv1.GetLoadBalancerPoolMemberOptions)
				getLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetLoadBalancerPoolMember with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerPoolMemberOptions model
				getLoadBalancerPoolMemberOptionsModel := new(vpcv1.GetLoadBalancerPoolMemberOptions)
				getLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerPoolMemberOptions model with no property values
				getLoadBalancerPoolMemberOptionsModelNew := new(vpcv1.GetLoadBalancerPoolMemberOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptions *UpdateLoadBalancerPoolMemberOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancerPoolMember with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the UpdateLoadBalancerPoolMemberOptions model
				updateLoadBalancerPoolMemberOptionsModel := new(vpcv1.UpdateLoadBalancerPoolMemberOptions)
				updateLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.Port = core.Int64Ptr(int64(80))
				updateLoadBalancerPoolMemberOptionsModel.Weight = core.Int64Ptr(int64(50))
				updateLoadBalancerPoolMemberOptionsModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				updateLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptions *UpdateLoadBalancerPoolMemberOptions)`, func() {
		version := "testString"
		updateLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "weight": 50, "health": "faulted", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerPoolMember successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateLoadBalancerPoolMember(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the UpdateLoadBalancerPoolMemberOptions model
				updateLoadBalancerPoolMemberOptionsModel := new(vpcv1.UpdateLoadBalancerPoolMemberOptions)
				updateLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.Port = core.Int64Ptr(int64(80))
				updateLoadBalancerPoolMemberOptionsModel.Weight = core.Int64Ptr(int64(50))
				updateLoadBalancerPoolMemberOptionsModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				updateLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateLoadBalancerPoolMember with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the UpdateLoadBalancerPoolMemberOptions model
				updateLoadBalancerPoolMemberOptionsModel := new(vpcv1.UpdateLoadBalancerPoolMemberOptions)
				updateLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.Port = core.Int64Ptr(int64(80))
				updateLoadBalancerPoolMemberOptionsModel.Weight = core.Int64Ptr(int64(50))
				updateLoadBalancerPoolMemberOptionsModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				updateLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerPoolMemberOptions model with no property values
				updateLoadBalancerPoolMemberOptionsModelNew := new(vpcv1.UpdateLoadBalancerPoolMemberOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "https://vpcv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListNetworkAcls(listNetworkAclsOptions *ListNetworkAclsOptions) - Operation response error`, func() {
		version := "testString"
		listNetworkAclsPath := "/network_acls"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listNetworkAclsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListNetworkAcls with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListNetworkAclsOptions model
				listNetworkAclsOptionsModel := new(vpcv1.ListNetworkAclsOptions)
				listNetworkAclsOptionsModel.Start = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listNetworkAclsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListNetworkAcls(listNetworkAclsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListNetworkAcls(listNetworkAclsOptions *ListNetworkAclsOptions)`, func() {
		version := "testString"
		listNetworkAclsPath := "/network_acls"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listNetworkAclsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "network_acls": [{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}]}`)
				}))
			})
			It(`Invoke ListNetworkAcls successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListNetworkAcls(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListNetworkAclsOptions model
				listNetworkAclsOptionsModel := new(vpcv1.ListNetworkAclsOptions)
				listNetworkAclsOptionsModel.Start = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listNetworkAclsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListNetworkAcls(listNetworkAclsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListNetworkAcls with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListNetworkAclsOptions model
				listNetworkAclsOptionsModel := new(vpcv1.ListNetworkAclsOptions)
				listNetworkAclsOptionsModel.Start = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listNetworkAclsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListNetworkAcls(listNetworkAclsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateNetworkAcl(createNetworkAclOptions *CreateNetworkAclOptions) - Operation response error`, func() {
		version := "testString"
		createNetworkAclPath := "/network_acls"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createNetworkAclPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateNetworkAcl with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLRuleReference model
				networkAclRuleReferenceModel := new(vpcv1.NetworkACLRuleReference)
				networkAclRuleReferenceModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRuleReferenceModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRuleReferenceModel.Name = core.StringPtr("my-rule-1")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll model
				networkAclRulePrototypeNetworkAclContextModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll)
				networkAclRulePrototypeNetworkAclContextModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRulePrototypeNetworkAclContextModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRulePrototypeNetworkAclContextModel.Name = core.StringPtr("my-rule-2")
				networkAclRulePrototypeNetworkAclContextModel.Action = core.StringPtr("allow")
				networkAclRulePrototypeNetworkAclContextModel.Destination = core.StringPtr("192.168.3.0/24")
				networkAclRulePrototypeNetworkAclContextModel.Direction = core.StringPtr("inbound")
				networkAclRulePrototypeNetworkAclContextModel.Source = core.StringPtr("192.168.3.0/24")
				networkAclRulePrototypeNetworkAclContextModel.Protocol = core.StringPtr("all")
				networkAclRulePrototypeNetworkAclContextModel.Before = networkAclRuleReferenceModel
				networkAclRulePrototypeNetworkAclContextModel.CreatedAt = CreateMockDateTime()
				networkAclRulePrototypeNetworkAclContextModel.IpVersion = core.StringPtr("ipv4")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the NetworkACLPrototypeNetworkACLByRules model
				networkAclPrototypeModel := new(vpcv1.NetworkACLPrototypeNetworkACLByRules)
				networkAclPrototypeModel.Name = core.StringPtr("my-network-acl")
				networkAclPrototypeModel.Vpc = vpcIdentityModel
				networkAclPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				networkAclPrototypeModel.Rules = []vpcv1.NetworkACLRulePrototypeNetworkACLContextIntf{networkAclRulePrototypeNetworkAclContextModel}

				// Construct an instance of the CreateNetworkAclOptions model
				createNetworkAclOptionsModel := new(vpcv1.CreateNetworkAclOptions)
				createNetworkAclOptionsModel.NetworkACLPrototype = networkAclPrototypeModel
				createNetworkAclOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateNetworkAcl(createNetworkAclOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateNetworkAcl(createNetworkAclOptions *CreateNetworkAclOptions)`, func() {
		version := "testString"
		createNetworkAclPath := "/network_acls"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createNetworkAclPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke CreateNetworkAcl successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateNetworkAcl(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkACLRuleReference model
				networkAclRuleReferenceModel := new(vpcv1.NetworkACLRuleReference)
				networkAclRuleReferenceModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRuleReferenceModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRuleReferenceModel.Name = core.StringPtr("my-rule-1")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll model
				networkAclRulePrototypeNetworkAclContextModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll)
				networkAclRulePrototypeNetworkAclContextModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRulePrototypeNetworkAclContextModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRulePrototypeNetworkAclContextModel.Name = core.StringPtr("my-rule-2")
				networkAclRulePrototypeNetworkAclContextModel.Action = core.StringPtr("allow")
				networkAclRulePrototypeNetworkAclContextModel.Destination = core.StringPtr("192.168.3.0/24")
				networkAclRulePrototypeNetworkAclContextModel.Direction = core.StringPtr("inbound")
				networkAclRulePrototypeNetworkAclContextModel.Source = core.StringPtr("192.168.3.0/24")
				networkAclRulePrototypeNetworkAclContextModel.Protocol = core.StringPtr("all")
				networkAclRulePrototypeNetworkAclContextModel.Before = networkAclRuleReferenceModel
				networkAclRulePrototypeNetworkAclContextModel.CreatedAt = CreateMockDateTime()
				networkAclRulePrototypeNetworkAclContextModel.IpVersion = core.StringPtr("ipv4")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the NetworkACLPrototypeNetworkACLByRules model
				networkAclPrototypeModel := new(vpcv1.NetworkACLPrototypeNetworkACLByRules)
				networkAclPrototypeModel.Name = core.StringPtr("my-network-acl")
				networkAclPrototypeModel.Vpc = vpcIdentityModel
				networkAclPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				networkAclPrototypeModel.Rules = []vpcv1.NetworkACLRulePrototypeNetworkACLContextIntf{networkAclRulePrototypeNetworkAclContextModel}

				// Construct an instance of the CreateNetworkAclOptions model
				createNetworkAclOptionsModel := new(vpcv1.CreateNetworkAclOptions)
				createNetworkAclOptionsModel.NetworkACLPrototype = networkAclPrototypeModel
				createNetworkAclOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateNetworkAcl(createNetworkAclOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateNetworkAcl with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLRuleReference model
				networkAclRuleReferenceModel := new(vpcv1.NetworkACLRuleReference)
				networkAclRuleReferenceModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRuleReferenceModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRuleReferenceModel.Name = core.StringPtr("my-rule-1")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll model
				networkAclRulePrototypeNetworkAclContextModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll)
				networkAclRulePrototypeNetworkAclContextModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRulePrototypeNetworkAclContextModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRulePrototypeNetworkAclContextModel.Name = core.StringPtr("my-rule-2")
				networkAclRulePrototypeNetworkAclContextModel.Action = core.StringPtr("allow")
				networkAclRulePrototypeNetworkAclContextModel.Destination = core.StringPtr("192.168.3.0/24")
				networkAclRulePrototypeNetworkAclContextModel.Direction = core.StringPtr("inbound")
				networkAclRulePrototypeNetworkAclContextModel.Source = core.StringPtr("192.168.3.0/24")
				networkAclRulePrototypeNetworkAclContextModel.Protocol = core.StringPtr("all")
				networkAclRulePrototypeNetworkAclContextModel.Before = networkAclRuleReferenceModel
				networkAclRulePrototypeNetworkAclContextModel.CreatedAt = CreateMockDateTime()
				networkAclRulePrototypeNetworkAclContextModel.IpVersion = core.StringPtr("ipv4")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the NetworkACLPrototypeNetworkACLByRules model
				networkAclPrototypeModel := new(vpcv1.NetworkACLPrototypeNetworkACLByRules)
				networkAclPrototypeModel.Name = core.StringPtr("my-network-acl")
				networkAclPrototypeModel.Vpc = vpcIdentityModel
				networkAclPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				networkAclPrototypeModel.Rules = []vpcv1.NetworkACLRulePrototypeNetworkACLContextIntf{networkAclRulePrototypeNetworkAclContextModel}

				// Construct an instance of the CreateNetworkAclOptions model
				createNetworkAclOptionsModel := new(vpcv1.CreateNetworkAclOptions)
				createNetworkAclOptionsModel.NetworkACLPrototype = networkAclPrototypeModel
				createNetworkAclOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateNetworkAcl(createNetworkAclOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteNetworkAcl(deleteNetworkAclOptions *DeleteNetworkAclOptions)`, func() {
		version := "testString"
		deleteNetworkAclPath := "/network_acls/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteNetworkAclPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteNetworkAcl successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteNetworkAcl(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteNetworkAclOptions model
				deleteNetworkAclOptionsModel := new(vpcv1.DeleteNetworkAclOptions)
				deleteNetworkAclOptionsModel.ID = core.StringPtr("testString")
				deleteNetworkAclOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteNetworkAcl(deleteNetworkAclOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteNetworkAcl with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteNetworkAclOptions model
				deleteNetworkAclOptionsModel := new(vpcv1.DeleteNetworkAclOptions)
				deleteNetworkAclOptionsModel.ID = core.StringPtr("testString")
				deleteNetworkAclOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteNetworkAcl(deleteNetworkAclOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteNetworkAclOptions model with no property values
				deleteNetworkAclOptionsModelNew := new(vpcv1.DeleteNetworkAclOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteNetworkAcl(deleteNetworkAclOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetNetworkAcl(getNetworkAclOptions *GetNetworkAclOptions) - Operation response error`, func() {
		version := "testString"
		getNetworkAclPath := "/network_acls/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getNetworkAclPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetNetworkAcl with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetNetworkAclOptions model
				getNetworkAclOptionsModel := new(vpcv1.GetNetworkAclOptions)
				getNetworkAclOptionsModel.ID = core.StringPtr("testString")
				getNetworkAclOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetNetworkAcl(getNetworkAclOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetNetworkAcl(getNetworkAclOptions *GetNetworkAclOptions)`, func() {
		version := "testString"
		getNetworkAclPath := "/network_acls/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getNetworkAclPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetNetworkAcl successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetNetworkAcl(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetNetworkAclOptions model
				getNetworkAclOptionsModel := new(vpcv1.GetNetworkAclOptions)
				getNetworkAclOptionsModel.ID = core.StringPtr("testString")
				getNetworkAclOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetNetworkAcl(getNetworkAclOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetNetworkAcl with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetNetworkAclOptions model
				getNetworkAclOptionsModel := new(vpcv1.GetNetworkAclOptions)
				getNetworkAclOptionsModel.ID = core.StringPtr("testString")
				getNetworkAclOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetNetworkAcl(getNetworkAclOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetNetworkAclOptions model with no property values
				getNetworkAclOptionsModelNew := new(vpcv1.GetNetworkAclOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetNetworkAcl(getNetworkAclOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateNetworkAcl(updateNetworkAclOptions *UpdateNetworkAclOptions) - Operation response error`, func() {
		version := "testString"
		updateNetworkAclPath := "/network_acls/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateNetworkAclPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateNetworkAcl with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateNetworkAclOptions model
				updateNetworkAclOptionsModel := new(vpcv1.UpdateNetworkAclOptions)
				updateNetworkAclOptionsModel.ID = core.StringPtr("testString")
				updateNetworkAclOptionsModel.Name = core.StringPtr("my-network-acl")
				updateNetworkAclOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateNetworkAcl(updateNetworkAclOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateNetworkAcl(updateNetworkAclOptions *UpdateNetworkAclOptions)`, func() {
		version := "testString"
		updateNetworkAclPath := "/network_acls/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateNetworkAclPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke UpdateNetworkAcl successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateNetworkAcl(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateNetworkAclOptions model
				updateNetworkAclOptionsModel := new(vpcv1.UpdateNetworkAclOptions)
				updateNetworkAclOptionsModel.ID = core.StringPtr("testString")
				updateNetworkAclOptionsModel.Name = core.StringPtr("my-network-acl")
				updateNetworkAclOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateNetworkAcl(updateNetworkAclOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateNetworkAcl with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateNetworkAclOptions model
				updateNetworkAclOptionsModel := new(vpcv1.UpdateNetworkAclOptions)
				updateNetworkAclOptionsModel.ID = core.StringPtr("testString")
				updateNetworkAclOptionsModel.Name = core.StringPtr("my-network-acl")
				updateNetworkAclOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateNetworkAcl(updateNetworkAclOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateNetworkAclOptions model with no property values
				updateNetworkAclOptionsModelNew := new(vpcv1.UpdateNetworkAclOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateNetworkAcl(updateNetworkAclOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListNetworkAclRules(listNetworkAclRulesOptions *ListNetworkAclRulesOptions) - Operation response error`, func() {
		version := "testString"
		listNetworkAclRulesPath := "/network_acls/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listNetworkAclRulesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["direction"]).To(Equal([]string{"inbound"}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListNetworkAclRules with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListNetworkAclRulesOptions model
				listNetworkAclRulesOptionsModel := new(vpcv1.ListNetworkAclRulesOptions)
				listNetworkAclRulesOptionsModel.NetworkAclID = core.StringPtr("testString")
				listNetworkAclRulesOptionsModel.Start = core.StringPtr("testString")
				listNetworkAclRulesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listNetworkAclRulesOptionsModel.Direction = core.StringPtr("inbound")
				listNetworkAclRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListNetworkAclRules(listNetworkAclRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListNetworkAclRules(listNetworkAclRulesOptions *ListNetworkAclRulesOptions)`, func() {
		version := "testString"
		listNetworkAclRulesPath := "/network_acls/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listNetworkAclRulesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["direction"]).To(Equal([]string{"inbound"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}]}`)
				}))
			})
			It(`Invoke ListNetworkAclRules successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListNetworkAclRules(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListNetworkAclRulesOptions model
				listNetworkAclRulesOptionsModel := new(vpcv1.ListNetworkAclRulesOptions)
				listNetworkAclRulesOptionsModel.NetworkAclID = core.StringPtr("testString")
				listNetworkAclRulesOptionsModel.Start = core.StringPtr("testString")
				listNetworkAclRulesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listNetworkAclRulesOptionsModel.Direction = core.StringPtr("inbound")
				listNetworkAclRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListNetworkAclRules(listNetworkAclRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListNetworkAclRules with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListNetworkAclRulesOptions model
				listNetworkAclRulesOptionsModel := new(vpcv1.ListNetworkAclRulesOptions)
				listNetworkAclRulesOptionsModel.NetworkAclID = core.StringPtr("testString")
				listNetworkAclRulesOptionsModel.Start = core.StringPtr("testString")
				listNetworkAclRulesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listNetworkAclRulesOptionsModel.Direction = core.StringPtr("inbound")
				listNetworkAclRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListNetworkAclRules(listNetworkAclRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListNetworkAclRulesOptions model with no property values
				listNetworkAclRulesOptionsModelNew := new(vpcv1.ListNetworkAclRulesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListNetworkAclRules(listNetworkAclRulesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateNetworkAclRule(createNetworkAclRuleOptions *CreateNetworkAclRuleOptions) - Operation response error`, func() {
		version := "testString"
		createNetworkAclRulePath := "/network_acls/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createNetworkAclRulePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateNetworkAclRule with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLRuleReference model
				networkAclRuleReferenceModel := new(vpcv1.NetworkACLRuleReference)
				networkAclRuleReferenceModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRuleReferenceModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRuleReferenceModel.Name = core.StringPtr("my-rule-1")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLRuleProtocolICMP model
				networkAclRulePrototypeModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLRuleProtocolICMP)
				networkAclRulePrototypeModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRulePrototypeModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRulePrototypeModel.Name = core.StringPtr("my-rule-2")
				networkAclRulePrototypeModel.Action = core.StringPtr("allow")
				networkAclRulePrototypeModel.Destination = core.StringPtr("192.168.3.0/24")
				networkAclRulePrototypeModel.Direction = core.StringPtr("inbound")
				networkAclRulePrototypeModel.Source = core.StringPtr("192.168.3.0/24")
				networkAclRulePrototypeModel.Protocol = core.StringPtr("icmp")
				networkAclRulePrototypeModel.Before = networkAclRuleReferenceModel
				networkAclRulePrototypeModel.CreatedAt = CreateMockDateTime()
				networkAclRulePrototypeModel.IpVersion = core.StringPtr("ipv4")
				networkAclRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				networkAclRulePrototypeModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the CreateNetworkAclRuleOptions model
				createNetworkAclRuleOptionsModel := new(vpcv1.CreateNetworkAclRuleOptions)
				createNetworkAclRuleOptionsModel.NetworkAclID = core.StringPtr("testString")
				createNetworkAclRuleOptionsModel.NetworkACLRulePrototype = networkAclRulePrototypeModel
				createNetworkAclRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateNetworkAclRule(createNetworkAclRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateNetworkAclRule(createNetworkAclRuleOptions *CreateNetworkAclRuleOptions)`, func() {
		version := "testString"
		createNetworkAclRulePath := "/network_acls/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createNetworkAclRulePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}`)
				}))
			})
			It(`Invoke CreateNetworkAclRule successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateNetworkAclRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkACLRuleReference model
				networkAclRuleReferenceModel := new(vpcv1.NetworkACLRuleReference)
				networkAclRuleReferenceModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRuleReferenceModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRuleReferenceModel.Name = core.StringPtr("my-rule-1")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLRuleProtocolICMP model
				networkAclRulePrototypeModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLRuleProtocolICMP)
				networkAclRulePrototypeModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRulePrototypeModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRulePrototypeModel.Name = core.StringPtr("my-rule-2")
				networkAclRulePrototypeModel.Action = core.StringPtr("allow")
				networkAclRulePrototypeModel.Destination = core.StringPtr("192.168.3.0/24")
				networkAclRulePrototypeModel.Direction = core.StringPtr("inbound")
				networkAclRulePrototypeModel.Source = core.StringPtr("192.168.3.0/24")
				networkAclRulePrototypeModel.Protocol = core.StringPtr("icmp")
				networkAclRulePrototypeModel.Before = networkAclRuleReferenceModel
				networkAclRulePrototypeModel.CreatedAt = CreateMockDateTime()
				networkAclRulePrototypeModel.IpVersion = core.StringPtr("ipv4")
				networkAclRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				networkAclRulePrototypeModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the CreateNetworkAclRuleOptions model
				createNetworkAclRuleOptionsModel := new(vpcv1.CreateNetworkAclRuleOptions)
				createNetworkAclRuleOptionsModel.NetworkAclID = core.StringPtr("testString")
				createNetworkAclRuleOptionsModel.NetworkACLRulePrototype = networkAclRulePrototypeModel
				createNetworkAclRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateNetworkAclRule(createNetworkAclRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateNetworkAclRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLRuleReference model
				networkAclRuleReferenceModel := new(vpcv1.NetworkACLRuleReference)
				networkAclRuleReferenceModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRuleReferenceModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRuleReferenceModel.Name = core.StringPtr("my-rule-1")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLRuleProtocolICMP model
				networkAclRulePrototypeModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLRuleProtocolICMP)
				networkAclRulePrototypeModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRulePrototypeModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRulePrototypeModel.Name = core.StringPtr("my-rule-2")
				networkAclRulePrototypeModel.Action = core.StringPtr("allow")
				networkAclRulePrototypeModel.Destination = core.StringPtr("192.168.3.0/24")
				networkAclRulePrototypeModel.Direction = core.StringPtr("inbound")
				networkAclRulePrototypeModel.Source = core.StringPtr("192.168.3.0/24")
				networkAclRulePrototypeModel.Protocol = core.StringPtr("icmp")
				networkAclRulePrototypeModel.Before = networkAclRuleReferenceModel
				networkAclRulePrototypeModel.CreatedAt = CreateMockDateTime()
				networkAclRulePrototypeModel.IpVersion = core.StringPtr("ipv4")
				networkAclRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				networkAclRulePrototypeModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the CreateNetworkAclRuleOptions model
				createNetworkAclRuleOptionsModel := new(vpcv1.CreateNetworkAclRuleOptions)
				createNetworkAclRuleOptionsModel.NetworkAclID = core.StringPtr("testString")
				createNetworkAclRuleOptionsModel.NetworkACLRulePrototype = networkAclRulePrototypeModel
				createNetworkAclRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateNetworkAclRule(createNetworkAclRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateNetworkAclRuleOptions model with no property values
				createNetworkAclRuleOptionsModelNew := new(vpcv1.CreateNetworkAclRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateNetworkAclRule(createNetworkAclRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteNetworkAclRule(deleteNetworkAclRuleOptions *DeleteNetworkAclRuleOptions)`, func() {
		version := "testString"
		deleteNetworkAclRulePath := "/network_acls/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteNetworkAclRulePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteNetworkAclRule successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteNetworkAclRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteNetworkAclRuleOptions model
				deleteNetworkAclRuleOptionsModel := new(vpcv1.DeleteNetworkAclRuleOptions)
				deleteNetworkAclRuleOptionsModel.NetworkAclID = core.StringPtr("testString")
				deleteNetworkAclRuleOptionsModel.ID = core.StringPtr("testString")
				deleteNetworkAclRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteNetworkAclRule(deleteNetworkAclRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteNetworkAclRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteNetworkAclRuleOptions model
				deleteNetworkAclRuleOptionsModel := new(vpcv1.DeleteNetworkAclRuleOptions)
				deleteNetworkAclRuleOptionsModel.NetworkAclID = core.StringPtr("testString")
				deleteNetworkAclRuleOptionsModel.ID = core.StringPtr("testString")
				deleteNetworkAclRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteNetworkAclRule(deleteNetworkAclRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteNetworkAclRuleOptions model with no property values
				deleteNetworkAclRuleOptionsModelNew := new(vpcv1.DeleteNetworkAclRuleOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteNetworkAclRule(deleteNetworkAclRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetNetworkAclRule(getNetworkAclRuleOptions *GetNetworkAclRuleOptions) - Operation response error`, func() {
		version := "testString"
		getNetworkAclRulePath := "/network_acls/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getNetworkAclRulePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetNetworkAclRule with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetNetworkAclRuleOptions model
				getNetworkAclRuleOptionsModel := new(vpcv1.GetNetworkAclRuleOptions)
				getNetworkAclRuleOptionsModel.NetworkAclID = core.StringPtr("testString")
				getNetworkAclRuleOptionsModel.ID = core.StringPtr("testString")
				getNetworkAclRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetNetworkAclRule(getNetworkAclRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetNetworkAclRule(getNetworkAclRuleOptions *GetNetworkAclRuleOptions)`, func() {
		version := "testString"
		getNetworkAclRulePath := "/network_acls/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getNetworkAclRulePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}`)
				}))
			})
			It(`Invoke GetNetworkAclRule successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetNetworkAclRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetNetworkAclRuleOptions model
				getNetworkAclRuleOptionsModel := new(vpcv1.GetNetworkAclRuleOptions)
				getNetworkAclRuleOptionsModel.NetworkAclID = core.StringPtr("testString")
				getNetworkAclRuleOptionsModel.ID = core.StringPtr("testString")
				getNetworkAclRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetNetworkAclRule(getNetworkAclRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetNetworkAclRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetNetworkAclRuleOptions model
				getNetworkAclRuleOptionsModel := new(vpcv1.GetNetworkAclRuleOptions)
				getNetworkAclRuleOptionsModel.NetworkAclID = core.StringPtr("testString")
				getNetworkAclRuleOptionsModel.ID = core.StringPtr("testString")
				getNetworkAclRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetNetworkAclRule(getNetworkAclRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetNetworkAclRuleOptions model with no property values
				getNetworkAclRuleOptionsModelNew := new(vpcv1.GetNetworkAclRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetNetworkAclRule(getNetworkAclRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateNetworkAclRule(updateNetworkAclRuleOptions *UpdateNetworkAclRuleOptions) - Operation response error`, func() {
		version := "testString"
		updateNetworkAclRulePath := "/network_acls/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateNetworkAclRulePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateNetworkAclRule with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLRulePatchBeforeNetworkACLRuleIdentityByID model
				networkAclRulePatchBeforeModel := new(vpcv1.NetworkACLRulePatchBeforeNetworkACLRuleIdentityByID)
				networkAclRulePatchBeforeModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the UpdateNetworkAclRuleOptions model
				updateNetworkAclRuleOptionsModel := new(vpcv1.UpdateNetworkAclRuleOptions)
				updateNetworkAclRuleOptionsModel.NetworkAclID = core.StringPtr("testString")
				updateNetworkAclRuleOptionsModel.ID = core.StringPtr("testString")
				updateNetworkAclRuleOptionsModel.Action = core.StringPtr("allow")
				updateNetworkAclRuleOptionsModel.Destination = core.StringPtr("192.168.3.2/32")
				updateNetworkAclRuleOptionsModel.Direction = core.StringPtr("inbound")
				updateNetworkAclRuleOptionsModel.Name = core.StringPtr("my-rule-2")
				updateNetworkAclRuleOptionsModel.Source = core.StringPtr("192.168.3.2/32")
				updateNetworkAclRuleOptionsModel.DestinationPortMax = core.Int64Ptr(int64(22))
				updateNetworkAclRuleOptionsModel.DestinationPortMin = core.Int64Ptr(int64(22))
				updateNetworkAclRuleOptionsModel.SourcePortMax = core.Int64Ptr(int64(65535))
				updateNetworkAclRuleOptionsModel.SourcePortMin = core.Int64Ptr(int64(49152))
				updateNetworkAclRuleOptionsModel.Code = core.Int64Ptr(int64(0))
				updateNetworkAclRuleOptionsModel.Type = core.Int64Ptr(int64(8))
				updateNetworkAclRuleOptionsModel.Before = networkAclRulePatchBeforeModel
				updateNetworkAclRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateNetworkAclRule(updateNetworkAclRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateNetworkAclRule(updateNetworkAclRuleOptions *UpdateNetworkAclRuleOptions)`, func() {
		version := "testString"
		updateNetworkAclRulePath := "/network_acls/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateNetworkAclRulePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}`)
				}))
			})
			It(`Invoke UpdateNetworkAclRule successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateNetworkAclRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkACLRulePatchBeforeNetworkACLRuleIdentityByID model
				networkAclRulePatchBeforeModel := new(vpcv1.NetworkACLRulePatchBeforeNetworkACLRuleIdentityByID)
				networkAclRulePatchBeforeModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the UpdateNetworkAclRuleOptions model
				updateNetworkAclRuleOptionsModel := new(vpcv1.UpdateNetworkAclRuleOptions)
				updateNetworkAclRuleOptionsModel.NetworkAclID = core.StringPtr("testString")
				updateNetworkAclRuleOptionsModel.ID = core.StringPtr("testString")
				updateNetworkAclRuleOptionsModel.Action = core.StringPtr("allow")
				updateNetworkAclRuleOptionsModel.Destination = core.StringPtr("192.168.3.2/32")
				updateNetworkAclRuleOptionsModel.Direction = core.StringPtr("inbound")
				updateNetworkAclRuleOptionsModel.Name = core.StringPtr("my-rule-2")
				updateNetworkAclRuleOptionsModel.Source = core.StringPtr("192.168.3.2/32")
				updateNetworkAclRuleOptionsModel.DestinationPortMax = core.Int64Ptr(int64(22))
				updateNetworkAclRuleOptionsModel.DestinationPortMin = core.Int64Ptr(int64(22))
				updateNetworkAclRuleOptionsModel.SourcePortMax = core.Int64Ptr(int64(65535))
				updateNetworkAclRuleOptionsModel.SourcePortMin = core.Int64Ptr(int64(49152))
				updateNetworkAclRuleOptionsModel.Code = core.Int64Ptr(int64(0))
				updateNetworkAclRuleOptionsModel.Type = core.Int64Ptr(int64(8))
				updateNetworkAclRuleOptionsModel.Before = networkAclRulePatchBeforeModel
				updateNetworkAclRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateNetworkAclRule(updateNetworkAclRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateNetworkAclRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLRulePatchBeforeNetworkACLRuleIdentityByID model
				networkAclRulePatchBeforeModel := new(vpcv1.NetworkACLRulePatchBeforeNetworkACLRuleIdentityByID)
				networkAclRulePatchBeforeModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the UpdateNetworkAclRuleOptions model
				updateNetworkAclRuleOptionsModel := new(vpcv1.UpdateNetworkAclRuleOptions)
				updateNetworkAclRuleOptionsModel.NetworkAclID = core.StringPtr("testString")
				updateNetworkAclRuleOptionsModel.ID = core.StringPtr("testString")
				updateNetworkAclRuleOptionsModel.Action = core.StringPtr("allow")
				updateNetworkAclRuleOptionsModel.Destination = core.StringPtr("192.168.3.2/32")
				updateNetworkAclRuleOptionsModel.Direction = core.StringPtr("inbound")
				updateNetworkAclRuleOptionsModel.Name = core.StringPtr("my-rule-2")
				updateNetworkAclRuleOptionsModel.Source = core.StringPtr("192.168.3.2/32")
				updateNetworkAclRuleOptionsModel.DestinationPortMax = core.Int64Ptr(int64(22))
				updateNetworkAclRuleOptionsModel.DestinationPortMin = core.Int64Ptr(int64(22))
				updateNetworkAclRuleOptionsModel.SourcePortMax = core.Int64Ptr(int64(65535))
				updateNetworkAclRuleOptionsModel.SourcePortMin = core.Int64Ptr(int64(49152))
				updateNetworkAclRuleOptionsModel.Code = core.Int64Ptr(int64(0))
				updateNetworkAclRuleOptionsModel.Type = core.Int64Ptr(int64(8))
				updateNetworkAclRuleOptionsModel.Before = networkAclRulePatchBeforeModel
				updateNetworkAclRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateNetworkAclRule(updateNetworkAclRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateNetworkAclRuleOptions model with no property values
				updateNetworkAclRuleOptionsModelNew := new(vpcv1.UpdateNetworkAclRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateNetworkAclRule(updateNetworkAclRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "https://vpcv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListPublicGateways(listPublicGatewaysOptions *ListPublicGatewaysOptions) - Operation response error`, func() {
		version := "testString"
		listPublicGatewaysPath := "/public_gateways"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listPublicGatewaysPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListPublicGateways with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListPublicGatewaysOptions model
				listPublicGatewaysOptionsModel := new(vpcv1.ListPublicGatewaysOptions)
				listPublicGatewaysOptionsModel.Start = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Limit = core.Int64Ptr(int64(38))
				listPublicGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListPublicGateways(listPublicGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListPublicGateways(listPublicGatewaysOptions *ListPublicGatewaysOptions)`, func() {
		version := "testString"
		listPublicGatewaysPath := "/public_gateways"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listPublicGatewaysPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "public_gateways": [{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "resource_type": "public_gateway", "name": "my-public-gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListPublicGateways successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListPublicGateways(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListPublicGatewaysOptions model
				listPublicGatewaysOptionsModel := new(vpcv1.ListPublicGatewaysOptions)
				listPublicGatewaysOptionsModel.Start = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Limit = core.Int64Ptr(int64(38))
				listPublicGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListPublicGateways(listPublicGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListPublicGateways with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListPublicGatewaysOptions model
				listPublicGatewaysOptionsModel := new(vpcv1.ListPublicGatewaysOptions)
				listPublicGatewaysOptionsModel.Start = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Limit = core.Int64Ptr(int64(38))
				listPublicGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListPublicGateways(listPublicGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreatePublicGateway(createPublicGatewayOptions *CreatePublicGatewayOptions) - Operation response error`, func() {
		version := "testString"
		createPublicGatewayPath := "/public_gateways"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createPublicGatewayPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreatePublicGateway with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByID model
				publicGatewayPrototypeFloatingIpModel := new(vpcv1.PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByID)
				publicGatewayPrototypeFloatingIpModel.ID = core.StringPtr("39300233-9995-4806-89a5-3c1b6eb88689")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreatePublicGatewayOptions model
				createPublicGatewayOptionsModel := new(vpcv1.CreatePublicGatewayOptions)
				createPublicGatewayOptionsModel.Vpc = vpcIdentityModel
				createPublicGatewayOptionsModel.Zone = zoneIdentityModel
				createPublicGatewayOptionsModel.Name = core.StringPtr("my-public-gateway")
				createPublicGatewayOptionsModel.FloatingIp = publicGatewayPrototypeFloatingIpModel
				createPublicGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreatePublicGateway(createPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreatePublicGateway(createPublicGatewayOptions *CreatePublicGatewayOptions)`, func() {
		version := "testString"
		createPublicGatewayPath := "/public_gateways"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createPublicGatewayPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "resource_type": "public_gateway", "name": "my-public-gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke CreatePublicGateway successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreatePublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByID model
				publicGatewayPrototypeFloatingIpModel := new(vpcv1.PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByID)
				publicGatewayPrototypeFloatingIpModel.ID = core.StringPtr("39300233-9995-4806-89a5-3c1b6eb88689")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreatePublicGatewayOptions model
				createPublicGatewayOptionsModel := new(vpcv1.CreatePublicGatewayOptions)
				createPublicGatewayOptionsModel.Vpc = vpcIdentityModel
				createPublicGatewayOptionsModel.Zone = zoneIdentityModel
				createPublicGatewayOptionsModel.Name = core.StringPtr("my-public-gateway")
				createPublicGatewayOptionsModel.FloatingIp = publicGatewayPrototypeFloatingIpModel
				createPublicGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreatePublicGateway(createPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreatePublicGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByID model
				publicGatewayPrototypeFloatingIpModel := new(vpcv1.PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByID)
				publicGatewayPrototypeFloatingIpModel.ID = core.StringPtr("39300233-9995-4806-89a5-3c1b6eb88689")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreatePublicGatewayOptions model
				createPublicGatewayOptionsModel := new(vpcv1.CreatePublicGatewayOptions)
				createPublicGatewayOptionsModel.Vpc = vpcIdentityModel
				createPublicGatewayOptionsModel.Zone = zoneIdentityModel
				createPublicGatewayOptionsModel.Name = core.StringPtr("my-public-gateway")
				createPublicGatewayOptionsModel.FloatingIp = publicGatewayPrototypeFloatingIpModel
				createPublicGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreatePublicGateway(createPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreatePublicGatewayOptions model with no property values
				createPublicGatewayOptionsModelNew := new(vpcv1.CreatePublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreatePublicGateway(createPublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeletePublicGateway(deletePublicGatewayOptions *DeletePublicGatewayOptions)`, func() {
		version := "testString"
		deletePublicGatewayPath := "/public_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deletePublicGatewayPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeletePublicGateway successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeletePublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeletePublicGatewayOptions model
				deletePublicGatewayOptionsModel := new(vpcv1.DeletePublicGatewayOptions)
				deletePublicGatewayOptionsModel.ID = core.StringPtr("testString")
				deletePublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeletePublicGateway(deletePublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeletePublicGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeletePublicGatewayOptions model
				deletePublicGatewayOptionsModel := new(vpcv1.DeletePublicGatewayOptions)
				deletePublicGatewayOptionsModel.ID = core.StringPtr("testString")
				deletePublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeletePublicGateway(deletePublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeletePublicGatewayOptions model with no property values
				deletePublicGatewayOptionsModelNew := new(vpcv1.DeletePublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeletePublicGateway(deletePublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetPublicGateway(getPublicGatewayOptions *GetPublicGatewayOptions) - Operation response error`, func() {
		version := "testString"
		getPublicGatewayPath := "/public_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getPublicGatewayPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetPublicGateway with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetPublicGatewayOptions model
				getPublicGatewayOptionsModel := new(vpcv1.GetPublicGatewayOptions)
				getPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetPublicGateway(getPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetPublicGateway(getPublicGatewayOptions *GetPublicGatewayOptions)`, func() {
		version := "testString"
		getPublicGatewayPath := "/public_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getPublicGatewayPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "resource_type": "public_gateway", "name": "my-public-gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke GetPublicGateway successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetPublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetPublicGatewayOptions model
				getPublicGatewayOptionsModel := new(vpcv1.GetPublicGatewayOptions)
				getPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetPublicGateway(getPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetPublicGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetPublicGatewayOptions model
				getPublicGatewayOptionsModel := new(vpcv1.GetPublicGatewayOptions)
				getPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetPublicGateway(getPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetPublicGatewayOptions model with no property values
				getPublicGatewayOptionsModelNew := new(vpcv1.GetPublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetPublicGateway(getPublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdatePublicGateway(updatePublicGatewayOptions *UpdatePublicGatewayOptions) - Operation response error`, func() {
		version := "testString"
		updatePublicGatewayPath := "/public_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updatePublicGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdatePublicGateway with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdatePublicGatewayOptions model
				updatePublicGatewayOptionsModel := new(vpcv1.UpdatePublicGatewayOptions)
				updatePublicGatewayOptionsModel.ID = core.StringPtr("testString")
				updatePublicGatewayOptionsModel.Name = core.StringPtr("my-public-gateway")
				updatePublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdatePublicGateway(updatePublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdatePublicGateway(updatePublicGatewayOptions *UpdatePublicGatewayOptions)`, func() {
		version := "testString"
		updatePublicGatewayPath := "/public_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updatePublicGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "resource_type": "public_gateway", "name": "my-public-gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke UpdatePublicGateway successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdatePublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdatePublicGatewayOptions model
				updatePublicGatewayOptionsModel := new(vpcv1.UpdatePublicGatewayOptions)
				updatePublicGatewayOptionsModel.ID = core.StringPtr("testString")
				updatePublicGatewayOptionsModel.Name = core.StringPtr("my-public-gateway")
				updatePublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdatePublicGateway(updatePublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdatePublicGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdatePublicGatewayOptions model
				updatePublicGatewayOptionsModel := new(vpcv1.UpdatePublicGatewayOptions)
				updatePublicGatewayOptionsModel.ID = core.StringPtr("testString")
				updatePublicGatewayOptionsModel.Name = core.StringPtr("my-public-gateway")
				updatePublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdatePublicGateway(updatePublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdatePublicGatewayOptions model with no property values
				updatePublicGatewayOptionsModelNew := new(vpcv1.UpdatePublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdatePublicGateway(updatePublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "https://vpcv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListKeys(listKeysOptions *ListKeysOptions) - Operation response error`, func() {
		version := "testString"
		listKeysPath := "/keys"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listKeysPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListKeys with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListKeysOptions model
				listKeysOptionsModel := new(vpcv1.ListKeysOptions)
				listKeysOptionsModel.Start = core.StringPtr("testString")
				listKeysOptionsModel.Limit = core.Int64Ptr(int64(38))
				listKeysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listKeysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListKeys(listKeysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListKeys(listKeysOptions *ListKeysOptions)`, func() {
		version := "testString"
		listKeysPath := "/keys"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listKeysPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/keys?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/keys?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "type": "rsa", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "length": 2048}]}`)
				}))
			})
			It(`Invoke ListKeys successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListKeys(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListKeysOptions model
				listKeysOptionsModel := new(vpcv1.ListKeysOptions)
				listKeysOptionsModel.Start = core.StringPtr("testString")
				listKeysOptionsModel.Limit = core.Int64Ptr(int64(38))
				listKeysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listKeysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListKeys(listKeysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListKeys with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListKeysOptions model
				listKeysOptionsModel := new(vpcv1.ListKeysOptions)
				listKeysOptionsModel.Start = core.StringPtr("testString")
				listKeysOptionsModel.Limit = core.Int64Ptr(int64(38))
				listKeysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listKeysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListKeys(listKeysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateKey(createKeyOptions *CreateKeyOptions) - Operation response error`, func() {
		version := "testString"
		createKeyPath := "/keys"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createKeyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateKey with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateKeyOptions model
				createKeyOptionsModel := new(vpcv1.CreateKeyOptions)
				createKeyOptionsModel.PublicKey = core.StringPtr("AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")
				createKeyOptionsModel.Name = core.StringPtr("my-key")
				createKeyOptionsModel.Type = core.StringPtr("rsa")
				createKeyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateKey(createKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateKey(createKeyOptions *CreateKeyOptions)`, func() {
		version := "testString"
		createKeyPath := "/keys"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createKeyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "type": "rsa", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "length": 2048}`)
				}))
			})
			It(`Invoke CreateKey successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateKey(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateKeyOptions model
				createKeyOptionsModel := new(vpcv1.CreateKeyOptions)
				createKeyOptionsModel.PublicKey = core.StringPtr("AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")
				createKeyOptionsModel.Name = core.StringPtr("my-key")
				createKeyOptionsModel.Type = core.StringPtr("rsa")
				createKeyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateKey(createKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateKey with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateKeyOptions model
				createKeyOptionsModel := new(vpcv1.CreateKeyOptions)
				createKeyOptionsModel.PublicKey = core.StringPtr("AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")
				createKeyOptionsModel.Name = core.StringPtr("my-key")
				createKeyOptionsModel.Type = core.StringPtr("rsa")
				createKeyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateKey(createKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateKeyOptions model with no property values
				createKeyOptionsModelNew := new(vpcv1.CreateKeyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateKey(createKeyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteKey(deleteKeyOptions *DeleteKeyOptions)`, func() {
		version := "testString"
		deleteKeyPath := "/keys/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteKeyPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteKey successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteKey(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteKeyOptions model
				deleteKeyOptionsModel := new(vpcv1.DeleteKeyOptions)
				deleteKeyOptionsModel.ID = core.StringPtr("testString")
				deleteKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteKey(deleteKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteKey with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteKeyOptions model
				deleteKeyOptionsModel := new(vpcv1.DeleteKeyOptions)
				deleteKeyOptionsModel.ID = core.StringPtr("testString")
				deleteKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteKey(deleteKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteKeyOptions model with no property values
				deleteKeyOptionsModelNew := new(vpcv1.DeleteKeyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteKey(deleteKeyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetKey(getKeyOptions *GetKeyOptions) - Operation response error`, func() {
		version := "testString"
		getKeyPath := "/keys/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getKeyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetKey with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetKeyOptions model
				getKeyOptionsModel := new(vpcv1.GetKeyOptions)
				getKeyOptionsModel.ID = core.StringPtr("testString")
				getKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetKey(getKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetKey(getKeyOptions *GetKeyOptions)`, func() {
		version := "testString"
		getKeyPath := "/keys/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getKeyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "type": "rsa", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "length": 2048}`)
				}))
			})
			It(`Invoke GetKey successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetKey(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetKeyOptions model
				getKeyOptionsModel := new(vpcv1.GetKeyOptions)
				getKeyOptionsModel.ID = core.StringPtr("testString")
				getKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetKey(getKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetKey with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetKeyOptions model
				getKeyOptionsModel := new(vpcv1.GetKeyOptions)
				getKeyOptionsModel.ID = core.StringPtr("testString")
				getKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetKey(getKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetKeyOptions model with no property values
				getKeyOptionsModelNew := new(vpcv1.GetKeyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetKey(getKeyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateKey(updateKeyOptions *UpdateKeyOptions) - Operation response error`, func() {
		version := "testString"
		updateKeyPath := "/keys/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateKeyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateKey with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateKeyOptions model
				updateKeyOptionsModel := new(vpcv1.UpdateKeyOptions)
				updateKeyOptionsModel.ID = core.StringPtr("testString")
				updateKeyOptionsModel.Name = core.StringPtr("my-key")
				updateKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateKey(updateKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateKey(updateKeyOptions *UpdateKeyOptions)`, func() {
		version := "testString"
		updateKeyPath := "/keys/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateKeyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "type": "rsa", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "length": 2048}`)
				}))
			})
			It(`Invoke UpdateKey successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateKey(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateKeyOptions model
				updateKeyOptionsModel := new(vpcv1.UpdateKeyOptions)
				updateKeyOptionsModel.ID = core.StringPtr("testString")
				updateKeyOptionsModel.Name = core.StringPtr("my-key")
				updateKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateKey(updateKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateKey with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateKeyOptions model
				updateKeyOptionsModel := new(vpcv1.UpdateKeyOptions)
				updateKeyOptionsModel.ID = core.StringPtr("testString")
				updateKeyOptionsModel.Name = core.StringPtr("my-key")
				updateKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateKey(updateKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateKeyOptions model with no property values
				updateKeyOptionsModelNew := new(vpcv1.UpdateKeyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateKey(updateKeyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "https://vpcv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListSecurityGroups(listSecurityGroupsOptions *ListSecurityGroupsOptions) - Operation response error`, func() {
		version := "testString"
		listSecurityGroupsPath := "/security_groups"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listSecurityGroupsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.crn"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSecurityGroups with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupsOptions model
				listSecurityGroupsOptionsModel := new(vpcv1.ListSecurityGroupsOptions)
				listSecurityGroupsOptionsModel.Start = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listSecurityGroupsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VpcID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VpcCrn = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VpcName = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListSecurityGroups(listSecurityGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListSecurityGroups(listSecurityGroupsOptions *ListSecurityGroupsOptions)`, func() {
		version := "testString"
		listSecurityGroupsPath := "/security_groups"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listSecurityGroupsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.crn"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "network_interfaces": [{"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface"}], "rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}]}`)
				}))
			})
			It(`Invoke ListSecurityGroups successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListSecurityGroups(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSecurityGroupsOptions model
				listSecurityGroupsOptionsModel := new(vpcv1.ListSecurityGroupsOptions)
				listSecurityGroupsOptionsModel.Start = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listSecurityGroupsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VpcID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VpcCrn = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VpcName = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListSecurityGroups(listSecurityGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListSecurityGroups with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupsOptions model
				listSecurityGroupsOptionsModel := new(vpcv1.ListSecurityGroupsOptions)
				listSecurityGroupsOptionsModel.Start = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listSecurityGroupsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VpcID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VpcCrn = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VpcName = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListSecurityGroups(listSecurityGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSecurityGroup(createSecurityGroupOptions *CreateSecurityGroupOptions) - Operation response error`, func() {
		version := "testString"
		createSecurityGroupPath := "/security_groups"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createSecurityGroupPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSecurityGroup with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP model
				securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP)
				securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP)
				securityGroupRulePrototypeModel.ID = core.StringPtr("6f2a6efe-21e2-401c-b237-620aa26ba16a")
				securityGroupRulePrototypeModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a")
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IpVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePrototypeModel.Remote = securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel
				securityGroupRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePrototypeModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the CreateSecurityGroupOptions model
				createSecurityGroupOptionsModel := new(vpcv1.CreateSecurityGroupOptions)
				createSecurityGroupOptionsModel.Vpc = vpcIdentityModel
				createSecurityGroupOptionsModel.Name = core.StringPtr("my-security-group")
				createSecurityGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createSecurityGroupOptionsModel.Rules = []vpcv1.SecurityGroupRulePrototypeIntf{securityGroupRulePrototypeModel}
				createSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateSecurityGroup(createSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateSecurityGroup(createSecurityGroupOptions *CreateSecurityGroupOptions)`, func() {
		version := "testString"
		createSecurityGroupPath := "/security_groups"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createSecurityGroupPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "network_interfaces": [{"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface"}], "rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke CreateSecurityGroup successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateSecurityGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP model
				securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP)
				securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP)
				securityGroupRulePrototypeModel.ID = core.StringPtr("6f2a6efe-21e2-401c-b237-620aa26ba16a")
				securityGroupRulePrototypeModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a")
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IpVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePrototypeModel.Remote = securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel
				securityGroupRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePrototypeModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the CreateSecurityGroupOptions model
				createSecurityGroupOptionsModel := new(vpcv1.CreateSecurityGroupOptions)
				createSecurityGroupOptionsModel.Vpc = vpcIdentityModel
				createSecurityGroupOptionsModel.Name = core.StringPtr("my-security-group")
				createSecurityGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createSecurityGroupOptionsModel.Rules = []vpcv1.SecurityGroupRulePrototypeIntf{securityGroupRulePrototypeModel}
				createSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateSecurityGroup(createSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateSecurityGroup with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP model
				securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP)
				securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP)
				securityGroupRulePrototypeModel.ID = core.StringPtr("6f2a6efe-21e2-401c-b237-620aa26ba16a")
				securityGroupRulePrototypeModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a")
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IpVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePrototypeModel.Remote = securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel
				securityGroupRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePrototypeModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the CreateSecurityGroupOptions model
				createSecurityGroupOptionsModel := new(vpcv1.CreateSecurityGroupOptions)
				createSecurityGroupOptionsModel.Vpc = vpcIdentityModel
				createSecurityGroupOptionsModel.Name = core.StringPtr("my-security-group")
				createSecurityGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createSecurityGroupOptionsModel.Rules = []vpcv1.SecurityGroupRulePrototypeIntf{securityGroupRulePrototypeModel}
				createSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateSecurityGroup(createSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateSecurityGroupOptions model with no property values
				createSecurityGroupOptionsModelNew := new(vpcv1.CreateSecurityGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateSecurityGroup(createSecurityGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteSecurityGroup(deleteSecurityGroupOptions *DeleteSecurityGroupOptions)`, func() {
		version := "testString"
		deleteSecurityGroupPath := "/security_groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteSecurityGroupPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteSecurityGroup successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteSecurityGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteSecurityGroupOptions model
				deleteSecurityGroupOptionsModel := new(vpcv1.DeleteSecurityGroupOptions)
				deleteSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				deleteSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteSecurityGroup(deleteSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteSecurityGroup with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteSecurityGroupOptions model
				deleteSecurityGroupOptionsModel := new(vpcv1.DeleteSecurityGroupOptions)
				deleteSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				deleteSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteSecurityGroup(deleteSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteSecurityGroupOptions model with no property values
				deleteSecurityGroupOptionsModelNew := new(vpcv1.DeleteSecurityGroupOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteSecurityGroup(deleteSecurityGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSecurityGroup(getSecurityGroupOptions *GetSecurityGroupOptions) - Operation response error`, func() {
		version := "testString"
		getSecurityGroupPath := "/security_groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSecurityGroupPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSecurityGroup with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupOptions model
				getSecurityGroupOptionsModel := new(vpcv1.GetSecurityGroupOptions)
				getSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetSecurityGroup(getSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSecurityGroup(getSecurityGroupOptions *GetSecurityGroupOptions)`, func() {
		version := "testString"
		getSecurityGroupPath := "/security_groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSecurityGroupPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "network_interfaces": [{"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface"}], "rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetSecurityGroup successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetSecurityGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSecurityGroupOptions model
				getSecurityGroupOptionsModel := new(vpcv1.GetSecurityGroupOptions)
				getSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetSecurityGroup(getSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetSecurityGroup with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupOptions model
				getSecurityGroupOptionsModel := new(vpcv1.GetSecurityGroupOptions)
				getSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetSecurityGroup(getSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSecurityGroupOptions model with no property values
				getSecurityGroupOptionsModelNew := new(vpcv1.GetSecurityGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetSecurityGroup(getSecurityGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSecurityGroup(updateSecurityGroupOptions *UpdateSecurityGroupOptions) - Operation response error`, func() {
		version := "testString"
		updateSecurityGroupPath := "/security_groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateSecurityGroupPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateSecurityGroup with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateSecurityGroupOptions model
				updateSecurityGroupOptionsModel := new(vpcv1.UpdateSecurityGroupOptions)
				updateSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupOptionsModel.Name = core.StringPtr("my-security-group")
				updateSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateSecurityGroup(updateSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateSecurityGroup(updateSecurityGroupOptions *UpdateSecurityGroupOptions)`, func() {
		version := "testString"
		updateSecurityGroupPath := "/security_groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateSecurityGroupPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "network_interfaces": [{"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface"}], "rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke UpdateSecurityGroup successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateSecurityGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateSecurityGroupOptions model
				updateSecurityGroupOptionsModel := new(vpcv1.UpdateSecurityGroupOptions)
				updateSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupOptionsModel.Name = core.StringPtr("my-security-group")
				updateSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateSecurityGroup(updateSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateSecurityGroup with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateSecurityGroupOptions model
				updateSecurityGroupOptionsModel := new(vpcv1.UpdateSecurityGroupOptions)
				updateSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupOptionsModel.Name = core.StringPtr("my-security-group")
				updateSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateSecurityGroup(updateSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateSecurityGroupOptions model with no property values
				updateSecurityGroupOptionsModelNew := new(vpcv1.UpdateSecurityGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateSecurityGroup(updateSecurityGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptions *ListSecurityGroupNetworkInterfacesOptions) - Operation response error`, func() {
		version := "testString"
		listSecurityGroupNetworkInterfacesPath := "/security_groups/testString/network_interfaces"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listSecurityGroupNetworkInterfacesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSecurityGroupNetworkInterfaces with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupNetworkInterfacesOptions model
				listSecurityGroupNetworkInterfacesOptionsModel := new(vpcv1.ListSecurityGroupNetworkInterfacesOptions)
				listSecurityGroupNetworkInterfacesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptions *ListSecurityGroupNetworkInterfacesOptions)`, func() {
		version := "testString"
		listSecurityGroupNetworkInterfacesPath := "/security_groups/testString/network_interfaces"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listSecurityGroupNetworkInterfacesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"network_interfaces": [{"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface", "allow_ip_spoofing": true, "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}]}`)
				}))
			})
			It(`Invoke ListSecurityGroupNetworkInterfaces successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListSecurityGroupNetworkInterfaces(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSecurityGroupNetworkInterfacesOptions model
				listSecurityGroupNetworkInterfacesOptionsModel := new(vpcv1.ListSecurityGroupNetworkInterfacesOptions)
				listSecurityGroupNetworkInterfacesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListSecurityGroupNetworkInterfaces with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupNetworkInterfacesOptions model
				listSecurityGroupNetworkInterfacesOptionsModel := new(vpcv1.ListSecurityGroupNetworkInterfacesOptions)
				listSecurityGroupNetworkInterfacesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListSecurityGroupNetworkInterfacesOptions model with no property values
				listSecurityGroupNetworkInterfacesOptionsModelNew := new(vpcv1.ListSecurityGroupNetworkInterfacesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteSecurityGroupNetworkInterfaceBinding(deleteSecurityGroupNetworkInterfaceBindingOptions *DeleteSecurityGroupNetworkInterfaceBindingOptions)`, func() {
		version := "testString"
		deleteSecurityGroupNetworkInterfaceBindingPath := "/security_groups/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteSecurityGroupNetworkInterfaceBindingPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteSecurityGroupNetworkInterfaceBinding successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteSecurityGroupNetworkInterfaceBinding(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteSecurityGroupNetworkInterfaceBindingOptions model
				deleteSecurityGroupNetworkInterfaceBindingOptionsModel := new(vpcv1.DeleteSecurityGroupNetworkInterfaceBindingOptions)
				deleteSecurityGroupNetworkInterfaceBindingOptionsModel.SecurityGroupID = core.StringPtr("testString")
				deleteSecurityGroupNetworkInterfaceBindingOptionsModel.ID = core.StringPtr("testString")
				deleteSecurityGroupNetworkInterfaceBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteSecurityGroupNetworkInterfaceBinding(deleteSecurityGroupNetworkInterfaceBindingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteSecurityGroupNetworkInterfaceBinding with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteSecurityGroupNetworkInterfaceBindingOptions model
				deleteSecurityGroupNetworkInterfaceBindingOptionsModel := new(vpcv1.DeleteSecurityGroupNetworkInterfaceBindingOptions)
				deleteSecurityGroupNetworkInterfaceBindingOptionsModel.SecurityGroupID = core.StringPtr("testString")
				deleteSecurityGroupNetworkInterfaceBindingOptionsModel.ID = core.StringPtr("testString")
				deleteSecurityGroupNetworkInterfaceBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteSecurityGroupNetworkInterfaceBinding(deleteSecurityGroupNetworkInterfaceBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteSecurityGroupNetworkInterfaceBindingOptions model with no property values
				deleteSecurityGroupNetworkInterfaceBindingOptionsModelNew := new(vpcv1.DeleteSecurityGroupNetworkInterfaceBindingOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteSecurityGroupNetworkInterfaceBinding(deleteSecurityGroupNetworkInterfaceBindingOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptions *GetSecurityGroupNetworkInterfaceOptions) - Operation response error`, func() {
		version := "testString"
		getSecurityGroupNetworkInterfacePath := "/security_groups/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSecurityGroupNetworkInterfacePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSecurityGroupNetworkInterface with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupNetworkInterfaceOptions model
				getSecurityGroupNetworkInterfaceOptionsModel := new(vpcv1.GetSecurityGroupNetworkInterfaceOptions)
				getSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptions *GetSecurityGroupNetworkInterfaceOptions)`, func() {
		version := "testString"
		getSecurityGroupNetworkInterfacePath := "/security_groups/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSecurityGroupNetworkInterfacePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface", "allow_ip_spoofing": true, "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}`)
				}))
			})
			It(`Invoke GetSecurityGroupNetworkInterface successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetSecurityGroupNetworkInterface(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSecurityGroupNetworkInterfaceOptions model
				getSecurityGroupNetworkInterfaceOptionsModel := new(vpcv1.GetSecurityGroupNetworkInterfaceOptions)
				getSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetSecurityGroupNetworkInterface with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupNetworkInterfaceOptions model
				getSecurityGroupNetworkInterfaceOptionsModel := new(vpcv1.GetSecurityGroupNetworkInterfaceOptions)
				getSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSecurityGroupNetworkInterfaceOptions model with no property values
				getSecurityGroupNetworkInterfaceOptionsModelNew := new(vpcv1.GetSecurityGroupNetworkInterfaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSecurityGroupNetworkInterfaceBinding(createSecurityGroupNetworkInterfaceBindingOptions *CreateSecurityGroupNetworkInterfaceBindingOptions) - Operation response error`, func() {
		version := "testString"
		createSecurityGroupNetworkInterfaceBindingPath := "/security_groups/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createSecurityGroupNetworkInterfaceBindingPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSecurityGroupNetworkInterfaceBinding with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CreateSecurityGroupNetworkInterfaceBindingOptions model
				createSecurityGroupNetworkInterfaceBindingOptionsModel := new(vpcv1.CreateSecurityGroupNetworkInterfaceBindingOptions)
				createSecurityGroupNetworkInterfaceBindingOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupNetworkInterfaceBindingOptionsModel.ID = core.StringPtr("testString")
				createSecurityGroupNetworkInterfaceBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateSecurityGroupNetworkInterfaceBinding(createSecurityGroupNetworkInterfaceBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateSecurityGroupNetworkInterfaceBinding(createSecurityGroupNetworkInterfaceBindingOptions *CreateSecurityGroupNetworkInterfaceBindingOptions)`, func() {
		version := "testString"
		createSecurityGroupNetworkInterfaceBindingPath := "/security_groups/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createSecurityGroupNetworkInterfaceBindingPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "name": "my-network-interface", "allow_ip_spoofing": true, "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}`)
				}))
			})
			It(`Invoke CreateSecurityGroupNetworkInterfaceBinding successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateSecurityGroupNetworkInterfaceBinding(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateSecurityGroupNetworkInterfaceBindingOptions model
				createSecurityGroupNetworkInterfaceBindingOptionsModel := new(vpcv1.CreateSecurityGroupNetworkInterfaceBindingOptions)
				createSecurityGroupNetworkInterfaceBindingOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupNetworkInterfaceBindingOptionsModel.ID = core.StringPtr("testString")
				createSecurityGroupNetworkInterfaceBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateSecurityGroupNetworkInterfaceBinding(createSecurityGroupNetworkInterfaceBindingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateSecurityGroupNetworkInterfaceBinding with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CreateSecurityGroupNetworkInterfaceBindingOptions model
				createSecurityGroupNetworkInterfaceBindingOptionsModel := new(vpcv1.CreateSecurityGroupNetworkInterfaceBindingOptions)
				createSecurityGroupNetworkInterfaceBindingOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupNetworkInterfaceBindingOptionsModel.ID = core.StringPtr("testString")
				createSecurityGroupNetworkInterfaceBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateSecurityGroupNetworkInterfaceBinding(createSecurityGroupNetworkInterfaceBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateSecurityGroupNetworkInterfaceBindingOptions model with no property values
				createSecurityGroupNetworkInterfaceBindingOptionsModelNew := new(vpcv1.CreateSecurityGroupNetworkInterfaceBindingOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateSecurityGroupNetworkInterfaceBinding(createSecurityGroupNetworkInterfaceBindingOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSecurityGroupRules(listSecurityGroupRulesOptions *ListSecurityGroupRulesOptions) - Operation response error`, func() {
		version := "testString"
		listSecurityGroupRulesPath := "/security_groups/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listSecurityGroupRulesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSecurityGroupRules with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupRulesOptions model
				listSecurityGroupRulesOptionsModel := new(vpcv1.ListSecurityGroupRulesOptions)
				listSecurityGroupRulesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListSecurityGroupRules(listSecurityGroupRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListSecurityGroupRules(listSecurityGroupRulesOptions *ListSecurityGroupRulesOptions)`, func() {
		version := "testString"
		listSecurityGroupRulesPath := "/security_groups/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listSecurityGroupRulesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}]}`)
				}))
			})
			It(`Invoke ListSecurityGroupRules successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListSecurityGroupRules(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSecurityGroupRulesOptions model
				listSecurityGroupRulesOptionsModel := new(vpcv1.ListSecurityGroupRulesOptions)
				listSecurityGroupRulesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListSecurityGroupRules(listSecurityGroupRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListSecurityGroupRules with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupRulesOptions model
				listSecurityGroupRulesOptionsModel := new(vpcv1.ListSecurityGroupRulesOptions)
				listSecurityGroupRulesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListSecurityGroupRules(listSecurityGroupRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListSecurityGroupRulesOptions model with no property values
				listSecurityGroupRulesOptionsModelNew := new(vpcv1.ListSecurityGroupRulesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListSecurityGroupRules(listSecurityGroupRulesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSecurityGroupRule(createSecurityGroupRuleOptions *CreateSecurityGroupRuleOptions) - Operation response error`, func() {
		version := "testString"
		createSecurityGroupRulePath := "/security_groups/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createSecurityGroupRulePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSecurityGroupRule with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP model
				securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP)
				securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP)
				securityGroupRulePrototypeModel.ID = core.StringPtr("6f2a6efe-21e2-401c-b237-620aa26ba16a")
				securityGroupRulePrototypeModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a")
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IpVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePrototypeModel.Remote = securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel
				securityGroupRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePrototypeModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the CreateSecurityGroupRuleOptions model
				createSecurityGroupRuleOptionsModel := new(vpcv1.CreateSecurityGroupRuleOptions)
				createSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupRuleOptionsModel.SecurityGroupRulePrototype = securityGroupRulePrototypeModel
				createSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateSecurityGroupRule(createSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateSecurityGroupRule(createSecurityGroupRuleOptions *CreateSecurityGroupRuleOptions)`, func() {
		version := "testString"
		createSecurityGroupRulePath := "/security_groups/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createSecurityGroupRulePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}`)
				}))
			})
			It(`Invoke CreateSecurityGroupRule successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateSecurityGroupRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP model
				securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP)
				securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP)
				securityGroupRulePrototypeModel.ID = core.StringPtr("6f2a6efe-21e2-401c-b237-620aa26ba16a")
				securityGroupRulePrototypeModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a")
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IpVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePrototypeModel.Remote = securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel
				securityGroupRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePrototypeModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the CreateSecurityGroupRuleOptions model
				createSecurityGroupRuleOptionsModel := new(vpcv1.CreateSecurityGroupRuleOptions)
				createSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupRuleOptionsModel.SecurityGroupRulePrototype = securityGroupRulePrototypeModel
				createSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateSecurityGroupRule(createSecurityGroupRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateSecurityGroupRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP model
				securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP)
				securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP)
				securityGroupRulePrototypeModel.ID = core.StringPtr("6f2a6efe-21e2-401c-b237-620aa26ba16a")
				securityGroupRulePrototypeModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a")
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IpVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePrototypeModel.Remote = securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel
				securityGroupRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePrototypeModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the CreateSecurityGroupRuleOptions model
				createSecurityGroupRuleOptionsModel := new(vpcv1.CreateSecurityGroupRuleOptions)
				createSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupRuleOptionsModel.SecurityGroupRulePrototype = securityGroupRulePrototypeModel
				createSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateSecurityGroupRule(createSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateSecurityGroupRuleOptions model with no property values
				createSecurityGroupRuleOptionsModelNew := new(vpcv1.CreateSecurityGroupRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateSecurityGroupRule(createSecurityGroupRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteSecurityGroupRule(deleteSecurityGroupRuleOptions *DeleteSecurityGroupRuleOptions)`, func() {
		version := "testString"
		deleteSecurityGroupRulePath := "/security_groups/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteSecurityGroupRulePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteSecurityGroupRule successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteSecurityGroupRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteSecurityGroupRuleOptions model
				deleteSecurityGroupRuleOptionsModel := new(vpcv1.DeleteSecurityGroupRuleOptions)
				deleteSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				deleteSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				deleteSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteSecurityGroupRule(deleteSecurityGroupRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteSecurityGroupRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteSecurityGroupRuleOptions model
				deleteSecurityGroupRuleOptionsModel := new(vpcv1.DeleteSecurityGroupRuleOptions)
				deleteSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				deleteSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				deleteSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteSecurityGroupRule(deleteSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteSecurityGroupRuleOptions model with no property values
				deleteSecurityGroupRuleOptionsModelNew := new(vpcv1.DeleteSecurityGroupRuleOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteSecurityGroupRule(deleteSecurityGroupRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSecurityGroupRule(getSecurityGroupRuleOptions *GetSecurityGroupRuleOptions) - Operation response error`, func() {
		version := "testString"
		getSecurityGroupRulePath := "/security_groups/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSecurityGroupRulePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSecurityGroupRule with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupRuleOptions model
				getSecurityGroupRuleOptionsModel := new(vpcv1.GetSecurityGroupRuleOptions)
				getSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetSecurityGroupRule(getSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSecurityGroupRule(getSecurityGroupRuleOptions *GetSecurityGroupRuleOptions)`, func() {
		version := "testString"
		getSecurityGroupRulePath := "/security_groups/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSecurityGroupRulePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}`)
				}))
			})
			It(`Invoke GetSecurityGroupRule successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetSecurityGroupRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSecurityGroupRuleOptions model
				getSecurityGroupRuleOptionsModel := new(vpcv1.GetSecurityGroupRuleOptions)
				getSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetSecurityGroupRule(getSecurityGroupRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetSecurityGroupRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupRuleOptions model
				getSecurityGroupRuleOptionsModel := new(vpcv1.GetSecurityGroupRuleOptions)
				getSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetSecurityGroupRule(getSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSecurityGroupRuleOptions model with no property values
				getSecurityGroupRuleOptionsModelNew := new(vpcv1.GetSecurityGroupRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetSecurityGroupRule(getSecurityGroupRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSecurityGroupRule(updateSecurityGroupRuleOptions *UpdateSecurityGroupRuleOptions) - Operation response error`, func() {
		version := "testString"
		updateSecurityGroupRulePath := "/security_groups/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateSecurityGroupRulePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateSecurityGroupRule with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupRulePatchRemoteIP model
				securityGroupRulePatchRemoteModel := new(vpcv1.SecurityGroupRulePatchRemoteIP)
				securityGroupRulePatchRemoteModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the UpdateSecurityGroupRuleOptions model
				updateSecurityGroupRuleOptionsModel := new(vpcv1.UpdateSecurityGroupRuleOptions)
				updateSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.Remote = securityGroupRulePatchRemoteModel
				updateSecurityGroupRuleOptionsModel.Direction = core.StringPtr("inbound")
				updateSecurityGroupRuleOptionsModel.IpVersion = core.StringPtr("ipv4")
				updateSecurityGroupRuleOptionsModel.Code = core.Int64Ptr(int64(0))
				updateSecurityGroupRuleOptionsModel.PortMax = core.Int64Ptr(int64(22))
				updateSecurityGroupRuleOptionsModel.PortMin = core.Int64Ptr(int64(22))
				updateSecurityGroupRuleOptionsModel.Type = core.Int64Ptr(int64(8))
				updateSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateSecurityGroupRule(updateSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateSecurityGroupRule(updateSecurityGroupRuleOptions *UpdateSecurityGroupRuleOptions)`, func() {
		version := "testString"
		updateSecurityGroupRulePath := "/security_groups/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateSecurityGroupRulePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}`)
				}))
			})
			It(`Invoke UpdateSecurityGroupRule successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateSecurityGroupRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the SecurityGroupRulePatchRemoteIP model
				securityGroupRulePatchRemoteModel := new(vpcv1.SecurityGroupRulePatchRemoteIP)
				securityGroupRulePatchRemoteModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the UpdateSecurityGroupRuleOptions model
				updateSecurityGroupRuleOptionsModel := new(vpcv1.UpdateSecurityGroupRuleOptions)
				updateSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.Remote = securityGroupRulePatchRemoteModel
				updateSecurityGroupRuleOptionsModel.Direction = core.StringPtr("inbound")
				updateSecurityGroupRuleOptionsModel.IpVersion = core.StringPtr("ipv4")
				updateSecurityGroupRuleOptionsModel.Code = core.Int64Ptr(int64(0))
				updateSecurityGroupRuleOptionsModel.PortMax = core.Int64Ptr(int64(22))
				updateSecurityGroupRuleOptionsModel.PortMin = core.Int64Ptr(int64(22))
				updateSecurityGroupRuleOptionsModel.Type = core.Int64Ptr(int64(8))
				updateSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateSecurityGroupRule(updateSecurityGroupRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateSecurityGroupRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupRulePatchRemoteIP model
				securityGroupRulePatchRemoteModel := new(vpcv1.SecurityGroupRulePatchRemoteIP)
				securityGroupRulePatchRemoteModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the UpdateSecurityGroupRuleOptions model
				updateSecurityGroupRuleOptionsModel := new(vpcv1.UpdateSecurityGroupRuleOptions)
				updateSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.Remote = securityGroupRulePatchRemoteModel
				updateSecurityGroupRuleOptionsModel.Direction = core.StringPtr("inbound")
				updateSecurityGroupRuleOptionsModel.IpVersion = core.StringPtr("ipv4")
				updateSecurityGroupRuleOptionsModel.Code = core.Int64Ptr(int64(0))
				updateSecurityGroupRuleOptionsModel.PortMax = core.Int64Ptr(int64(22))
				updateSecurityGroupRuleOptionsModel.PortMin = core.Int64Ptr(int64(22))
				updateSecurityGroupRuleOptionsModel.Type = core.Int64Ptr(int64(8))
				updateSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateSecurityGroupRule(updateSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateSecurityGroupRuleOptions model with no property values
				updateSecurityGroupRuleOptionsModelNew := new(vpcv1.UpdateSecurityGroupRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateSecurityGroupRule(updateSecurityGroupRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "https://vpcv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListSubnets(listSubnetsOptions *ListSubnetsOptions) - Operation response error`, func() {
		version := "testString"
		listSubnetsPath := "/subnets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listSubnetsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["routing_table.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["routing_table.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSubnets with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListSubnetsOptions model
				listSubnetsOptionsModel := new(vpcv1.ListSubnetsOptions)
				listSubnetsOptionsModel.Start = core.StringPtr("testString")
				listSubnetsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listSubnetsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listSubnetsOptionsModel.RoutingTableID = core.StringPtr("testString")
				listSubnetsOptionsModel.RoutingTableName = core.StringPtr("testString")
				listSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListSubnets(listSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListSubnets(listSubnetsOptions *ListSubnetsOptions)`, func() {
		version := "testString"
		listSubnetsPath := "/subnets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listSubnetsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["routing_table.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["routing_table.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet", "routing_table": {"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "name": "my-routing-table-1", "resource_type": "routing_table"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "ip_version": "both", "available_ipv4_address_count": 15, "network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "total_ipv4_address_count": 256, "created_at": "2019-01-01T12:00:00", "ipv4_cidr_block": "10.0.0.0/24", "public_gateway": {"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "resource_type": "public_gateway", "name": "my-public-gateway"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListSubnets successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListSubnets(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSubnetsOptions model
				listSubnetsOptionsModel := new(vpcv1.ListSubnetsOptions)
				listSubnetsOptionsModel.Start = core.StringPtr("testString")
				listSubnetsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listSubnetsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listSubnetsOptionsModel.RoutingTableID = core.StringPtr("testString")
				listSubnetsOptionsModel.RoutingTableName = core.StringPtr("testString")
				listSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListSubnets(listSubnetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListSubnets with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListSubnetsOptions model
				listSubnetsOptionsModel := new(vpcv1.ListSubnetsOptions)
				listSubnetsOptionsModel.Start = core.StringPtr("testString")
				listSubnetsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listSubnetsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listSubnetsOptionsModel.RoutingTableID = core.StringPtr("testString")
				listSubnetsOptionsModel.RoutingTableName = core.StringPtr("testString")
				listSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListSubnets(listSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSubnet(createSubnetOptions *CreateSubnetOptions) - Operation response error`, func() {
		version := "testString"
		createSubnetPath := "/subnets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createSubnetPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSubnet with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkAclIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkAclIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the SubnetPrototypeSubnetByTotalCount model
				subnetPrototypeModel := new(vpcv1.SubnetPrototypeSubnetByTotalCount)
				subnetPrototypeModel.Name = core.StringPtr("my-subnet")
				subnetPrototypeModel.NetworkAcl = networkAclIdentityModel
				subnetPrototypeModel.PublicGateway = publicGatewayIdentityModel
				subnetPrototypeModel.RoutingTable = routingTableIdentityModel
				subnetPrototypeModel.IpVersion = core.StringPtr("both")
				subnetPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				subnetPrototypeModel.Vpc = vpcIdentityModel
				subnetPrototypeModel.TotalIpv4AddressCount = core.Int64Ptr(int64(256))
				subnetPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateSubnetOptions model
				createSubnetOptionsModel := new(vpcv1.CreateSubnetOptions)
				createSubnetOptionsModel.SubnetPrototype = subnetPrototypeModel
				createSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateSubnet(createSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateSubnet(createSubnetOptions *CreateSubnetOptions)`, func() {
		version := "testString"
		createSubnetPath := "/subnets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createSubnetPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet", "routing_table": {"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "name": "my-routing-table-1", "resource_type": "routing_table"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "ip_version": "both", "available_ipv4_address_count": 15, "network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "total_ipv4_address_count": 256, "created_at": "2019-01-01T12:00:00", "ipv4_cidr_block": "10.0.0.0/24", "public_gateway": {"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "resource_type": "public_gateway", "name": "my-public-gateway"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke CreateSubnet successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateSubnet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkAclIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkAclIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the SubnetPrototypeSubnetByTotalCount model
				subnetPrototypeModel := new(vpcv1.SubnetPrototypeSubnetByTotalCount)
				subnetPrototypeModel.Name = core.StringPtr("my-subnet")
				subnetPrototypeModel.NetworkAcl = networkAclIdentityModel
				subnetPrototypeModel.PublicGateway = publicGatewayIdentityModel
				subnetPrototypeModel.RoutingTable = routingTableIdentityModel
				subnetPrototypeModel.IpVersion = core.StringPtr("both")
				subnetPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				subnetPrototypeModel.Vpc = vpcIdentityModel
				subnetPrototypeModel.TotalIpv4AddressCount = core.Int64Ptr(int64(256))
				subnetPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateSubnetOptions model
				createSubnetOptionsModel := new(vpcv1.CreateSubnetOptions)
				createSubnetOptionsModel.SubnetPrototype = subnetPrototypeModel
				createSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateSubnet(createSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateSubnet with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkAclIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkAclIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the SubnetPrototypeSubnetByTotalCount model
				subnetPrototypeModel := new(vpcv1.SubnetPrototypeSubnetByTotalCount)
				subnetPrototypeModel.Name = core.StringPtr("my-subnet")
				subnetPrototypeModel.NetworkAcl = networkAclIdentityModel
				subnetPrototypeModel.PublicGateway = publicGatewayIdentityModel
				subnetPrototypeModel.RoutingTable = routingTableIdentityModel
				subnetPrototypeModel.IpVersion = core.StringPtr("both")
				subnetPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				subnetPrototypeModel.Vpc = vpcIdentityModel
				subnetPrototypeModel.TotalIpv4AddressCount = core.Int64Ptr(int64(256))
				subnetPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateSubnetOptions model
				createSubnetOptionsModel := new(vpcv1.CreateSubnetOptions)
				createSubnetOptionsModel.SubnetPrototype = subnetPrototypeModel
				createSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateSubnet(createSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateSubnetOptions model with no property values
				createSubnetOptionsModelNew := new(vpcv1.CreateSubnetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateSubnet(createSubnetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteSubnet(deleteSubnetOptions *DeleteSubnetOptions)`, func() {
		version := "testString"
		deleteSubnetPath := "/subnets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteSubnetPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteSubnet successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteSubnet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteSubnetOptions model
				deleteSubnetOptionsModel := new(vpcv1.DeleteSubnetOptions)
				deleteSubnetOptionsModel.ID = core.StringPtr("testString")
				deleteSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteSubnet(deleteSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteSubnet with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteSubnetOptions model
				deleteSubnetOptionsModel := new(vpcv1.DeleteSubnetOptions)
				deleteSubnetOptionsModel.ID = core.StringPtr("testString")
				deleteSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteSubnet(deleteSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteSubnetOptions model with no property values
				deleteSubnetOptionsModelNew := new(vpcv1.DeleteSubnetOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteSubnet(deleteSubnetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubnet(getSubnetOptions *GetSubnetOptions) - Operation response error`, func() {
		version := "testString"
		getSubnetPath := "/subnets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSubnetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSubnet with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSubnetOptions model
				getSubnetOptionsModel := new(vpcv1.GetSubnetOptions)
				getSubnetOptionsModel.ID = core.StringPtr("testString")
				getSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetSubnet(getSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSubnet(getSubnetOptions *GetSubnetOptions)`, func() {
		version := "testString"
		getSubnetPath := "/subnets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSubnetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet", "routing_table": {"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "name": "my-routing-table-1", "resource_type": "routing_table"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "ip_version": "both", "available_ipv4_address_count": 15, "network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "total_ipv4_address_count": 256, "created_at": "2019-01-01T12:00:00", "ipv4_cidr_block": "10.0.0.0/24", "public_gateway": {"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "resource_type": "public_gateway", "name": "my-public-gateway"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke GetSubnet successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetSubnet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSubnetOptions model
				getSubnetOptionsModel := new(vpcv1.GetSubnetOptions)
				getSubnetOptionsModel.ID = core.StringPtr("testString")
				getSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetSubnet(getSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetSubnet with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSubnetOptions model
				getSubnetOptionsModel := new(vpcv1.GetSubnetOptions)
				getSubnetOptionsModel.ID = core.StringPtr("testString")
				getSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetSubnet(getSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSubnetOptions model with no property values
				getSubnetOptionsModelNew := new(vpcv1.GetSubnetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetSubnet(getSubnetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSubnet(updateSubnetOptions *UpdateSubnetOptions) - Operation response error`, func() {
		version := "testString"
		updateSubnetPath := "/subnets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateSubnetPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateSubnet with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkAclIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkAclIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")

				// Construct an instance of the UpdateSubnetOptions model
				updateSubnetOptionsModel := new(vpcv1.UpdateSubnetOptions)
				updateSubnetOptionsModel.ID = core.StringPtr("testString")
				updateSubnetOptionsModel.Name = core.StringPtr("my-subnet")
				updateSubnetOptionsModel.NetworkAcl = networkAclIdentityModel
				updateSubnetOptionsModel.PublicGateway = publicGatewayIdentityModel
				updateSubnetOptionsModel.RoutingTable = routingTableIdentityModel
				updateSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateSubnet(updateSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateSubnet(updateSubnetOptions *UpdateSubnetOptions)`, func() {
		version := "testString"
		updateSubnetPath := "/subnets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateSubnetPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet", "routing_table": {"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "name": "my-routing-table-1", "resource_type": "routing_table"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "ip_version": "both", "available_ipv4_address_count": 15, "network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "total_ipv4_address_count": 256, "created_at": "2019-01-01T12:00:00", "ipv4_cidr_block": "10.0.0.0/24", "public_gateway": {"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "resource_type": "public_gateway", "name": "my-public-gateway"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateSubnet successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateSubnet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkAclIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkAclIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")

				// Construct an instance of the UpdateSubnetOptions model
				updateSubnetOptionsModel := new(vpcv1.UpdateSubnetOptions)
				updateSubnetOptionsModel.ID = core.StringPtr("testString")
				updateSubnetOptionsModel.Name = core.StringPtr("my-subnet")
				updateSubnetOptionsModel.NetworkAcl = networkAclIdentityModel
				updateSubnetOptionsModel.PublicGateway = publicGatewayIdentityModel
				updateSubnetOptionsModel.RoutingTable = routingTableIdentityModel
				updateSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateSubnet(updateSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateSubnet with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkAclIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkAclIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")

				// Construct an instance of the UpdateSubnetOptions model
				updateSubnetOptionsModel := new(vpcv1.UpdateSubnetOptions)
				updateSubnetOptionsModel.ID = core.StringPtr("testString")
				updateSubnetOptionsModel.Name = core.StringPtr("my-subnet")
				updateSubnetOptionsModel.NetworkAcl = networkAclIdentityModel
				updateSubnetOptionsModel.PublicGateway = publicGatewayIdentityModel
				updateSubnetOptionsModel.RoutingTable = routingTableIdentityModel
				updateSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateSubnet(updateSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateSubnetOptions model with no property values
				updateSubnetOptionsModelNew := new(vpcv1.UpdateSubnetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateSubnet(updateSubnetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubnetNetworkAcl(getSubnetNetworkAclOptions *GetSubnetNetworkAclOptions) - Operation response error`, func() {
		version := "testString"
		getSubnetNetworkAclPath := "/subnets/testString/network_acl"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSubnetNetworkAclPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSubnetNetworkAcl with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSubnetNetworkAclOptions model
				getSubnetNetworkAclOptionsModel := new(vpcv1.GetSubnetNetworkAclOptions)
				getSubnetNetworkAclOptionsModel.ID = core.StringPtr("testString")
				getSubnetNetworkAclOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetSubnetNetworkAcl(getSubnetNetworkAclOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSubnetNetworkAcl(getSubnetNetworkAclOptions *GetSubnetNetworkAclOptions)`, func() {
		version := "testString"
		getSubnetNetworkAclPath := "/subnets/testString/network_acl"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSubnetNetworkAclPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetSubnetNetworkAcl successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetSubnetNetworkAcl(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSubnetNetworkAclOptions model
				getSubnetNetworkAclOptionsModel := new(vpcv1.GetSubnetNetworkAclOptions)
				getSubnetNetworkAclOptionsModel.ID = core.StringPtr("testString")
				getSubnetNetworkAclOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetSubnetNetworkAcl(getSubnetNetworkAclOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetSubnetNetworkAcl with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSubnetNetworkAclOptions model
				getSubnetNetworkAclOptionsModel := new(vpcv1.GetSubnetNetworkAclOptions)
				getSubnetNetworkAclOptionsModel.ID = core.StringPtr("testString")
				getSubnetNetworkAclOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetSubnetNetworkAcl(getSubnetNetworkAclOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSubnetNetworkAclOptions model with no property values
				getSubnetNetworkAclOptionsModelNew := new(vpcv1.GetSubnetNetworkAclOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetSubnetNetworkAcl(getSubnetNetworkAclOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetSubnetNetworkAclBinding(setSubnetNetworkAclBindingOptions *SetSubnetNetworkAclBindingOptions) - Operation response error`, func() {
		version := "testString"
		setSubnetNetworkAclBindingPath := "/subnets/testString/network_acl"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(setSubnetNetworkAclBindingPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke SetSubnetNetworkAclBinding with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkAclIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkAclIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the SetSubnetNetworkAclBindingOptions model
				setSubnetNetworkAclBindingOptionsModel := new(vpcv1.SetSubnetNetworkAclBindingOptions)
				setSubnetNetworkAclBindingOptionsModel.ID = core.StringPtr("testString")
				setSubnetNetworkAclBindingOptionsModel.NetworkACLIdentity = networkAclIdentityModel
				setSubnetNetworkAclBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.SetSubnetNetworkAclBinding(setSubnetNetworkAclBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`SetSubnetNetworkAclBinding(setSubnetNetworkAclBindingOptions *SetSubnetNetworkAclBindingOptions)`, func() {
		version := "testString"
		setSubnetNetworkAclBindingPath := "/subnets/testString/network_acl"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(setSubnetNetworkAclBindingPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke SetSubnetNetworkAclBinding successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.SetSubnetNetworkAclBinding(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkAclIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkAclIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the SetSubnetNetworkAclBindingOptions model
				setSubnetNetworkAclBindingOptionsModel := new(vpcv1.SetSubnetNetworkAclBindingOptions)
				setSubnetNetworkAclBindingOptionsModel.ID = core.StringPtr("testString")
				setSubnetNetworkAclBindingOptionsModel.NetworkACLIdentity = networkAclIdentityModel
				setSubnetNetworkAclBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.SetSubnetNetworkAclBinding(setSubnetNetworkAclBindingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke SetSubnetNetworkAclBinding with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkAclIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkAclIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the SetSubnetNetworkAclBindingOptions model
				setSubnetNetworkAclBindingOptionsModel := new(vpcv1.SetSubnetNetworkAclBindingOptions)
				setSubnetNetworkAclBindingOptionsModel.ID = core.StringPtr("testString")
				setSubnetNetworkAclBindingOptionsModel.NetworkACLIdentity = networkAclIdentityModel
				setSubnetNetworkAclBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.SetSubnetNetworkAclBinding(setSubnetNetworkAclBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the SetSubnetNetworkAclBindingOptions model with no property values
				setSubnetNetworkAclBindingOptionsModelNew := new(vpcv1.SetSubnetNetworkAclBindingOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.SetSubnetNetworkAclBinding(setSubnetNetworkAclBindingOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteSubnetPublicGatewayBinding(deleteSubnetPublicGatewayBindingOptions *DeleteSubnetPublicGatewayBindingOptions)`, func() {
		version := "testString"
		deleteSubnetPublicGatewayBindingPath := "/subnets/testString/public_gateway"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteSubnetPublicGatewayBindingPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteSubnetPublicGatewayBinding successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteSubnetPublicGatewayBinding(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteSubnetPublicGatewayBindingOptions model
				deleteSubnetPublicGatewayBindingOptionsModel := new(vpcv1.DeleteSubnetPublicGatewayBindingOptions)
				deleteSubnetPublicGatewayBindingOptionsModel.ID = core.StringPtr("testString")
				deleteSubnetPublicGatewayBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteSubnetPublicGatewayBinding(deleteSubnetPublicGatewayBindingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteSubnetPublicGatewayBinding with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteSubnetPublicGatewayBindingOptions model
				deleteSubnetPublicGatewayBindingOptionsModel := new(vpcv1.DeleteSubnetPublicGatewayBindingOptions)
				deleteSubnetPublicGatewayBindingOptionsModel.ID = core.StringPtr("testString")
				deleteSubnetPublicGatewayBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteSubnetPublicGatewayBinding(deleteSubnetPublicGatewayBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteSubnetPublicGatewayBindingOptions model with no property values
				deleteSubnetPublicGatewayBindingOptionsModelNew := new(vpcv1.DeleteSubnetPublicGatewayBindingOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteSubnetPublicGatewayBinding(deleteSubnetPublicGatewayBindingOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubnetPublicGateway(getSubnetPublicGatewayOptions *GetSubnetPublicGatewayOptions) - Operation response error`, func() {
		version := "testString"
		getSubnetPublicGatewayPath := "/subnets/testString/public_gateway"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSubnetPublicGatewayPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSubnetPublicGateway with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSubnetPublicGatewayOptions model
				getSubnetPublicGatewayOptionsModel := new(vpcv1.GetSubnetPublicGatewayOptions)
				getSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetSubnetPublicGateway(getSubnetPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSubnetPublicGateway(getSubnetPublicGatewayOptions *GetSubnetPublicGatewayOptions)`, func() {
		version := "testString"
		getSubnetPublicGatewayPath := "/subnets/testString/public_gateway"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSubnetPublicGatewayPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "resource_type": "public_gateway", "name": "my-public-gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke GetSubnetPublicGateway successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetSubnetPublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSubnetPublicGatewayOptions model
				getSubnetPublicGatewayOptionsModel := new(vpcv1.GetSubnetPublicGatewayOptions)
				getSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetSubnetPublicGateway(getSubnetPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetSubnetPublicGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSubnetPublicGatewayOptions model
				getSubnetPublicGatewayOptionsModel := new(vpcv1.GetSubnetPublicGatewayOptions)
				getSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetSubnetPublicGateway(getSubnetPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSubnetPublicGatewayOptions model with no property values
				getSubnetPublicGatewayOptionsModelNew := new(vpcv1.GetSubnetPublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetSubnetPublicGateway(getSubnetPublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetSubnetPublicGatewayBinding(setSubnetPublicGatewayBindingOptions *SetSubnetPublicGatewayBindingOptions) - Operation response error`, func() {
		version := "testString"
		setSubnetPublicGatewayBindingPath := "/subnets/testString/public_gateway"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(setSubnetPublicGatewayBindingPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke SetSubnetPublicGatewayBinding with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the SetSubnetPublicGatewayBindingOptions model
				setSubnetPublicGatewayBindingOptionsModel := new(vpcv1.SetSubnetPublicGatewayBindingOptions)
				setSubnetPublicGatewayBindingOptionsModel.ID = core.StringPtr("testString")
				setSubnetPublicGatewayBindingOptionsModel.PublicGatewayIdentity = publicGatewayIdentityModel
				setSubnetPublicGatewayBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.SetSubnetPublicGatewayBinding(setSubnetPublicGatewayBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`SetSubnetPublicGatewayBinding(setSubnetPublicGatewayBindingOptions *SetSubnetPublicGatewayBindingOptions)`, func() {
		version := "testString"
		setSubnetPublicGatewayBindingPath := "/subnets/testString/public_gateway"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(setSubnetPublicGatewayBindingPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "resource_type": "public_gateway", "name": "my-public-gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke SetSubnetPublicGatewayBinding successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.SetSubnetPublicGatewayBinding(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the SetSubnetPublicGatewayBindingOptions model
				setSubnetPublicGatewayBindingOptionsModel := new(vpcv1.SetSubnetPublicGatewayBindingOptions)
				setSubnetPublicGatewayBindingOptionsModel.ID = core.StringPtr("testString")
				setSubnetPublicGatewayBindingOptionsModel.PublicGatewayIdentity = publicGatewayIdentityModel
				setSubnetPublicGatewayBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.SetSubnetPublicGatewayBinding(setSubnetPublicGatewayBindingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke SetSubnetPublicGatewayBinding with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the SetSubnetPublicGatewayBindingOptions model
				setSubnetPublicGatewayBindingOptionsModel := new(vpcv1.SetSubnetPublicGatewayBindingOptions)
				setSubnetPublicGatewayBindingOptionsModel.ID = core.StringPtr("testString")
				setSubnetPublicGatewayBindingOptionsModel.PublicGatewayIdentity = publicGatewayIdentityModel
				setSubnetPublicGatewayBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.SetSubnetPublicGatewayBinding(setSubnetPublicGatewayBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the SetSubnetPublicGatewayBindingOptions model with no property values
				setSubnetPublicGatewayBindingOptionsModelNew := new(vpcv1.SetSubnetPublicGatewayBindingOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.SetSubnetPublicGatewayBinding(setSubnetPublicGatewayBindingOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubnetRoutingTable(getSubnetRoutingTableOptions *GetSubnetRoutingTableOptions) - Operation response error`, func() {
		version := "testString"
		getSubnetRoutingTablePath := "/subnets/testString/routing_table"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSubnetRoutingTablePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSubnetRoutingTable with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSubnetRoutingTableOptions model
				getSubnetRoutingTableOptionsModel := new(vpcv1.GetSubnetRoutingTableOptions)
				getSubnetRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getSubnetRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetSubnetRoutingTable(getSubnetRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSubnetRoutingTable(getSubnetRoutingTableOptions *GetSubnetRoutingTableOptions)`, func() {
		version := "testString"
		getSubnetRoutingTablePath := "/subnets/testString/routing_table"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSubnetRoutingTablePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "name": "my-routing-table-2", "resource_type": "routing_table", "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "routes": [{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetSubnetRoutingTable successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetSubnetRoutingTable(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSubnetRoutingTableOptions model
				getSubnetRoutingTableOptionsModel := new(vpcv1.GetSubnetRoutingTableOptions)
				getSubnetRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getSubnetRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetSubnetRoutingTable(getSubnetRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetSubnetRoutingTable with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSubnetRoutingTableOptions model
				getSubnetRoutingTableOptionsModel := new(vpcv1.GetSubnetRoutingTableOptions)
				getSubnetRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getSubnetRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetSubnetRoutingTable(getSubnetRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSubnetRoutingTableOptions model with no property values
				getSubnetRoutingTableOptionsModelNew := new(vpcv1.GetSubnetRoutingTableOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetSubnetRoutingTable(getSubnetRoutingTableOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetSubnetRoutingTableBinding(setSubnetRoutingTableBindingOptions *SetSubnetRoutingTableBindingOptions) - Operation response error`, func() {
		version := "testString"
		setSubnetRoutingTableBindingPath := "/subnets/testString/routing_table"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(setSubnetRoutingTableBindingPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke SetSubnetRoutingTableBinding with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")

				// Construct an instance of the SetSubnetRoutingTableBindingOptions model
				setSubnetRoutingTableBindingOptionsModel := new(vpcv1.SetSubnetRoutingTableBindingOptions)
				setSubnetRoutingTableBindingOptionsModel.ID = core.StringPtr("testString")
				setSubnetRoutingTableBindingOptionsModel.RoutingTableIdentity = routingTableIdentityModel
				setSubnetRoutingTableBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.SetSubnetRoutingTableBinding(setSubnetRoutingTableBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`SetSubnetRoutingTableBinding(setSubnetRoutingTableBindingOptions *SetSubnetRoutingTableBindingOptions)`, func() {
		version := "testString"
		setSubnetRoutingTableBindingPath := "/subnets/testString/routing_table"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(setSubnetRoutingTableBindingPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "name": "my-routing-table-2", "resource_type": "routing_table", "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "routes": [{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke SetSubnetRoutingTableBinding successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.SetSubnetRoutingTableBinding(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")

				// Construct an instance of the SetSubnetRoutingTableBindingOptions model
				setSubnetRoutingTableBindingOptionsModel := new(vpcv1.SetSubnetRoutingTableBindingOptions)
				setSubnetRoutingTableBindingOptionsModel.ID = core.StringPtr("testString")
				setSubnetRoutingTableBindingOptionsModel.RoutingTableIdentity = routingTableIdentityModel
				setSubnetRoutingTableBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.SetSubnetRoutingTableBinding(setSubnetRoutingTableBindingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke SetSubnetRoutingTableBinding with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")

				// Construct an instance of the SetSubnetRoutingTableBindingOptions model
				setSubnetRoutingTableBindingOptionsModel := new(vpcv1.SetSubnetRoutingTableBindingOptions)
				setSubnetRoutingTableBindingOptionsModel.ID = core.StringPtr("testString")
				setSubnetRoutingTableBindingOptionsModel.RoutingTableIdentity = routingTableIdentityModel
				setSubnetRoutingTableBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.SetSubnetRoutingTableBinding(setSubnetRoutingTableBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the SetSubnetRoutingTableBindingOptions model with no property values
				setSubnetRoutingTableBindingOptionsModelNew := new(vpcv1.SetSubnetRoutingTableBindingOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.SetSubnetRoutingTableBinding(setSubnetRoutingTableBindingOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "https://vpcv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListVpcs(listVpcsOptions *ListVpcsOptions) - Operation response error`, func() {
		version := "testString"
		listVpcsPath := "/vpcs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpcsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					// TODO: Add check for classic_access query parameter

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVpcs with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpcsOptions model
				listVpcsOptionsModel := new(vpcv1.ListVpcsOptions)
				listVpcsOptionsModel.Start = core.StringPtr("testString")
				listVpcsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVpcsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVpcsOptionsModel.ClassicAccess = core.BoolPtr(true)
				listVpcsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVpcs(listVpcsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVpcs(listVpcsOptions *ListVpcsOptions)`, func() {
		version := "testString"
		listVpcsPath := "/vpcs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpcsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					// TODO: Add check for classic_access query parameter

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "vpcs": [{"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "default_network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_routing_table": {"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "name": "my-routing-table-1", "resource_type": "routing_table"}, "classic_access": false, "default_security_group": {"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}], "status": "available"}]}`)
				}))
			})
			It(`Invoke ListVpcs successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVpcs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVpcsOptions model
				listVpcsOptionsModel := new(vpcv1.ListVpcsOptions)
				listVpcsOptionsModel.Start = core.StringPtr("testString")
				listVpcsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVpcsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVpcsOptionsModel.ClassicAccess = core.BoolPtr(true)
				listVpcsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVpcs(listVpcsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVpcs with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpcsOptions model
				listVpcsOptionsModel := new(vpcv1.ListVpcsOptions)
				listVpcsOptionsModel.Start = core.StringPtr("testString")
				listVpcsOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVpcsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVpcsOptionsModel.ClassicAccess = core.BoolPtr(true)
				listVpcsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVpcs(listVpcsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVpc(createVpcOptions *CreateVpcOptions) - Operation response error`, func() {
		version := "testString"
		createVpcPath := "/vpcs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVpcPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVpc with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateVpcOptions model
				createVpcOptionsModel := new(vpcv1.CreateVpcOptions)
				createVpcOptionsModel.Name = core.StringPtr("my-vpc")
				createVpcOptionsModel.AddressPrefixManagement = core.StringPtr("manual")
				createVpcOptionsModel.ClassicAccess = core.BoolPtr(false)
				createVpcOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createVpcOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateVpc(createVpcOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateVpc(createVpcOptions *CreateVpcOptions)`, func() {
		version := "testString"
		createVpcPath := "/vpcs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVpcPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "default_network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_routing_table": {"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "name": "my-routing-table-1", "resource_type": "routing_table"}, "classic_access": false, "default_security_group": {"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}], "status": "available"}`)
				}))
			})
			It(`Invoke CreateVpc successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateVpc(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateVpcOptions model
				createVpcOptionsModel := new(vpcv1.CreateVpcOptions)
				createVpcOptionsModel.Name = core.StringPtr("my-vpc")
				createVpcOptionsModel.AddressPrefixManagement = core.StringPtr("manual")
				createVpcOptionsModel.ClassicAccess = core.BoolPtr(false)
				createVpcOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createVpcOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateVpc(createVpcOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateVpc with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateVpcOptions model
				createVpcOptionsModel := new(vpcv1.CreateVpcOptions)
				createVpcOptionsModel.Name = core.StringPtr("my-vpc")
				createVpcOptionsModel.AddressPrefixManagement = core.StringPtr("manual")
				createVpcOptionsModel.ClassicAccess = core.BoolPtr(false)
				createVpcOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createVpcOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateVpc(createVpcOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteVpc(deleteVpcOptions *DeleteVpcOptions)`, func() {
		version := "testString"
		deleteVpcPath := "/vpcs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteVpcPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVpc successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteVpc(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVpcOptions model
				deleteVpcOptionsModel := new(vpcv1.DeleteVpcOptions)
				deleteVpcOptionsModel.ID = core.StringPtr("testString")
				deleteVpcOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteVpc(deleteVpcOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVpc with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteVpcOptions model
				deleteVpcOptionsModel := new(vpcv1.DeleteVpcOptions)
				deleteVpcOptionsModel.ID = core.StringPtr("testString")
				deleteVpcOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteVpc(deleteVpcOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVpcOptions model with no property values
				deleteVpcOptionsModelNew := new(vpcv1.DeleteVpcOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteVpc(deleteVpcOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVpc(getVpcOptions *GetVpcOptions) - Operation response error`, func() {
		version := "testString"
		getVpcPath := "/vpcs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpcPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVpc with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpcOptions model
				getVpcOptionsModel := new(vpcv1.GetVpcOptions)
				getVpcOptionsModel.ID = core.StringPtr("testString")
				getVpcOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVpc(getVpcOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVpc(getVpcOptions *GetVpcOptions)`, func() {
		version := "testString"
		getVpcPath := "/vpcs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpcPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "default_network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_routing_table": {"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "name": "my-routing-table-1", "resource_type": "routing_table"}, "classic_access": false, "default_security_group": {"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}], "status": "available"}`)
				}))
			})
			It(`Invoke GetVpc successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVpc(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVpcOptions model
				getVpcOptionsModel := new(vpcv1.GetVpcOptions)
				getVpcOptionsModel.ID = core.StringPtr("testString")
				getVpcOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVpc(getVpcOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVpc with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpcOptions model
				getVpcOptionsModel := new(vpcv1.GetVpcOptions)
				getVpcOptionsModel.ID = core.StringPtr("testString")
				getVpcOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVpc(getVpcOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVpcOptions model with no property values
				getVpcOptionsModelNew := new(vpcv1.GetVpcOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVpc(getVpcOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVpc(updateVpcOptions *UpdateVpcOptions) - Operation response error`, func() {
		version := "testString"
		updateVpcPath := "/vpcs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVpcPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVpc with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVpcOptions model
				updateVpcOptionsModel := new(vpcv1.UpdateVpcOptions)
				updateVpcOptionsModel.ID = core.StringPtr("testString")
				updateVpcOptionsModel.Name = core.StringPtr("my-vpc")
				updateVpcOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateVpc(updateVpcOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateVpc(updateVpcOptions *UpdateVpcOptions)`, func() {
		version := "testString"
		updateVpcPath := "/vpcs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVpcPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "default_network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_routing_table": {"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "name": "my-routing-table-1", "resource_type": "routing_table"}, "classic_access": false, "default_security_group": {"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}], "status": "available"}`)
				}))
			})
			It(`Invoke UpdateVpc successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateVpc(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateVpcOptions model
				updateVpcOptionsModel := new(vpcv1.UpdateVpcOptions)
				updateVpcOptionsModel.ID = core.StringPtr("testString")
				updateVpcOptionsModel.Name = core.StringPtr("my-vpc")
				updateVpcOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateVpc(updateVpcOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateVpc with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVpcOptions model
				updateVpcOptionsModel := new(vpcv1.UpdateVpcOptions)
				updateVpcOptionsModel.ID = core.StringPtr("testString")
				updateVpcOptionsModel.Name = core.StringPtr("my-vpc")
				updateVpcOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateVpc(updateVpcOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVpcOptions model with no property values
				updateVpcOptionsModelNew := new(vpcv1.UpdateVpcOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateVpc(updateVpcOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVpcDefaultNetworkAcl(getVpcDefaultNetworkAclOptions *GetVpcDefaultNetworkAclOptions) - Operation response error`, func() {
		version := "testString"
		getVpcDefaultNetworkAclPath := "/vpcs/testString/default_network_acl"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpcDefaultNetworkAclPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVpcDefaultNetworkAcl with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpcDefaultNetworkAclOptions model
				getVpcDefaultNetworkAclOptionsModel := new(vpcv1.GetVpcDefaultNetworkAclOptions)
				getVpcDefaultNetworkAclOptionsModel.ID = core.StringPtr("testString")
				getVpcDefaultNetworkAclOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVpcDefaultNetworkAcl(getVpcDefaultNetworkAclOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVpcDefaultNetworkAcl(getVpcDefaultNetworkAclOptions *GetVpcDefaultNetworkAclOptions)`, func() {
		version := "testString"
		getVpcDefaultNetworkAclPath := "/vpcs/testString/default_network_acl"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpcDefaultNetworkAclPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "mnemonic-ersatz-eatery-malaise", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetVpcDefaultNetworkAcl successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVpcDefaultNetworkAcl(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVpcDefaultNetworkAclOptions model
				getVpcDefaultNetworkAclOptionsModel := new(vpcv1.GetVpcDefaultNetworkAclOptions)
				getVpcDefaultNetworkAclOptionsModel.ID = core.StringPtr("testString")
				getVpcDefaultNetworkAclOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVpcDefaultNetworkAcl(getVpcDefaultNetworkAclOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVpcDefaultNetworkAcl with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpcDefaultNetworkAclOptions model
				getVpcDefaultNetworkAclOptionsModel := new(vpcv1.GetVpcDefaultNetworkAclOptions)
				getVpcDefaultNetworkAclOptionsModel.ID = core.StringPtr("testString")
				getVpcDefaultNetworkAclOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVpcDefaultNetworkAcl(getVpcDefaultNetworkAclOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVpcDefaultNetworkAclOptions model with no property values
				getVpcDefaultNetworkAclOptionsModelNew := new(vpcv1.GetVpcDefaultNetworkAclOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVpcDefaultNetworkAcl(getVpcDefaultNetworkAclOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVpcDefaultRoutingTable(getVpcDefaultRoutingTableOptions *GetVpcDefaultRoutingTableOptions) - Operation response error`, func() {
		version := "testString"
		getVpcDefaultRoutingTablePath := "/vpcs/testString/default_routing_table"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpcDefaultRoutingTablePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVpcDefaultRoutingTable with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpcDefaultRoutingTableOptions model
				getVpcDefaultRoutingTableOptionsModel := new(vpcv1.GetVpcDefaultRoutingTableOptions)
				getVpcDefaultRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getVpcDefaultRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVpcDefaultRoutingTable(getVpcDefaultRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVpcDefaultRoutingTable(getVpcDefaultRoutingTableOptions *GetVpcDefaultRoutingTableOptions)`, func() {
		version := "testString"
		getVpcDefaultRoutingTablePath := "/vpcs/testString/default_routing_table"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpcDefaultRoutingTablePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "name": "milled-easy-equine-machines", "resource_type": "routing_table", "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "routes": [{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetVpcDefaultRoutingTable successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVpcDefaultRoutingTable(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVpcDefaultRoutingTableOptions model
				getVpcDefaultRoutingTableOptionsModel := new(vpcv1.GetVpcDefaultRoutingTableOptions)
				getVpcDefaultRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getVpcDefaultRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVpcDefaultRoutingTable(getVpcDefaultRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVpcDefaultRoutingTable with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpcDefaultRoutingTableOptions model
				getVpcDefaultRoutingTableOptionsModel := new(vpcv1.GetVpcDefaultRoutingTableOptions)
				getVpcDefaultRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getVpcDefaultRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVpcDefaultRoutingTable(getVpcDefaultRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVpcDefaultRoutingTableOptions model with no property values
				getVpcDefaultRoutingTableOptionsModelNew := new(vpcv1.GetVpcDefaultRoutingTableOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVpcDefaultRoutingTable(getVpcDefaultRoutingTableOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVpcDefaultSecurityGroup(getVpcDefaultSecurityGroupOptions *GetVpcDefaultSecurityGroupOptions) - Operation response error`, func() {
		version := "testString"
		getVpcDefaultSecurityGroupPath := "/vpcs/testString/default_security_group"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpcDefaultSecurityGroupPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVpcDefaultSecurityGroup with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpcDefaultSecurityGroupOptions model
				getVpcDefaultSecurityGroupOptionsModel := new(vpcv1.GetVpcDefaultSecurityGroupOptions)
				getVpcDefaultSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getVpcDefaultSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVpcDefaultSecurityGroup(getVpcDefaultSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVpcDefaultSecurityGroup(getVpcDefaultSecurityGroupOptions *GetVpcDefaultSecurityGroupOptions)`, func() {
		version := "testString"
		getVpcDefaultSecurityGroupPath := "/vpcs/testString/default_security_group"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpcDefaultSecurityGroupPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "observant-chip-emphatic-engraver", "rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetVpcDefaultSecurityGroup successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVpcDefaultSecurityGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVpcDefaultSecurityGroupOptions model
				getVpcDefaultSecurityGroupOptionsModel := new(vpcv1.GetVpcDefaultSecurityGroupOptions)
				getVpcDefaultSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getVpcDefaultSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVpcDefaultSecurityGroup(getVpcDefaultSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVpcDefaultSecurityGroup with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpcDefaultSecurityGroupOptions model
				getVpcDefaultSecurityGroupOptionsModel := new(vpcv1.GetVpcDefaultSecurityGroupOptions)
				getVpcDefaultSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getVpcDefaultSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVpcDefaultSecurityGroup(getVpcDefaultSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVpcDefaultSecurityGroupOptions model with no property values
				getVpcDefaultSecurityGroupOptionsModelNew := new(vpcv1.GetVpcDefaultSecurityGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVpcDefaultSecurityGroup(getVpcDefaultSecurityGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVpcAddressPrefixes(listVpcAddressPrefixesOptions *ListVpcAddressPrefixesOptions) - Operation response error`, func() {
		version := "testString"
		listVpcAddressPrefixesPath := "/vpcs/testString/address_prefixes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpcAddressPrefixesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVpcAddressPrefixes with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpcAddressPrefixesOptions model
				listVpcAddressPrefixesOptionsModel := new(vpcv1.ListVpcAddressPrefixesOptions)
				listVpcAddressPrefixesOptionsModel.VpcID = core.StringPtr("testString")
				listVpcAddressPrefixesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVpcAddressPrefixes(listVpcAddressPrefixesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVpcAddressPrefixes(listVpcAddressPrefixesOptions *ListVpcAddressPrefixesOptions)`, func() {
		version := "testString"
		listVpcAddressPrefixesPath := "/vpcs/testString/address_prefixes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpcAddressPrefixesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"address_prefixes": [{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-address-prefix-2", "is_default": false, "cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": true, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListVpcAddressPrefixes successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVpcAddressPrefixes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVpcAddressPrefixesOptions model
				listVpcAddressPrefixesOptionsModel := new(vpcv1.ListVpcAddressPrefixesOptions)
				listVpcAddressPrefixesOptionsModel.VpcID = core.StringPtr("testString")
				listVpcAddressPrefixesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVpcAddressPrefixes(listVpcAddressPrefixesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVpcAddressPrefixes with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpcAddressPrefixesOptions model
				listVpcAddressPrefixesOptionsModel := new(vpcv1.ListVpcAddressPrefixesOptions)
				listVpcAddressPrefixesOptionsModel.VpcID = core.StringPtr("testString")
				listVpcAddressPrefixesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVpcAddressPrefixes(listVpcAddressPrefixesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVpcAddressPrefixesOptions model with no property values
				listVpcAddressPrefixesOptionsModelNew := new(vpcv1.ListVpcAddressPrefixesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListVpcAddressPrefixes(listVpcAddressPrefixesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVpcAddressPrefix(createVpcAddressPrefixOptions *CreateVpcAddressPrefixOptions) - Operation response error`, func() {
		version := "testString"
		createVpcAddressPrefixPath := "/vpcs/testString/address_prefixes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVpcAddressPrefixPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVpcAddressPrefix with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVpcAddressPrefixOptions model
				createVpcAddressPrefixOptionsModel := new(vpcv1.CreateVpcAddressPrefixOptions)
				createVpcAddressPrefixOptionsModel.VpcID = core.StringPtr("testString")
				createVpcAddressPrefixOptionsModel.Cidr = core.StringPtr("10.0.0.0/24")
				createVpcAddressPrefixOptionsModel.Zone = zoneIdentityModel
				createVpcAddressPrefixOptionsModel.Name = core.StringPtr("my-address-prefix-2")
				createVpcAddressPrefixOptionsModel.IsDefault = core.BoolPtr(true)
				createVpcAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateVpcAddressPrefix(createVpcAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateVpcAddressPrefix(createVpcAddressPrefixOptions *CreateVpcAddressPrefixOptions)`, func() {
		version := "testString"
		createVpcAddressPrefixPath := "/vpcs/testString/address_prefixes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVpcAddressPrefixPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-address-prefix-2", "is_default": false, "cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": true, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke CreateVpcAddressPrefix successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateVpcAddressPrefix(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVpcAddressPrefixOptions model
				createVpcAddressPrefixOptionsModel := new(vpcv1.CreateVpcAddressPrefixOptions)
				createVpcAddressPrefixOptionsModel.VpcID = core.StringPtr("testString")
				createVpcAddressPrefixOptionsModel.Cidr = core.StringPtr("10.0.0.0/24")
				createVpcAddressPrefixOptionsModel.Zone = zoneIdentityModel
				createVpcAddressPrefixOptionsModel.Name = core.StringPtr("my-address-prefix-2")
				createVpcAddressPrefixOptionsModel.IsDefault = core.BoolPtr(true)
				createVpcAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateVpcAddressPrefix(createVpcAddressPrefixOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateVpcAddressPrefix with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVpcAddressPrefixOptions model
				createVpcAddressPrefixOptionsModel := new(vpcv1.CreateVpcAddressPrefixOptions)
				createVpcAddressPrefixOptionsModel.VpcID = core.StringPtr("testString")
				createVpcAddressPrefixOptionsModel.Cidr = core.StringPtr("10.0.0.0/24")
				createVpcAddressPrefixOptionsModel.Zone = zoneIdentityModel
				createVpcAddressPrefixOptionsModel.Name = core.StringPtr("my-address-prefix-2")
				createVpcAddressPrefixOptionsModel.IsDefault = core.BoolPtr(true)
				createVpcAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateVpcAddressPrefix(createVpcAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVpcAddressPrefixOptions model with no property values
				createVpcAddressPrefixOptionsModelNew := new(vpcv1.CreateVpcAddressPrefixOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateVpcAddressPrefix(createVpcAddressPrefixOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteVpcAddressPrefix(deleteVpcAddressPrefixOptions *DeleteVpcAddressPrefixOptions)`, func() {
		version := "testString"
		deleteVpcAddressPrefixPath := "/vpcs/testString/address_prefixes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteVpcAddressPrefixPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVpcAddressPrefix successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteVpcAddressPrefix(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVpcAddressPrefixOptions model
				deleteVpcAddressPrefixOptionsModel := new(vpcv1.DeleteVpcAddressPrefixOptions)
				deleteVpcAddressPrefixOptionsModel.VpcID = core.StringPtr("testString")
				deleteVpcAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				deleteVpcAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteVpcAddressPrefix(deleteVpcAddressPrefixOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVpcAddressPrefix with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteVpcAddressPrefixOptions model
				deleteVpcAddressPrefixOptionsModel := new(vpcv1.DeleteVpcAddressPrefixOptions)
				deleteVpcAddressPrefixOptionsModel.VpcID = core.StringPtr("testString")
				deleteVpcAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				deleteVpcAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteVpcAddressPrefix(deleteVpcAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVpcAddressPrefixOptions model with no property values
				deleteVpcAddressPrefixOptionsModelNew := new(vpcv1.DeleteVpcAddressPrefixOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteVpcAddressPrefix(deleteVpcAddressPrefixOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVpcAddressPrefix(getVpcAddressPrefixOptions *GetVpcAddressPrefixOptions) - Operation response error`, func() {
		version := "testString"
		getVpcAddressPrefixPath := "/vpcs/testString/address_prefixes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpcAddressPrefixPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVpcAddressPrefix with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpcAddressPrefixOptions model
				getVpcAddressPrefixOptionsModel := new(vpcv1.GetVpcAddressPrefixOptions)
				getVpcAddressPrefixOptionsModel.VpcID = core.StringPtr("testString")
				getVpcAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				getVpcAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVpcAddressPrefix(getVpcAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVpcAddressPrefix(getVpcAddressPrefixOptions *GetVpcAddressPrefixOptions)`, func() {
		version := "testString"
		getVpcAddressPrefixPath := "/vpcs/testString/address_prefixes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpcAddressPrefixPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-address-prefix-2", "is_default": false, "cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": true, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke GetVpcAddressPrefix successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVpcAddressPrefix(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVpcAddressPrefixOptions model
				getVpcAddressPrefixOptionsModel := new(vpcv1.GetVpcAddressPrefixOptions)
				getVpcAddressPrefixOptionsModel.VpcID = core.StringPtr("testString")
				getVpcAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				getVpcAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVpcAddressPrefix(getVpcAddressPrefixOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVpcAddressPrefix with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpcAddressPrefixOptions model
				getVpcAddressPrefixOptionsModel := new(vpcv1.GetVpcAddressPrefixOptions)
				getVpcAddressPrefixOptionsModel.VpcID = core.StringPtr("testString")
				getVpcAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				getVpcAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVpcAddressPrefix(getVpcAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVpcAddressPrefixOptions model with no property values
				getVpcAddressPrefixOptionsModelNew := new(vpcv1.GetVpcAddressPrefixOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVpcAddressPrefix(getVpcAddressPrefixOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVpcAddressPrefix(updateVpcAddressPrefixOptions *UpdateVpcAddressPrefixOptions) - Operation response error`, func() {
		version := "testString"
		updateVpcAddressPrefixPath := "/vpcs/testString/address_prefixes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVpcAddressPrefixPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVpcAddressPrefix with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVpcAddressPrefixOptions model
				updateVpcAddressPrefixOptionsModel := new(vpcv1.UpdateVpcAddressPrefixOptions)
				updateVpcAddressPrefixOptionsModel.VpcID = core.StringPtr("testString")
				updateVpcAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				updateVpcAddressPrefixOptionsModel.Name = core.StringPtr("my-address-prefix-2")
				updateVpcAddressPrefixOptionsModel.IsDefault = core.BoolPtr(false)
				updateVpcAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateVpcAddressPrefix(updateVpcAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateVpcAddressPrefix(updateVpcAddressPrefixOptions *UpdateVpcAddressPrefixOptions)`, func() {
		version := "testString"
		updateVpcAddressPrefixPath := "/vpcs/testString/address_prefixes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVpcAddressPrefixPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-address-prefix-2", "is_default": false, "cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": true, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateVpcAddressPrefix successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateVpcAddressPrefix(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateVpcAddressPrefixOptions model
				updateVpcAddressPrefixOptionsModel := new(vpcv1.UpdateVpcAddressPrefixOptions)
				updateVpcAddressPrefixOptionsModel.VpcID = core.StringPtr("testString")
				updateVpcAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				updateVpcAddressPrefixOptionsModel.Name = core.StringPtr("my-address-prefix-2")
				updateVpcAddressPrefixOptionsModel.IsDefault = core.BoolPtr(false)
				updateVpcAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateVpcAddressPrefix(updateVpcAddressPrefixOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateVpcAddressPrefix with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVpcAddressPrefixOptions model
				updateVpcAddressPrefixOptionsModel := new(vpcv1.UpdateVpcAddressPrefixOptions)
				updateVpcAddressPrefixOptionsModel.VpcID = core.StringPtr("testString")
				updateVpcAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				updateVpcAddressPrefixOptionsModel.Name = core.StringPtr("my-address-prefix-2")
				updateVpcAddressPrefixOptionsModel.IsDefault = core.BoolPtr(false)
				updateVpcAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateVpcAddressPrefix(updateVpcAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVpcAddressPrefixOptions model with no property values
				updateVpcAddressPrefixOptionsModelNew := new(vpcv1.UpdateVpcAddressPrefixOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateVpcAddressPrefix(updateVpcAddressPrefixOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVpcRoutes(listVpcRoutesOptions *ListVpcRoutesOptions) - Operation response error`, func() {
		version := "testString"
		listVpcRoutesPath := "/vpcs/testString/routes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpcRoutesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVpcRoutes with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpcRoutesOptions model
				listVpcRoutesOptionsModel := new(vpcv1.ListVpcRoutesOptions)
				listVpcRoutesOptionsModel.VpcID = core.StringPtr("testString")
				listVpcRoutesOptionsModel.ZoneName = core.StringPtr("testString")
				listVpcRoutesOptionsModel.Start = core.StringPtr("testString")
				listVpcRoutesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVpcRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVpcRoutes(listVpcRoutesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVpcRoutes(listVpcRoutesOptions *ListVpcRoutesOptions)`, func() {
		version := "testString"
		listVpcRoutesPath := "/vpcs/testString/routes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpcRoutesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/1a15dca5-7e33-45e1-b7c5-bc690e569531/routes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/1a15dca5-7e33-45e1-b7c5-bc690e569531/routes?start=a5e812a2-62c0-4555-86a5-907106760c56&limit=20"}, "total_count": 132, "routes": [{"next_hop": {"address": "192.168.3.4"}, "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1", "action": "delegate", "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "lifecycle_state": "stable", "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListVpcRoutes successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVpcRoutes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVpcRoutesOptions model
				listVpcRoutesOptionsModel := new(vpcv1.ListVpcRoutesOptions)
				listVpcRoutesOptionsModel.VpcID = core.StringPtr("testString")
				listVpcRoutesOptionsModel.ZoneName = core.StringPtr("testString")
				listVpcRoutesOptionsModel.Start = core.StringPtr("testString")
				listVpcRoutesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVpcRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVpcRoutes(listVpcRoutesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVpcRoutes with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpcRoutesOptions model
				listVpcRoutesOptionsModel := new(vpcv1.ListVpcRoutesOptions)
				listVpcRoutesOptionsModel.VpcID = core.StringPtr("testString")
				listVpcRoutesOptionsModel.ZoneName = core.StringPtr("testString")
				listVpcRoutesOptionsModel.Start = core.StringPtr("testString")
				listVpcRoutesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVpcRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVpcRoutes(listVpcRoutesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVpcRoutesOptions model with no property values
				listVpcRoutesOptionsModelNew := new(vpcv1.ListVpcRoutesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListVpcRoutes(listVpcRoutesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVpcRoute(createVpcRouteOptions *CreateVpcRouteOptions) - Operation response error`, func() {
		version := "testString"
		createVpcRoutePath := "/vpcs/testString/routes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVpcRoutePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVpcRoute with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVpcRouteOptions model
				createVpcRouteOptionsModel := new(vpcv1.CreateVpcRouteOptions)
				createVpcRouteOptionsModel.VpcID = core.StringPtr("testString")
				createVpcRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVpcRouteOptionsModel.Zone = zoneIdentityModel
				createVpcRouteOptionsModel.Action = core.StringPtr("delegate")
				createVpcRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVpcRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVpcRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateVpcRoute(createVpcRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateVpcRoute(createVpcRouteOptions *CreateVpcRouteOptions)`, func() {
		version := "testString"
		createVpcRoutePath := "/vpcs/testString/routes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVpcRoutePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"next_hop": {"address": "192.168.3.4"}, "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1", "action": "delegate", "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "lifecycle_state": "stable", "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke CreateVpcRoute successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateVpcRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVpcRouteOptions model
				createVpcRouteOptionsModel := new(vpcv1.CreateVpcRouteOptions)
				createVpcRouteOptionsModel.VpcID = core.StringPtr("testString")
				createVpcRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVpcRouteOptionsModel.Zone = zoneIdentityModel
				createVpcRouteOptionsModel.Action = core.StringPtr("delegate")
				createVpcRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVpcRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVpcRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateVpcRoute(createVpcRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateVpcRoute with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVpcRouteOptions model
				createVpcRouteOptionsModel := new(vpcv1.CreateVpcRouteOptions)
				createVpcRouteOptionsModel.VpcID = core.StringPtr("testString")
				createVpcRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVpcRouteOptionsModel.Zone = zoneIdentityModel
				createVpcRouteOptionsModel.Action = core.StringPtr("delegate")
				createVpcRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVpcRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVpcRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateVpcRoute(createVpcRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVpcRouteOptions model with no property values
				createVpcRouteOptionsModelNew := new(vpcv1.CreateVpcRouteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateVpcRoute(createVpcRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteVpcRoute(deleteVpcRouteOptions *DeleteVpcRouteOptions)`, func() {
		version := "testString"
		deleteVpcRoutePath := "/vpcs/testString/routes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteVpcRoutePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVpcRoute successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteVpcRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVpcRouteOptions model
				deleteVpcRouteOptionsModel := new(vpcv1.DeleteVpcRouteOptions)
				deleteVpcRouteOptionsModel.VpcID = core.StringPtr("testString")
				deleteVpcRouteOptionsModel.ID = core.StringPtr("testString")
				deleteVpcRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteVpcRoute(deleteVpcRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVpcRoute with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteVpcRouteOptions model
				deleteVpcRouteOptionsModel := new(vpcv1.DeleteVpcRouteOptions)
				deleteVpcRouteOptionsModel.VpcID = core.StringPtr("testString")
				deleteVpcRouteOptionsModel.ID = core.StringPtr("testString")
				deleteVpcRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteVpcRoute(deleteVpcRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVpcRouteOptions model with no property values
				deleteVpcRouteOptionsModelNew := new(vpcv1.DeleteVpcRouteOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteVpcRoute(deleteVpcRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVpcRoute(getVpcRouteOptions *GetVpcRouteOptions) - Operation response error`, func() {
		version := "testString"
		getVpcRoutePath := "/vpcs/testString/routes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpcRoutePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVpcRoute with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpcRouteOptions model
				getVpcRouteOptionsModel := new(vpcv1.GetVpcRouteOptions)
				getVpcRouteOptionsModel.VpcID = core.StringPtr("testString")
				getVpcRouteOptionsModel.ID = core.StringPtr("testString")
				getVpcRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVpcRoute(getVpcRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVpcRoute(getVpcRouteOptions *GetVpcRouteOptions)`, func() {
		version := "testString"
		getVpcRoutePath := "/vpcs/testString/routes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpcRoutePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"next_hop": {"address": "192.168.3.4"}, "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1", "action": "delegate", "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "lifecycle_state": "stable", "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke GetVpcRoute successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVpcRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVpcRouteOptions model
				getVpcRouteOptionsModel := new(vpcv1.GetVpcRouteOptions)
				getVpcRouteOptionsModel.VpcID = core.StringPtr("testString")
				getVpcRouteOptionsModel.ID = core.StringPtr("testString")
				getVpcRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVpcRoute(getVpcRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVpcRoute with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpcRouteOptions model
				getVpcRouteOptionsModel := new(vpcv1.GetVpcRouteOptions)
				getVpcRouteOptionsModel.VpcID = core.StringPtr("testString")
				getVpcRouteOptionsModel.ID = core.StringPtr("testString")
				getVpcRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVpcRoute(getVpcRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVpcRouteOptions model with no property values
				getVpcRouteOptionsModelNew := new(vpcv1.GetVpcRouteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVpcRoute(getVpcRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVpcRoute(updateVpcRouteOptions *UpdateVpcRouteOptions) - Operation response error`, func() {
		version := "testString"
		updateVpcRoutePath := "/vpcs/testString/routes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVpcRoutePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVpcRoute with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVpcRouteOptions model
				updateVpcRouteOptionsModel := new(vpcv1.UpdateVpcRouteOptions)
				updateVpcRouteOptionsModel.VpcID = core.StringPtr("testString")
				updateVpcRouteOptionsModel.ID = core.StringPtr("testString")
				updateVpcRouteOptionsModel.Name = core.StringPtr("my-route-2")
				updateVpcRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateVpcRoute(updateVpcRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateVpcRoute(updateVpcRouteOptions *UpdateVpcRouteOptions)`, func() {
		version := "testString"
		updateVpcRoutePath := "/vpcs/testString/routes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVpcRoutePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"next_hop": {"address": "192.168.3.4"}, "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1", "action": "delegate", "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "lifecycle_state": "stable", "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateVpcRoute successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateVpcRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateVpcRouteOptions model
				updateVpcRouteOptionsModel := new(vpcv1.UpdateVpcRouteOptions)
				updateVpcRouteOptionsModel.VpcID = core.StringPtr("testString")
				updateVpcRouteOptionsModel.ID = core.StringPtr("testString")
				updateVpcRouteOptionsModel.Name = core.StringPtr("my-route-2")
				updateVpcRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateVpcRoute(updateVpcRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateVpcRoute with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVpcRouteOptions model
				updateVpcRouteOptionsModel := new(vpcv1.UpdateVpcRouteOptions)
				updateVpcRouteOptionsModel.VpcID = core.StringPtr("testString")
				updateVpcRouteOptionsModel.ID = core.StringPtr("testString")
				updateVpcRouteOptionsModel.Name = core.StringPtr("my-route-2")
				updateVpcRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateVpcRoute(updateVpcRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVpcRouteOptions model with no property values
				updateVpcRouteOptionsModelNew := new(vpcv1.UpdateVpcRouteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateVpcRoute(updateVpcRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVpcRoutingTables(listVpcRoutingTablesOptions *ListVpcRoutingTablesOptions) - Operation response error`, func() {
		version := "testString"
		listVpcRoutingTablesPath := "/vpcs/testString/routing_tables"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpcRoutingTablesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVpcRoutingTables with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpcRoutingTablesOptions model
				listVpcRoutingTablesOptionsModel := new(vpcv1.ListVpcRoutingTablesOptions)
				listVpcRoutingTablesOptionsModel.VpcID = core.StringPtr("testString")
				listVpcRoutingTablesOptionsModel.Start = core.StringPtr("testString")
				listVpcRoutingTablesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVpcRoutingTablesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVpcRoutingTables(listVpcRoutingTablesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVpcRoutingTables(listVpcRoutingTablesOptions *ListVpcRoutingTablesOptions)`, func() {
		version := "testString"
		listVpcRoutingTablesPath := "/vpcs/testString/routing_tables"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpcRoutingTablesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "routing_tables": [{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "name": "my-routing-table-2", "resource_type": "routing_table", "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "routes": [{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}]}`)
				}))
			})
			It(`Invoke ListVpcRoutingTables successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVpcRoutingTables(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVpcRoutingTablesOptions model
				listVpcRoutingTablesOptionsModel := new(vpcv1.ListVpcRoutingTablesOptions)
				listVpcRoutingTablesOptionsModel.VpcID = core.StringPtr("testString")
				listVpcRoutingTablesOptionsModel.Start = core.StringPtr("testString")
				listVpcRoutingTablesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVpcRoutingTablesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVpcRoutingTables(listVpcRoutingTablesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVpcRoutingTables with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpcRoutingTablesOptions model
				listVpcRoutingTablesOptionsModel := new(vpcv1.ListVpcRoutingTablesOptions)
				listVpcRoutingTablesOptionsModel.VpcID = core.StringPtr("testString")
				listVpcRoutingTablesOptionsModel.Start = core.StringPtr("testString")
				listVpcRoutingTablesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVpcRoutingTablesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVpcRoutingTables(listVpcRoutingTablesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVpcRoutingTablesOptions model with no property values
				listVpcRoutingTablesOptionsModelNew := new(vpcv1.ListVpcRoutingTablesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListVpcRoutingTables(listVpcRoutingTablesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVpcRoutingTable(createVpcRoutingTableOptions *CreateVpcRoutingTableOptions) - Operation response error`, func() {
		version := "testString"
		createVpcRoutingTablePath := "/vpcs/testString/routing_tables"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVpcRoutingTablePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVpcRoutingTable with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the RoutePrototype model
				routePrototypeModel := new(vpcv1.RoutePrototype)
				routePrototypeModel.Action = core.StringPtr("delegate")
				routePrototypeModel.NextHop = routeNextHopPrototypeModel
				routePrototypeModel.Name = core.StringPtr("my-route-2")
				routePrototypeModel.Destination = core.StringPtr("192.168.3.0/24")
				routePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateVpcRoutingTableOptions model
				createVpcRoutingTableOptionsModel := new(vpcv1.CreateVpcRoutingTableOptions)
				createVpcRoutingTableOptionsModel.VpcID = core.StringPtr("testString")
				createVpcRoutingTableOptionsModel.Name = core.StringPtr("my-routing-table-2")
				createVpcRoutingTableOptionsModel.Routes = []vpcv1.RoutePrototype{*routePrototypeModel}
				createVpcRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateVpcRoutingTable(createVpcRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateVpcRoutingTable(createVpcRoutingTableOptions *CreateVpcRoutingTableOptions)`, func() {
		version := "testString"
		createVpcRoutingTablePath := "/vpcs/testString/routing_tables"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVpcRoutingTablePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "name": "my-routing-table-2", "resource_type": "routing_table", "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "routes": [{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke CreateVpcRoutingTable successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateVpcRoutingTable(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the RoutePrototype model
				routePrototypeModel := new(vpcv1.RoutePrototype)
				routePrototypeModel.Action = core.StringPtr("delegate")
				routePrototypeModel.NextHop = routeNextHopPrototypeModel
				routePrototypeModel.Name = core.StringPtr("my-route-2")
				routePrototypeModel.Destination = core.StringPtr("192.168.3.0/24")
				routePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateVpcRoutingTableOptions model
				createVpcRoutingTableOptionsModel := new(vpcv1.CreateVpcRoutingTableOptions)
				createVpcRoutingTableOptionsModel.VpcID = core.StringPtr("testString")
				createVpcRoutingTableOptionsModel.Name = core.StringPtr("my-routing-table-2")
				createVpcRoutingTableOptionsModel.Routes = []vpcv1.RoutePrototype{*routePrototypeModel}
				createVpcRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateVpcRoutingTable(createVpcRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateVpcRoutingTable with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the RoutePrototype model
				routePrototypeModel := new(vpcv1.RoutePrototype)
				routePrototypeModel.Action = core.StringPtr("delegate")
				routePrototypeModel.NextHop = routeNextHopPrototypeModel
				routePrototypeModel.Name = core.StringPtr("my-route-2")
				routePrototypeModel.Destination = core.StringPtr("192.168.3.0/24")
				routePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateVpcRoutingTableOptions model
				createVpcRoutingTableOptionsModel := new(vpcv1.CreateVpcRoutingTableOptions)
				createVpcRoutingTableOptionsModel.VpcID = core.StringPtr("testString")
				createVpcRoutingTableOptionsModel.Name = core.StringPtr("my-routing-table-2")
				createVpcRoutingTableOptionsModel.Routes = []vpcv1.RoutePrototype{*routePrototypeModel}
				createVpcRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateVpcRoutingTable(createVpcRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVpcRoutingTableOptions model with no property values
				createVpcRoutingTableOptionsModelNew := new(vpcv1.CreateVpcRoutingTableOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateVpcRoutingTable(createVpcRoutingTableOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteVpcRoutingTable(deleteVpcRoutingTableOptions *DeleteVpcRoutingTableOptions)`, func() {
		version := "testString"
		deleteVpcRoutingTablePath := "/vpcs/testString/routing_tables/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteVpcRoutingTablePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVpcRoutingTable successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteVpcRoutingTable(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVpcRoutingTableOptions model
				deleteVpcRoutingTableOptionsModel := new(vpcv1.DeleteVpcRoutingTableOptions)
				deleteVpcRoutingTableOptionsModel.VpcID = core.StringPtr("testString")
				deleteVpcRoutingTableOptionsModel.ID = core.StringPtr("testString")
				deleteVpcRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteVpcRoutingTable(deleteVpcRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVpcRoutingTable with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteVpcRoutingTableOptions model
				deleteVpcRoutingTableOptionsModel := new(vpcv1.DeleteVpcRoutingTableOptions)
				deleteVpcRoutingTableOptionsModel.VpcID = core.StringPtr("testString")
				deleteVpcRoutingTableOptionsModel.ID = core.StringPtr("testString")
				deleteVpcRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteVpcRoutingTable(deleteVpcRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVpcRoutingTableOptions model with no property values
				deleteVpcRoutingTableOptionsModelNew := new(vpcv1.DeleteVpcRoutingTableOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteVpcRoutingTable(deleteVpcRoutingTableOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVpcRoutingTable(getVpcRoutingTableOptions *GetVpcRoutingTableOptions) - Operation response error`, func() {
		version := "testString"
		getVpcRoutingTablePath := "/vpcs/testString/routing_tables/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpcRoutingTablePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVpcRoutingTable with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpcRoutingTableOptions model
				getVpcRoutingTableOptionsModel := new(vpcv1.GetVpcRoutingTableOptions)
				getVpcRoutingTableOptionsModel.VpcID = core.StringPtr("testString")
				getVpcRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getVpcRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVpcRoutingTable(getVpcRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVpcRoutingTable(getVpcRoutingTableOptions *GetVpcRoutingTableOptions)`, func() {
		version := "testString"
		getVpcRoutingTablePath := "/vpcs/testString/routing_tables/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpcRoutingTablePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "name": "my-routing-table-2", "resource_type": "routing_table", "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "routes": [{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetVpcRoutingTable successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVpcRoutingTable(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVpcRoutingTableOptions model
				getVpcRoutingTableOptionsModel := new(vpcv1.GetVpcRoutingTableOptions)
				getVpcRoutingTableOptionsModel.VpcID = core.StringPtr("testString")
				getVpcRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getVpcRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVpcRoutingTable(getVpcRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVpcRoutingTable with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpcRoutingTableOptions model
				getVpcRoutingTableOptionsModel := new(vpcv1.GetVpcRoutingTableOptions)
				getVpcRoutingTableOptionsModel.VpcID = core.StringPtr("testString")
				getVpcRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getVpcRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVpcRoutingTable(getVpcRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVpcRoutingTableOptions model with no property values
				getVpcRoutingTableOptionsModelNew := new(vpcv1.GetVpcRoutingTableOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVpcRoutingTable(getVpcRoutingTableOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVpcRoutingTable(updateVpcRoutingTableOptions *UpdateVpcRoutingTableOptions) - Operation response error`, func() {
		version := "testString"
		updateVpcRoutingTablePath := "/vpcs/testString/routing_tables/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVpcRoutingTablePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVpcRoutingTable with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVpcRoutingTableOptions model
				updateVpcRoutingTableOptionsModel := new(vpcv1.UpdateVpcRoutingTableOptions)
				updateVpcRoutingTableOptionsModel.VpcID = core.StringPtr("testString")
				updateVpcRoutingTableOptionsModel.ID = core.StringPtr("testString")
				updateVpcRoutingTableOptionsModel.Name = core.StringPtr("my-routing-table-2")
				updateVpcRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateVpcRoutingTable(updateVpcRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateVpcRoutingTable(updateVpcRoutingTableOptions *UpdateVpcRoutingTableOptions)`, func() {
		version := "testString"
		updateVpcRoutingTablePath := "/vpcs/testString/routing_tables/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVpcRoutingTablePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "name": "my-routing-table-2", "resource_type": "routing_table", "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "routes": [{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke UpdateVpcRoutingTable successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateVpcRoutingTable(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateVpcRoutingTableOptions model
				updateVpcRoutingTableOptionsModel := new(vpcv1.UpdateVpcRoutingTableOptions)
				updateVpcRoutingTableOptionsModel.VpcID = core.StringPtr("testString")
				updateVpcRoutingTableOptionsModel.ID = core.StringPtr("testString")
				updateVpcRoutingTableOptionsModel.Name = core.StringPtr("my-routing-table-2")
				updateVpcRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateVpcRoutingTable(updateVpcRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateVpcRoutingTable with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVpcRoutingTableOptions model
				updateVpcRoutingTableOptionsModel := new(vpcv1.UpdateVpcRoutingTableOptions)
				updateVpcRoutingTableOptionsModel.VpcID = core.StringPtr("testString")
				updateVpcRoutingTableOptionsModel.ID = core.StringPtr("testString")
				updateVpcRoutingTableOptionsModel.Name = core.StringPtr("my-routing-table-2")
				updateVpcRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateVpcRoutingTable(updateVpcRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVpcRoutingTableOptions model with no property values
				updateVpcRoutingTableOptionsModelNew := new(vpcv1.UpdateVpcRoutingTableOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateVpcRoutingTable(updateVpcRoutingTableOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVpcRoutingTableRoutes(listVpcRoutingTableRoutesOptions *ListVpcRoutingTableRoutesOptions) - Operation response error`, func() {
		version := "testString"
		listVpcRoutingTableRoutesPath := "/vpcs/testString/routing_tables/testString/routes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpcRoutingTableRoutesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVpcRoutingTableRoutes with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpcRoutingTableRoutesOptions model
				listVpcRoutingTableRoutesOptionsModel := new(vpcv1.ListVpcRoutingTableRoutesOptions)
				listVpcRoutingTableRoutesOptionsModel.VpcID = core.StringPtr("testString")
				listVpcRoutingTableRoutesOptionsModel.RoutingTableID = core.StringPtr("testString")
				listVpcRoutingTableRoutesOptionsModel.Start = core.StringPtr("testString")
				listVpcRoutingTableRoutesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVpcRoutingTableRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVpcRoutingTableRoutes(listVpcRoutingTableRoutesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVpcRoutingTableRoutes(listVpcRoutingTableRoutesOptions *ListVpcRoutingTableRoutesOptions)`, func() {
		version := "testString"
		listVpcRoutingTableRoutesPath := "/vpcs/testString/routing_tables/testString/routes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpcRoutingTableRoutesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/1a15dca5-7e33-45e1-b7c5-bc690e569531/routes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/1a15dca5-7e33-45e1-b7c5-bc690e569531/routes?start=a5e812a2-62c0-4555-86a5-907106760c56&limit=20"}, "total_count": 132, "routes": [{"next_hop": {"address": "192.168.3.4"}, "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1", "action": "delegate", "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "lifecycle_state": "stable", "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListVpcRoutingTableRoutes successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVpcRoutingTableRoutes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVpcRoutingTableRoutesOptions model
				listVpcRoutingTableRoutesOptionsModel := new(vpcv1.ListVpcRoutingTableRoutesOptions)
				listVpcRoutingTableRoutesOptionsModel.VpcID = core.StringPtr("testString")
				listVpcRoutingTableRoutesOptionsModel.RoutingTableID = core.StringPtr("testString")
				listVpcRoutingTableRoutesOptionsModel.Start = core.StringPtr("testString")
				listVpcRoutingTableRoutesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVpcRoutingTableRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVpcRoutingTableRoutes(listVpcRoutingTableRoutesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVpcRoutingTableRoutes with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpcRoutingTableRoutesOptions model
				listVpcRoutingTableRoutesOptionsModel := new(vpcv1.ListVpcRoutingTableRoutesOptions)
				listVpcRoutingTableRoutesOptionsModel.VpcID = core.StringPtr("testString")
				listVpcRoutingTableRoutesOptionsModel.RoutingTableID = core.StringPtr("testString")
				listVpcRoutingTableRoutesOptionsModel.Start = core.StringPtr("testString")
				listVpcRoutingTableRoutesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVpcRoutingTableRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVpcRoutingTableRoutes(listVpcRoutingTableRoutesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVpcRoutingTableRoutesOptions model with no property values
				listVpcRoutingTableRoutesOptionsModelNew := new(vpcv1.ListVpcRoutingTableRoutesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListVpcRoutingTableRoutes(listVpcRoutingTableRoutesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVpcRoutingTableRoute(createVpcRoutingTableRouteOptions *CreateVpcRoutingTableRouteOptions) - Operation response error`, func() {
		version := "testString"
		createVpcRoutingTableRoutePath := "/vpcs/testString/routing_tables/testString/routes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVpcRoutingTableRoutePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVpcRoutingTableRoute with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVpcRoutingTableRouteOptions model
				createVpcRoutingTableRouteOptionsModel := new(vpcv1.CreateVpcRoutingTableRouteOptions)
				createVpcRoutingTableRouteOptionsModel.VpcID = core.StringPtr("testString")
				createVpcRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				createVpcRoutingTableRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVpcRoutingTableRouteOptionsModel.Zone = zoneIdentityModel
				createVpcRoutingTableRouteOptionsModel.Action = core.StringPtr("delegate")
				createVpcRoutingTableRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVpcRoutingTableRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVpcRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateVpcRoutingTableRoute(createVpcRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateVpcRoutingTableRoute(createVpcRoutingTableRouteOptions *CreateVpcRoutingTableRouteOptions)`, func() {
		version := "testString"
		createVpcRoutingTableRoutePath := "/vpcs/testString/routing_tables/testString/routes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVpcRoutingTableRoutePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"next_hop": {"address": "192.168.3.4"}, "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1", "action": "delegate", "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "lifecycle_state": "stable", "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke CreateVpcRoutingTableRoute successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateVpcRoutingTableRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVpcRoutingTableRouteOptions model
				createVpcRoutingTableRouteOptionsModel := new(vpcv1.CreateVpcRoutingTableRouteOptions)
				createVpcRoutingTableRouteOptionsModel.VpcID = core.StringPtr("testString")
				createVpcRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				createVpcRoutingTableRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVpcRoutingTableRouteOptionsModel.Zone = zoneIdentityModel
				createVpcRoutingTableRouteOptionsModel.Action = core.StringPtr("delegate")
				createVpcRoutingTableRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVpcRoutingTableRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVpcRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateVpcRoutingTableRoute(createVpcRoutingTableRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateVpcRoutingTableRoute with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVpcRoutingTableRouteOptions model
				createVpcRoutingTableRouteOptionsModel := new(vpcv1.CreateVpcRoutingTableRouteOptions)
				createVpcRoutingTableRouteOptionsModel.VpcID = core.StringPtr("testString")
				createVpcRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				createVpcRoutingTableRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVpcRoutingTableRouteOptionsModel.Zone = zoneIdentityModel
				createVpcRoutingTableRouteOptionsModel.Action = core.StringPtr("delegate")
				createVpcRoutingTableRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVpcRoutingTableRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVpcRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateVpcRoutingTableRoute(createVpcRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVpcRoutingTableRouteOptions model with no property values
				createVpcRoutingTableRouteOptionsModelNew := new(vpcv1.CreateVpcRoutingTableRouteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateVpcRoutingTableRoute(createVpcRoutingTableRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteVpcRoutingTableRoute(deleteVpcRoutingTableRouteOptions *DeleteVpcRoutingTableRouteOptions)`, func() {
		version := "testString"
		deleteVpcRoutingTableRoutePath := "/vpcs/testString/routing_tables/testString/routes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteVpcRoutingTableRoutePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVpcRoutingTableRoute successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteVpcRoutingTableRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVpcRoutingTableRouteOptions model
				deleteVpcRoutingTableRouteOptionsModel := new(vpcv1.DeleteVpcRoutingTableRouteOptions)
				deleteVpcRoutingTableRouteOptionsModel.VpcID = core.StringPtr("testString")
				deleteVpcRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				deleteVpcRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				deleteVpcRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteVpcRoutingTableRoute(deleteVpcRoutingTableRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVpcRoutingTableRoute with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteVpcRoutingTableRouteOptions model
				deleteVpcRoutingTableRouteOptionsModel := new(vpcv1.DeleteVpcRoutingTableRouteOptions)
				deleteVpcRoutingTableRouteOptionsModel.VpcID = core.StringPtr("testString")
				deleteVpcRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				deleteVpcRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				deleteVpcRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteVpcRoutingTableRoute(deleteVpcRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVpcRoutingTableRouteOptions model with no property values
				deleteVpcRoutingTableRouteOptionsModelNew := new(vpcv1.DeleteVpcRoutingTableRouteOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteVpcRoutingTableRoute(deleteVpcRoutingTableRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVpcRoutingTableRoute(getVpcRoutingTableRouteOptions *GetVpcRoutingTableRouteOptions) - Operation response error`, func() {
		version := "testString"
		getVpcRoutingTableRoutePath := "/vpcs/testString/routing_tables/testString/routes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpcRoutingTableRoutePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVpcRoutingTableRoute with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpcRoutingTableRouteOptions model
				getVpcRoutingTableRouteOptionsModel := new(vpcv1.GetVpcRoutingTableRouteOptions)
				getVpcRoutingTableRouteOptionsModel.VpcID = core.StringPtr("testString")
				getVpcRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				getVpcRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				getVpcRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVpcRoutingTableRoute(getVpcRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVpcRoutingTableRoute(getVpcRoutingTableRouteOptions *GetVpcRoutingTableRouteOptions)`, func() {
		version := "testString"
		getVpcRoutingTableRoutePath := "/vpcs/testString/routing_tables/testString/routes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpcRoutingTableRoutePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"next_hop": {"address": "192.168.3.4"}, "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1", "action": "delegate", "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "lifecycle_state": "stable", "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke GetVpcRoutingTableRoute successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVpcRoutingTableRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVpcRoutingTableRouteOptions model
				getVpcRoutingTableRouteOptionsModel := new(vpcv1.GetVpcRoutingTableRouteOptions)
				getVpcRoutingTableRouteOptionsModel.VpcID = core.StringPtr("testString")
				getVpcRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				getVpcRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				getVpcRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVpcRoutingTableRoute(getVpcRoutingTableRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVpcRoutingTableRoute with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpcRoutingTableRouteOptions model
				getVpcRoutingTableRouteOptionsModel := new(vpcv1.GetVpcRoutingTableRouteOptions)
				getVpcRoutingTableRouteOptionsModel.VpcID = core.StringPtr("testString")
				getVpcRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				getVpcRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				getVpcRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVpcRoutingTableRoute(getVpcRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVpcRoutingTableRouteOptions model with no property values
				getVpcRoutingTableRouteOptionsModelNew := new(vpcv1.GetVpcRoutingTableRouteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVpcRoutingTableRoute(getVpcRoutingTableRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVpcRoutingTableRoute(updateVpcRoutingTableRouteOptions *UpdateVpcRoutingTableRouteOptions) - Operation response error`, func() {
		version := "testString"
		updateVpcRoutingTableRoutePath := "/vpcs/testString/routing_tables/testString/routes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVpcRoutingTableRoutePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVpcRoutingTableRoute with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVpcRoutingTableRouteOptions model
				updateVpcRoutingTableRouteOptionsModel := new(vpcv1.UpdateVpcRoutingTableRouteOptions)
				updateVpcRoutingTableRouteOptionsModel.VpcID = core.StringPtr("testString")
				updateVpcRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				updateVpcRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				updateVpcRoutingTableRouteOptionsModel.Name = core.StringPtr("my-route-2")
				updateVpcRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateVpcRoutingTableRoute(updateVpcRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateVpcRoutingTableRoute(updateVpcRoutingTableRouteOptions *UpdateVpcRoutingTableRouteOptions)`, func() {
		version := "testString"
		updateVpcRoutingTableRoutePath := "/vpcs/testString/routing_tables/testString/routes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVpcRoutingTableRoutePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"next_hop": {"address": "192.168.3.4"}, "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1", "action": "delegate", "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "lifecycle_state": "stable", "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateVpcRoutingTableRoute successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateVpcRoutingTableRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateVpcRoutingTableRouteOptions model
				updateVpcRoutingTableRouteOptionsModel := new(vpcv1.UpdateVpcRoutingTableRouteOptions)
				updateVpcRoutingTableRouteOptionsModel.VpcID = core.StringPtr("testString")
				updateVpcRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				updateVpcRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				updateVpcRoutingTableRouteOptionsModel.Name = core.StringPtr("my-route-2")
				updateVpcRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateVpcRoutingTableRoute(updateVpcRoutingTableRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateVpcRoutingTableRoute with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVpcRoutingTableRouteOptions model
				updateVpcRoutingTableRouteOptionsModel := new(vpcv1.UpdateVpcRoutingTableRouteOptions)
				updateVpcRoutingTableRouteOptionsModel.VpcID = core.StringPtr("testString")
				updateVpcRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				updateVpcRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				updateVpcRoutingTableRouteOptionsModel.Name = core.StringPtr("my-route-2")
				updateVpcRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateVpcRoutingTableRoute(updateVpcRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVpcRoutingTableRouteOptions model with no property values
				updateVpcRoutingTableRouteOptionsModelNew := new(vpcv1.UpdateVpcRoutingTableRouteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateVpcRoutingTableRoute(updateVpcRoutingTableRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "https://vpcv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListIkePolicies(listIkePoliciesOptions *ListIkePoliciesOptions) - Operation response error`, func() {
		version := "testString"
		listIkePoliciesPath := "/ike_policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listIkePoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListIkePolicies with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListIkePoliciesOptions model
				listIkePoliciesOptionsModel := new(vpcv1.ListIkePoliciesOptions)
				listIkePoliciesOptionsModel.Start = core.StringPtr("testString")
				listIkePoliciesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listIkePoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListIkePolicies(listIkePoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListIkePolicies(listIkePoliciesOptions *ListIkePoliciesOptions)`, func() {
		version := "testString"
		listIkePoliciesPath := "/ike_policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listIkePoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132, "ike_policies": [{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "authentication_algorithm": "md5", "dh_group": 2, "encryption_algorithm": "triple_des", "ike_version": 1, "key_lifetime": 28800, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "negotiation_mode": "main"}]}`)
				}))
			})
			It(`Invoke ListIkePolicies successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListIkePolicies(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListIkePoliciesOptions model
				listIkePoliciesOptionsModel := new(vpcv1.ListIkePoliciesOptions)
				listIkePoliciesOptionsModel.Start = core.StringPtr("testString")
				listIkePoliciesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listIkePoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListIkePolicies(listIkePoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListIkePolicies with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListIkePoliciesOptions model
				listIkePoliciesOptionsModel := new(vpcv1.ListIkePoliciesOptions)
				listIkePoliciesOptionsModel.Start = core.StringPtr("testString")
				listIkePoliciesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listIkePoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListIkePolicies(listIkePoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateIkePolicy(createIkePolicyOptions *CreateIkePolicyOptions) - Operation response error`, func() {
		version := "testString"
		createIkePolicyPath := "/ike_policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createIkePolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateIkePolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIkePolicyOptions model
				createIkePolicyOptionsModel := new(vpcv1.CreateIkePolicyOptions)
				createIkePolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIkePolicyOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				createIkePolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIkePolicyOptionsModel.IkeVersion = core.Int64Ptr(int64(1))
				createIkePolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				createIkePolicyOptionsModel.Name = core.StringPtr("my-ike-policy")
				createIkePolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateIkePolicy(createIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateIkePolicy(createIkePolicyOptions *CreateIkePolicyOptions)`, func() {
		version := "testString"
		createIkePolicyPath := "/ike_policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createIkePolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "authentication_algorithm": "md5", "dh_group": 2, "encryption_algorithm": "triple_des", "ike_version": 1, "key_lifetime": 28800, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "negotiation_mode": "main"}`)
				}))
			})
			It(`Invoke CreateIkePolicy successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateIkePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIkePolicyOptions model
				createIkePolicyOptionsModel := new(vpcv1.CreateIkePolicyOptions)
				createIkePolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIkePolicyOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				createIkePolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIkePolicyOptionsModel.IkeVersion = core.Int64Ptr(int64(1))
				createIkePolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				createIkePolicyOptionsModel.Name = core.StringPtr("my-ike-policy")
				createIkePolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateIkePolicy(createIkePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateIkePolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIkePolicyOptions model
				createIkePolicyOptionsModel := new(vpcv1.CreateIkePolicyOptions)
				createIkePolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIkePolicyOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				createIkePolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIkePolicyOptionsModel.IkeVersion = core.Int64Ptr(int64(1))
				createIkePolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				createIkePolicyOptionsModel.Name = core.StringPtr("my-ike-policy")
				createIkePolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateIkePolicy(createIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateIkePolicyOptions model with no property values
				createIkePolicyOptionsModelNew := new(vpcv1.CreateIkePolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateIkePolicy(createIkePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteIkePolicy(deleteIkePolicyOptions *DeleteIkePolicyOptions)`, func() {
		version := "testString"
		deleteIkePolicyPath := "/ike_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteIkePolicyPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteIkePolicy successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteIkePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteIkePolicyOptions model
				deleteIkePolicyOptionsModel := new(vpcv1.DeleteIkePolicyOptions)
				deleteIkePolicyOptionsModel.ID = core.StringPtr("testString")
				deleteIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteIkePolicy(deleteIkePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteIkePolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteIkePolicyOptions model
				deleteIkePolicyOptionsModel := new(vpcv1.DeleteIkePolicyOptions)
				deleteIkePolicyOptionsModel.ID = core.StringPtr("testString")
				deleteIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteIkePolicy(deleteIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteIkePolicyOptions model with no property values
				deleteIkePolicyOptionsModelNew := new(vpcv1.DeleteIkePolicyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteIkePolicy(deleteIkePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetIkePolicy(getIkePolicyOptions *GetIkePolicyOptions) - Operation response error`, func() {
		version := "testString"
		getIkePolicyPath := "/ike_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getIkePolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetIkePolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetIkePolicyOptions model
				getIkePolicyOptionsModel := new(vpcv1.GetIkePolicyOptions)
				getIkePolicyOptionsModel.ID = core.StringPtr("testString")
				getIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetIkePolicy(getIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetIkePolicy(getIkePolicyOptions *GetIkePolicyOptions)`, func() {
		version := "testString"
		getIkePolicyPath := "/ike_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getIkePolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "authentication_algorithm": "md5", "dh_group": 2, "encryption_algorithm": "triple_des", "ike_version": 1, "key_lifetime": 28800, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "negotiation_mode": "main"}`)
				}))
			})
			It(`Invoke GetIkePolicy successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetIkePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetIkePolicyOptions model
				getIkePolicyOptionsModel := new(vpcv1.GetIkePolicyOptions)
				getIkePolicyOptionsModel.ID = core.StringPtr("testString")
				getIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetIkePolicy(getIkePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetIkePolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetIkePolicyOptions model
				getIkePolicyOptionsModel := new(vpcv1.GetIkePolicyOptions)
				getIkePolicyOptionsModel.ID = core.StringPtr("testString")
				getIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetIkePolicy(getIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetIkePolicyOptions model with no property values
				getIkePolicyOptionsModelNew := new(vpcv1.GetIkePolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetIkePolicy(getIkePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateIkePolicy(updateIkePolicyOptions *UpdateIkePolicyOptions) - Operation response error`, func() {
		version := "testString"
		updateIkePolicyPath := "/ike_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateIkePolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateIkePolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateIkePolicyOptions model
				updateIkePolicyOptionsModel := new(vpcv1.UpdateIkePolicyOptions)
				updateIkePolicyOptionsModel.ID = core.StringPtr("testString")
				updateIkePolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				updateIkePolicyOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				updateIkePolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				updateIkePolicyOptionsModel.IkeVersion = core.Int64Ptr(int64(1))
				updateIkePolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				updateIkePolicyOptionsModel.Name = core.StringPtr("my-ike-policy")
				updateIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateIkePolicy(updateIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateIkePolicy(updateIkePolicyOptions *UpdateIkePolicyOptions)`, func() {
		version := "testString"
		updateIkePolicyPath := "/ike_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateIkePolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "authentication_algorithm": "md5", "dh_group": 2, "encryption_algorithm": "triple_des", "ike_version": 1, "key_lifetime": 28800, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "negotiation_mode": "main"}`)
				}))
			})
			It(`Invoke UpdateIkePolicy successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateIkePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateIkePolicyOptions model
				updateIkePolicyOptionsModel := new(vpcv1.UpdateIkePolicyOptions)
				updateIkePolicyOptionsModel.ID = core.StringPtr("testString")
				updateIkePolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				updateIkePolicyOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				updateIkePolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				updateIkePolicyOptionsModel.IkeVersion = core.Int64Ptr(int64(1))
				updateIkePolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				updateIkePolicyOptionsModel.Name = core.StringPtr("my-ike-policy")
				updateIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateIkePolicy(updateIkePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateIkePolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateIkePolicyOptions model
				updateIkePolicyOptionsModel := new(vpcv1.UpdateIkePolicyOptions)
				updateIkePolicyOptionsModel.ID = core.StringPtr("testString")
				updateIkePolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				updateIkePolicyOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				updateIkePolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				updateIkePolicyOptionsModel.IkeVersion = core.Int64Ptr(int64(1))
				updateIkePolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				updateIkePolicyOptionsModel.Name = core.StringPtr("my-ike-policy")
				updateIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateIkePolicy(updateIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateIkePolicyOptions model with no property values
				updateIkePolicyOptionsModelNew := new(vpcv1.UpdateIkePolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateIkePolicy(updateIkePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVpnGatewayIkePolicyConnections(listVpnGatewayIkePolicyConnectionsOptions *ListVpnGatewayIkePolicyConnectionsOptions) - Operation response error`, func() {
		version := "testString"
		listVpnGatewayIkePolicyConnectionsPath := "/ike_policies/testString/connections"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpnGatewayIkePolicyConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVpnGatewayIkePolicyConnections with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpnGatewayIkePolicyConnectionsOptions model
				listVpnGatewayIkePolicyConnectionsOptionsModel := new(vpcv1.ListVpnGatewayIkePolicyConnectionsOptions)
				listVpnGatewayIkePolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listVpnGatewayIkePolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVpnGatewayIkePolicyConnections(listVpnGatewayIkePolicyConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVpnGatewayIkePolicyConnections(listVpnGatewayIkePolicyConnectionsOptions *ListVpnGatewayIkePolicyConnectionsOptions)`, func() {
		version := "testString"
		listVpnGatewayIkePolicyConnectionsPath := "/ike_policies/testString/connections"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpnGatewayIkePolicyConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "admin_state_up": true, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "tunnels": [{"public_ip": {"address": "192.168.3.4"}, "status": "up"}], "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "status": "down"}]}`)
				}))
			})
			It(`Invoke ListVpnGatewayIkePolicyConnections successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVpnGatewayIkePolicyConnections(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVpnGatewayIkePolicyConnectionsOptions model
				listVpnGatewayIkePolicyConnectionsOptionsModel := new(vpcv1.ListVpnGatewayIkePolicyConnectionsOptions)
				listVpnGatewayIkePolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listVpnGatewayIkePolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVpnGatewayIkePolicyConnections(listVpnGatewayIkePolicyConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVpnGatewayIkePolicyConnections with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpnGatewayIkePolicyConnectionsOptions model
				listVpnGatewayIkePolicyConnectionsOptionsModel := new(vpcv1.ListVpnGatewayIkePolicyConnectionsOptions)
				listVpnGatewayIkePolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listVpnGatewayIkePolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVpnGatewayIkePolicyConnections(listVpnGatewayIkePolicyConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVpnGatewayIkePolicyConnectionsOptions model with no property values
				listVpnGatewayIkePolicyConnectionsOptionsModelNew := new(vpcv1.ListVpnGatewayIkePolicyConnectionsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListVpnGatewayIkePolicyConnections(listVpnGatewayIkePolicyConnectionsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListIpsecPolicies(listIpsecPoliciesOptions *ListIpsecPoliciesOptions) - Operation response error`, func() {
		version := "testString"
		listIpsecPoliciesPath := "/ipsec_policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listIpsecPoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListIpsecPolicies with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListIpsecPoliciesOptions model
				listIpsecPoliciesOptionsModel := new(vpcv1.ListIpsecPoliciesOptions)
				listIpsecPoliciesOptionsModel.Start = core.StringPtr("testString")
				listIpsecPoliciesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listIpsecPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListIpsecPolicies(listIpsecPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListIpsecPolicies(listIpsecPoliciesOptions *ListIpsecPoliciesOptions)`, func() {
		version := "testString"
		listIpsecPoliciesPath := "/ipsec_policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listIpsecPoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132, "ipsec_policies": [{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "authentication_algorithm": "md5", "encryption_algorithm": "triple_des", "key_lifetime": 3600, "pfs": "disabled", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "transform_protocol": "esp"}]}`)
				}))
			})
			It(`Invoke ListIpsecPolicies successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListIpsecPolicies(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListIpsecPoliciesOptions model
				listIpsecPoliciesOptionsModel := new(vpcv1.ListIpsecPoliciesOptions)
				listIpsecPoliciesOptionsModel.Start = core.StringPtr("testString")
				listIpsecPoliciesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listIpsecPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListIpsecPolicies(listIpsecPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListIpsecPolicies with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListIpsecPoliciesOptions model
				listIpsecPoliciesOptionsModel := new(vpcv1.ListIpsecPoliciesOptions)
				listIpsecPoliciesOptionsModel.Start = core.StringPtr("testString")
				listIpsecPoliciesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listIpsecPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListIpsecPolicies(listIpsecPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateIpsecPolicy(createIpsecPolicyOptions *CreateIpsecPolicyOptions) - Operation response error`, func() {
		version := "testString"
		createIpsecPolicyPath := "/ipsec_policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createIpsecPolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateIpsecPolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIpsecPolicyOptions model
				createIpsecPolicyOptionsModel := new(vpcv1.CreateIpsecPolicyOptions)
				createIpsecPolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIpsecPolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIpsecPolicyOptionsModel.Pfs = core.StringPtr("disabled")
				createIpsecPolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(3600))
				createIpsecPolicyOptionsModel.Name = core.StringPtr("my-ipsec-policy")
				createIpsecPolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateIpsecPolicy(createIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateIpsecPolicy(createIpsecPolicyOptions *CreateIpsecPolicyOptions)`, func() {
		version := "testString"
		createIpsecPolicyPath := "/ipsec_policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createIpsecPolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "authentication_algorithm": "md5", "encryption_algorithm": "triple_des", "key_lifetime": 3600, "pfs": "disabled", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "transform_protocol": "esp"}`)
				}))
			})
			It(`Invoke CreateIpsecPolicy successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateIpsecPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIpsecPolicyOptions model
				createIpsecPolicyOptionsModel := new(vpcv1.CreateIpsecPolicyOptions)
				createIpsecPolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIpsecPolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIpsecPolicyOptionsModel.Pfs = core.StringPtr("disabled")
				createIpsecPolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(3600))
				createIpsecPolicyOptionsModel.Name = core.StringPtr("my-ipsec-policy")
				createIpsecPolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateIpsecPolicy(createIpsecPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateIpsecPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIpsecPolicyOptions model
				createIpsecPolicyOptionsModel := new(vpcv1.CreateIpsecPolicyOptions)
				createIpsecPolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIpsecPolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIpsecPolicyOptionsModel.Pfs = core.StringPtr("disabled")
				createIpsecPolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(3600))
				createIpsecPolicyOptionsModel.Name = core.StringPtr("my-ipsec-policy")
				createIpsecPolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateIpsecPolicy(createIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateIpsecPolicyOptions model with no property values
				createIpsecPolicyOptionsModelNew := new(vpcv1.CreateIpsecPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateIpsecPolicy(createIpsecPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteIpsecPolicy(deleteIpsecPolicyOptions *DeleteIpsecPolicyOptions)`, func() {
		version := "testString"
		deleteIpsecPolicyPath := "/ipsec_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteIpsecPolicyPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteIpsecPolicy successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteIpsecPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteIpsecPolicyOptions model
				deleteIpsecPolicyOptionsModel := new(vpcv1.DeleteIpsecPolicyOptions)
				deleteIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				deleteIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteIpsecPolicy(deleteIpsecPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteIpsecPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteIpsecPolicyOptions model
				deleteIpsecPolicyOptionsModel := new(vpcv1.DeleteIpsecPolicyOptions)
				deleteIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				deleteIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteIpsecPolicy(deleteIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteIpsecPolicyOptions model with no property values
				deleteIpsecPolicyOptionsModelNew := new(vpcv1.DeleteIpsecPolicyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteIpsecPolicy(deleteIpsecPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetIpsecPolicy(getIpsecPolicyOptions *GetIpsecPolicyOptions) - Operation response error`, func() {
		version := "testString"
		getIpsecPolicyPath := "/ipsec_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getIpsecPolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetIpsecPolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetIpsecPolicyOptions model
				getIpsecPolicyOptionsModel := new(vpcv1.GetIpsecPolicyOptions)
				getIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				getIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetIpsecPolicy(getIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetIpsecPolicy(getIpsecPolicyOptions *GetIpsecPolicyOptions)`, func() {
		version := "testString"
		getIpsecPolicyPath := "/ipsec_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getIpsecPolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "authentication_algorithm": "md5", "encryption_algorithm": "triple_des", "key_lifetime": 3600, "pfs": "disabled", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "transform_protocol": "esp"}`)
				}))
			})
			It(`Invoke GetIpsecPolicy successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetIpsecPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetIpsecPolicyOptions model
				getIpsecPolicyOptionsModel := new(vpcv1.GetIpsecPolicyOptions)
				getIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				getIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetIpsecPolicy(getIpsecPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetIpsecPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetIpsecPolicyOptions model
				getIpsecPolicyOptionsModel := new(vpcv1.GetIpsecPolicyOptions)
				getIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				getIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetIpsecPolicy(getIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetIpsecPolicyOptions model with no property values
				getIpsecPolicyOptionsModelNew := new(vpcv1.GetIpsecPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetIpsecPolicy(getIpsecPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateIpsecPolicy(updateIpsecPolicyOptions *UpdateIpsecPolicyOptions) - Operation response error`, func() {
		version := "testString"
		updateIpsecPolicyPath := "/ipsec_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateIpsecPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateIpsecPolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateIpsecPolicyOptions model
				updateIpsecPolicyOptionsModel := new(vpcv1.UpdateIpsecPolicyOptions)
				updateIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				updateIpsecPolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				updateIpsecPolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				updateIpsecPolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(3600))
				updateIpsecPolicyOptionsModel.Name = core.StringPtr("my-ipsec-policy")
				updateIpsecPolicyOptionsModel.Pfs = core.StringPtr("disabled")
				updateIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateIpsecPolicy(updateIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateIpsecPolicy(updateIpsecPolicyOptions *UpdateIpsecPolicyOptions)`, func() {
		version := "testString"
		updateIpsecPolicyPath := "/ipsec_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateIpsecPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "authentication_algorithm": "md5", "encryption_algorithm": "triple_des", "key_lifetime": 3600, "pfs": "disabled", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "transform_protocol": "esp"}`)
				}))
			})
			It(`Invoke UpdateIpsecPolicy successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateIpsecPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateIpsecPolicyOptions model
				updateIpsecPolicyOptionsModel := new(vpcv1.UpdateIpsecPolicyOptions)
				updateIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				updateIpsecPolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				updateIpsecPolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				updateIpsecPolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(3600))
				updateIpsecPolicyOptionsModel.Name = core.StringPtr("my-ipsec-policy")
				updateIpsecPolicyOptionsModel.Pfs = core.StringPtr("disabled")
				updateIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateIpsecPolicy(updateIpsecPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateIpsecPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateIpsecPolicyOptions model
				updateIpsecPolicyOptionsModel := new(vpcv1.UpdateIpsecPolicyOptions)
				updateIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				updateIpsecPolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				updateIpsecPolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				updateIpsecPolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(3600))
				updateIpsecPolicyOptionsModel.Name = core.StringPtr("my-ipsec-policy")
				updateIpsecPolicyOptionsModel.Pfs = core.StringPtr("disabled")
				updateIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateIpsecPolicy(updateIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateIpsecPolicyOptions model with no property values
				updateIpsecPolicyOptionsModelNew := new(vpcv1.UpdateIpsecPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateIpsecPolicy(updateIpsecPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVpnGatewayIpsecPolicyConnections(listVpnGatewayIpsecPolicyConnectionsOptions *ListVpnGatewayIpsecPolicyConnectionsOptions) - Operation response error`, func() {
		version := "testString"
		listVpnGatewayIpsecPolicyConnectionsPath := "/ipsec_policies/testString/connections"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpnGatewayIpsecPolicyConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVpnGatewayIpsecPolicyConnections with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpnGatewayIpsecPolicyConnectionsOptions model
				listVpnGatewayIpsecPolicyConnectionsOptionsModel := new(vpcv1.ListVpnGatewayIpsecPolicyConnectionsOptions)
				listVpnGatewayIpsecPolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listVpnGatewayIpsecPolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVpnGatewayIpsecPolicyConnections(listVpnGatewayIpsecPolicyConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVpnGatewayIpsecPolicyConnections(listVpnGatewayIpsecPolicyConnectionsOptions *ListVpnGatewayIpsecPolicyConnectionsOptions)`, func() {
		version := "testString"
		listVpnGatewayIpsecPolicyConnectionsPath := "/ipsec_policies/testString/connections"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpnGatewayIpsecPolicyConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "admin_state_up": true, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "tunnels": [{"public_ip": {"address": "192.168.3.4"}, "status": "up"}], "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "status": "down"}]}`)
				}))
			})
			It(`Invoke ListVpnGatewayIpsecPolicyConnections successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVpnGatewayIpsecPolicyConnections(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVpnGatewayIpsecPolicyConnectionsOptions model
				listVpnGatewayIpsecPolicyConnectionsOptionsModel := new(vpcv1.ListVpnGatewayIpsecPolicyConnectionsOptions)
				listVpnGatewayIpsecPolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listVpnGatewayIpsecPolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVpnGatewayIpsecPolicyConnections(listVpnGatewayIpsecPolicyConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVpnGatewayIpsecPolicyConnections with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpnGatewayIpsecPolicyConnectionsOptions model
				listVpnGatewayIpsecPolicyConnectionsOptionsModel := new(vpcv1.ListVpnGatewayIpsecPolicyConnectionsOptions)
				listVpnGatewayIpsecPolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listVpnGatewayIpsecPolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVpnGatewayIpsecPolicyConnections(listVpnGatewayIpsecPolicyConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVpnGatewayIpsecPolicyConnectionsOptions model with no property values
				listVpnGatewayIpsecPolicyConnectionsOptionsModelNew := new(vpcv1.ListVpnGatewayIpsecPolicyConnectionsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListVpnGatewayIpsecPolicyConnections(listVpnGatewayIpsecPolicyConnectionsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVpnGateways(listVpnGatewaysOptions *ListVpnGatewaysOptions) - Operation response error`, func() {
		version := "testString"
		listVpnGatewaysPath := "/vpn_gateways"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpnGatewaysPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["sort"]).To(Equal([]string{"name"}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVpnGateways with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpnGatewaysOptions model
				listVpnGatewaysOptionsModel := new(vpcv1.ListVpnGatewaysOptions)
				listVpnGatewaysOptionsModel.Start = core.StringPtr("testString")
				listVpnGatewaysOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVpnGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVpnGatewaysOptionsModel.Sort = core.StringPtr("name")
				listVpnGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVpnGateways(listVpnGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVpnGateways(listVpnGatewaysOptions *ListVpnGatewaysOptions)`, func() {
		version := "testString"
		listVpnGatewaysPath := "/vpn_gateways"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpnGatewaysPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["sort"]).To(Equal([]string{"name"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132, "vpn_gateways": [{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}]}`)
				}))
			})
			It(`Invoke ListVpnGateways successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVpnGateways(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVpnGatewaysOptions model
				listVpnGatewaysOptionsModel := new(vpcv1.ListVpnGatewaysOptions)
				listVpnGatewaysOptionsModel.Start = core.StringPtr("testString")
				listVpnGatewaysOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVpnGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVpnGatewaysOptionsModel.Sort = core.StringPtr("name")
				listVpnGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVpnGateways(listVpnGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVpnGateways with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpnGatewaysOptions model
				listVpnGatewaysOptionsModel := new(vpcv1.ListVpnGatewaysOptions)
				listVpnGatewaysOptionsModel.Start = core.StringPtr("testString")
				listVpnGatewaysOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVpnGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVpnGatewaysOptionsModel.Sort = core.StringPtr("name")
				listVpnGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVpnGateways(listVpnGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVpnGateway(createVpnGatewayOptions *CreateVpnGatewayOptions) - Operation response error`, func() {
		version := "testString"
		createVpnGatewayPath := "/vpn_gateways"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVpnGatewayPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVpnGateway with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the CreateVpnGatewayOptions model
				createVpnGatewayOptionsModel := new(vpcv1.CreateVpnGatewayOptions)
				createVpnGatewayOptionsModel.Subnet = subnetIdentityModel
				createVpnGatewayOptionsModel.Name = core.StringPtr("my-vpn-gateway")
				createVpnGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createVpnGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateVpnGateway(createVpnGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateVpnGateway(createVpnGatewayOptions *CreateVpnGatewayOptions)`, func() {
		version := "testString"
		createVpnGatewayPath := "/vpn_gateways"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVpnGatewayPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}`)
				}))
			})
			It(`Invoke CreateVpnGateway successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateVpnGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the CreateVpnGatewayOptions model
				createVpnGatewayOptionsModel := new(vpcv1.CreateVpnGatewayOptions)
				createVpnGatewayOptionsModel.Subnet = subnetIdentityModel
				createVpnGatewayOptionsModel.Name = core.StringPtr("my-vpn-gateway")
				createVpnGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createVpnGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateVpnGateway(createVpnGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateVpnGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the CreateVpnGatewayOptions model
				createVpnGatewayOptionsModel := new(vpcv1.CreateVpnGatewayOptions)
				createVpnGatewayOptionsModel.Subnet = subnetIdentityModel
				createVpnGatewayOptionsModel.Name = core.StringPtr("my-vpn-gateway")
				createVpnGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createVpnGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateVpnGateway(createVpnGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVpnGatewayOptions model with no property values
				createVpnGatewayOptionsModelNew := new(vpcv1.CreateVpnGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateVpnGateway(createVpnGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteVpnGateway(deleteVpnGatewayOptions *DeleteVpnGatewayOptions)`, func() {
		version := "testString"
		deleteVpnGatewayPath := "/vpn_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteVpnGatewayPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(202)
				}))
			})
			It(`Invoke DeleteVpnGateway successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteVpnGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVpnGatewayOptions model
				deleteVpnGatewayOptionsModel := new(vpcv1.DeleteVpnGatewayOptions)
				deleteVpnGatewayOptionsModel.ID = core.StringPtr("testString")
				deleteVpnGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteVpnGateway(deleteVpnGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVpnGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteVpnGatewayOptions model
				deleteVpnGatewayOptionsModel := new(vpcv1.DeleteVpnGatewayOptions)
				deleteVpnGatewayOptionsModel.ID = core.StringPtr("testString")
				deleteVpnGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteVpnGateway(deleteVpnGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVpnGatewayOptions model with no property values
				deleteVpnGatewayOptionsModelNew := new(vpcv1.DeleteVpnGatewayOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteVpnGateway(deleteVpnGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVpnGateway(getVpnGatewayOptions *GetVpnGatewayOptions) - Operation response error`, func() {
		version := "testString"
		getVpnGatewayPath := "/vpn_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpnGatewayPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVpnGateway with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpnGatewayOptions model
				getVpnGatewayOptionsModel := new(vpcv1.GetVpnGatewayOptions)
				getVpnGatewayOptionsModel.ID = core.StringPtr("testString")
				getVpnGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVpnGateway(getVpnGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVpnGateway(getVpnGatewayOptions *GetVpnGatewayOptions)`, func() {
		version := "testString"
		getVpnGatewayPath := "/vpn_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpnGatewayPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}`)
				}))
			})
			It(`Invoke GetVpnGateway successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVpnGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVpnGatewayOptions model
				getVpnGatewayOptionsModel := new(vpcv1.GetVpnGatewayOptions)
				getVpnGatewayOptionsModel.ID = core.StringPtr("testString")
				getVpnGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVpnGateway(getVpnGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVpnGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpnGatewayOptions model
				getVpnGatewayOptionsModel := new(vpcv1.GetVpnGatewayOptions)
				getVpnGatewayOptionsModel.ID = core.StringPtr("testString")
				getVpnGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVpnGateway(getVpnGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVpnGatewayOptions model with no property values
				getVpnGatewayOptionsModelNew := new(vpcv1.GetVpnGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVpnGateway(getVpnGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVpnGateway(updateVpnGatewayOptions *UpdateVpnGatewayOptions) - Operation response error`, func() {
		version := "testString"
		updateVpnGatewayPath := "/vpn_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVpnGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVpnGateway with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVpnGatewayOptions model
				updateVpnGatewayOptionsModel := new(vpcv1.UpdateVpnGatewayOptions)
				updateVpnGatewayOptionsModel.ID = core.StringPtr("testString")
				updateVpnGatewayOptionsModel.Name = core.StringPtr("my-vpn-gateway")
				updateVpnGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateVpnGateway(updateVpnGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateVpnGateway(updateVpnGatewayOptions *UpdateVpnGatewayOptions)`, func() {
		version := "testString"
		updateVpnGatewayPath := "/vpn_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVpnGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}`)
				}))
			})
			It(`Invoke UpdateVpnGateway successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateVpnGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateVpnGatewayOptions model
				updateVpnGatewayOptionsModel := new(vpcv1.UpdateVpnGatewayOptions)
				updateVpnGatewayOptionsModel.ID = core.StringPtr("testString")
				updateVpnGatewayOptionsModel.Name = core.StringPtr("my-vpn-gateway")
				updateVpnGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateVpnGateway(updateVpnGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateVpnGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVpnGatewayOptions model
				updateVpnGatewayOptionsModel := new(vpcv1.UpdateVpnGatewayOptions)
				updateVpnGatewayOptionsModel.ID = core.StringPtr("testString")
				updateVpnGatewayOptionsModel.Name = core.StringPtr("my-vpn-gateway")
				updateVpnGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateVpnGateway(updateVpnGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVpnGatewayOptions model with no property values
				updateVpnGatewayOptionsModelNew := new(vpcv1.UpdateVpnGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateVpnGateway(updateVpnGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVpnGatewayConnections(listVpnGatewayConnectionsOptions *ListVpnGatewayConnectionsOptions) - Operation response error`, func() {
		version := "testString"
		listVpnGatewayConnectionsPath := "/vpn_gateways/testString/connections"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpnGatewayConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVpnGatewayConnections with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpnGatewayConnectionsOptions model
				listVpnGatewayConnectionsOptionsModel := new(vpcv1.ListVpnGatewayConnectionsOptions)
				listVpnGatewayConnectionsOptionsModel.VpnGatewayID = core.StringPtr("testString")
				listVpnGatewayConnectionsOptionsModel.Status = core.StringPtr("testString")
				listVpnGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVpnGatewayConnections(listVpnGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVpnGatewayConnections(listVpnGatewayConnectionsOptions *ListVpnGatewayConnectionsOptions)`, func() {
		version := "testString"
		listVpnGatewayConnectionsPath := "/vpn_gateways/testString/connections"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpnGatewayConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "admin_state_up": true, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "tunnels": [{"public_ip": {"address": "192.168.3.4"}, "status": "up"}], "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "status": "down"}]}`)
				}))
			})
			It(`Invoke ListVpnGatewayConnections successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVpnGatewayConnections(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVpnGatewayConnectionsOptions model
				listVpnGatewayConnectionsOptionsModel := new(vpcv1.ListVpnGatewayConnectionsOptions)
				listVpnGatewayConnectionsOptionsModel.VpnGatewayID = core.StringPtr("testString")
				listVpnGatewayConnectionsOptionsModel.Status = core.StringPtr("testString")
				listVpnGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVpnGatewayConnections(listVpnGatewayConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVpnGatewayConnections with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpnGatewayConnectionsOptions model
				listVpnGatewayConnectionsOptionsModel := new(vpcv1.ListVpnGatewayConnectionsOptions)
				listVpnGatewayConnectionsOptionsModel.VpnGatewayID = core.StringPtr("testString")
				listVpnGatewayConnectionsOptionsModel.Status = core.StringPtr("testString")
				listVpnGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVpnGatewayConnections(listVpnGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVpnGatewayConnectionsOptions model with no property values
				listVpnGatewayConnectionsOptionsModelNew := new(vpcv1.ListVpnGatewayConnectionsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListVpnGatewayConnections(listVpnGatewayConnectionsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVpnGatewayConnection(createVpnGatewayConnectionOptions *CreateVpnGatewayConnectionOptions) - Operation response error`, func() {
		version := "testString"
		createVpnGatewayConnectionPath := "/vpn_gateways/testString/connections"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVpnGatewayConnectionPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVpnGatewayConnection with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the IKEPolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IKEPolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionDPDPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDPDPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the CreateVpnGatewayConnectionOptions model
				createVpnGatewayConnectionOptionsModel := new(vpcv1.CreateVpnGatewayConnectionOptions)
				createVpnGatewayConnectionOptionsModel.VpnGatewayID = core.StringPtr("testString")
				createVpnGatewayConnectionOptionsModel.PeerAddress = core.StringPtr("169.21.50.5")
				createVpnGatewayConnectionOptionsModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				createVpnGatewayConnectionOptionsModel.AdminStateUp = core.BoolPtr(true)
				createVpnGatewayConnectionOptionsModel.IkePolicy = ikePolicyIdentityModel
				createVpnGatewayConnectionOptionsModel.IpsecPolicy = iPsecPolicyIdentityModel
				createVpnGatewayConnectionOptionsModel.Name = core.StringPtr("my-vpn-connection")
				createVpnGatewayConnectionOptionsModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				createVpnGatewayConnectionOptionsModel.LocalCidrs = []string{"192.168.1.0/24"}
				createVpnGatewayConnectionOptionsModel.PeerCidrs = []string{"10.45.1.0/24"}
				createVpnGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateVpnGatewayConnection(createVpnGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateVpnGatewayConnection(createVpnGatewayConnectionOptions *CreateVpnGatewayConnectionOptions)`, func() {
		version := "testString"
		createVpnGatewayConnectionPath := "/vpn_gateways/testString/connections"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVpnGatewayConnectionPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "admin_state_up": true, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "tunnels": [{"public_ip": {"address": "192.168.3.4"}, "status": "up"}], "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "status": "down"}`)
				}))
			})
			It(`Invoke CreateVpnGatewayConnection successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateVpnGatewayConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the IKEPolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IKEPolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionDPDPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDPDPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the CreateVpnGatewayConnectionOptions model
				createVpnGatewayConnectionOptionsModel := new(vpcv1.CreateVpnGatewayConnectionOptions)
				createVpnGatewayConnectionOptionsModel.VpnGatewayID = core.StringPtr("testString")
				createVpnGatewayConnectionOptionsModel.PeerAddress = core.StringPtr("169.21.50.5")
				createVpnGatewayConnectionOptionsModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				createVpnGatewayConnectionOptionsModel.AdminStateUp = core.BoolPtr(true)
				createVpnGatewayConnectionOptionsModel.IkePolicy = ikePolicyIdentityModel
				createVpnGatewayConnectionOptionsModel.IpsecPolicy = iPsecPolicyIdentityModel
				createVpnGatewayConnectionOptionsModel.Name = core.StringPtr("my-vpn-connection")
				createVpnGatewayConnectionOptionsModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				createVpnGatewayConnectionOptionsModel.LocalCidrs = []string{"192.168.1.0/24"}
				createVpnGatewayConnectionOptionsModel.PeerCidrs = []string{"10.45.1.0/24"}
				createVpnGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateVpnGatewayConnection(createVpnGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateVpnGatewayConnection with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the IKEPolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IKEPolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionDPDPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDPDPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the CreateVpnGatewayConnectionOptions model
				createVpnGatewayConnectionOptionsModel := new(vpcv1.CreateVpnGatewayConnectionOptions)
				createVpnGatewayConnectionOptionsModel.VpnGatewayID = core.StringPtr("testString")
				createVpnGatewayConnectionOptionsModel.PeerAddress = core.StringPtr("169.21.50.5")
				createVpnGatewayConnectionOptionsModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				createVpnGatewayConnectionOptionsModel.AdminStateUp = core.BoolPtr(true)
				createVpnGatewayConnectionOptionsModel.IkePolicy = ikePolicyIdentityModel
				createVpnGatewayConnectionOptionsModel.IpsecPolicy = iPsecPolicyIdentityModel
				createVpnGatewayConnectionOptionsModel.Name = core.StringPtr("my-vpn-connection")
				createVpnGatewayConnectionOptionsModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				createVpnGatewayConnectionOptionsModel.LocalCidrs = []string{"192.168.1.0/24"}
				createVpnGatewayConnectionOptionsModel.PeerCidrs = []string{"10.45.1.0/24"}
				createVpnGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateVpnGatewayConnection(createVpnGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVpnGatewayConnectionOptions model with no property values
				createVpnGatewayConnectionOptionsModelNew := new(vpcv1.CreateVpnGatewayConnectionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateVpnGatewayConnection(createVpnGatewayConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteVpnGatewayConnection(deleteVpnGatewayConnectionOptions *DeleteVpnGatewayConnectionOptions)`, func() {
		version := "testString"
		deleteVpnGatewayConnectionPath := "/vpn_gateways/testString/connections/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteVpnGatewayConnectionPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(202)
				}))
			})
			It(`Invoke DeleteVpnGatewayConnection successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteVpnGatewayConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVpnGatewayConnectionOptions model
				deleteVpnGatewayConnectionOptionsModel := new(vpcv1.DeleteVpnGatewayConnectionOptions)
				deleteVpnGatewayConnectionOptionsModel.VpnGatewayID = core.StringPtr("testString")
				deleteVpnGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				deleteVpnGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteVpnGatewayConnection(deleteVpnGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVpnGatewayConnection with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteVpnGatewayConnectionOptions model
				deleteVpnGatewayConnectionOptionsModel := new(vpcv1.DeleteVpnGatewayConnectionOptions)
				deleteVpnGatewayConnectionOptionsModel.VpnGatewayID = core.StringPtr("testString")
				deleteVpnGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				deleteVpnGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteVpnGatewayConnection(deleteVpnGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVpnGatewayConnectionOptions model with no property values
				deleteVpnGatewayConnectionOptionsModelNew := new(vpcv1.DeleteVpnGatewayConnectionOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteVpnGatewayConnection(deleteVpnGatewayConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVpnGatewayConnection(getVpnGatewayConnectionOptions *GetVpnGatewayConnectionOptions) - Operation response error`, func() {
		version := "testString"
		getVpnGatewayConnectionPath := "/vpn_gateways/testString/connections/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpnGatewayConnectionPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVpnGatewayConnection with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpnGatewayConnectionOptions model
				getVpnGatewayConnectionOptionsModel := new(vpcv1.GetVpnGatewayConnectionOptions)
				getVpnGatewayConnectionOptionsModel.VpnGatewayID = core.StringPtr("testString")
				getVpnGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				getVpnGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVpnGatewayConnection(getVpnGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVpnGatewayConnection(getVpnGatewayConnectionOptions *GetVpnGatewayConnectionOptions)`, func() {
		version := "testString"
		getVpnGatewayConnectionPath := "/vpn_gateways/testString/connections/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpnGatewayConnectionPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "admin_state_up": true, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "tunnels": [{"public_ip": {"address": "192.168.3.4"}, "status": "up"}], "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "status": "down"}`)
				}))
			})
			It(`Invoke GetVpnGatewayConnection successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVpnGatewayConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVpnGatewayConnectionOptions model
				getVpnGatewayConnectionOptionsModel := new(vpcv1.GetVpnGatewayConnectionOptions)
				getVpnGatewayConnectionOptionsModel.VpnGatewayID = core.StringPtr("testString")
				getVpnGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				getVpnGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVpnGatewayConnection(getVpnGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVpnGatewayConnection with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpnGatewayConnectionOptions model
				getVpnGatewayConnectionOptionsModel := new(vpcv1.GetVpnGatewayConnectionOptions)
				getVpnGatewayConnectionOptionsModel.VpnGatewayID = core.StringPtr("testString")
				getVpnGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				getVpnGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVpnGatewayConnection(getVpnGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVpnGatewayConnectionOptions model with no property values
				getVpnGatewayConnectionOptionsModelNew := new(vpcv1.GetVpnGatewayConnectionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVpnGatewayConnection(getVpnGatewayConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVpnGatewayConnection(updateVpnGatewayConnectionOptions *UpdateVpnGatewayConnectionOptions) - Operation response error`, func() {
		version := "testString"
		updateVpnGatewayConnectionPath := "/vpn_gateways/testString/connections/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVpnGatewayConnectionPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVpnGatewayConnection with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the IKEPolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IKEPolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionDPDPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDPDPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the UpdateVpnGatewayConnectionOptions model
				updateVpnGatewayConnectionOptionsModel := new(vpcv1.UpdateVpnGatewayConnectionOptions)
				updateVpnGatewayConnectionOptionsModel.VpnGatewayID = core.StringPtr("testString")
				updateVpnGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				updateVpnGatewayConnectionOptionsModel.AdminStateUp = core.BoolPtr(true)
				updateVpnGatewayConnectionOptionsModel.IkePolicy = ikePolicyIdentityModel
				updateVpnGatewayConnectionOptionsModel.IpsecPolicy = iPsecPolicyIdentityModel
				updateVpnGatewayConnectionOptionsModel.Name = core.StringPtr("my-vpn-connection")
				updateVpnGatewayConnectionOptionsModel.PeerAddress = core.StringPtr("169.21.50.5")
				updateVpnGatewayConnectionOptionsModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				updateVpnGatewayConnectionOptionsModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				updateVpnGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateVpnGatewayConnection(updateVpnGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateVpnGatewayConnection(updateVpnGatewayConnectionOptions *UpdateVpnGatewayConnectionOptions)`, func() {
		version := "testString"
		updateVpnGatewayConnectionPath := "/vpn_gateways/testString/connections/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVpnGatewayConnectionPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "admin_state_up": true, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "tunnels": [{"public_ip": {"address": "192.168.3.4"}, "status": "up"}], "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "status": "down"}`)
				}))
			})
			It(`Invoke UpdateVpnGatewayConnection successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateVpnGatewayConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the IKEPolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IKEPolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionDPDPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDPDPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the UpdateVpnGatewayConnectionOptions model
				updateVpnGatewayConnectionOptionsModel := new(vpcv1.UpdateVpnGatewayConnectionOptions)
				updateVpnGatewayConnectionOptionsModel.VpnGatewayID = core.StringPtr("testString")
				updateVpnGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				updateVpnGatewayConnectionOptionsModel.AdminStateUp = core.BoolPtr(true)
				updateVpnGatewayConnectionOptionsModel.IkePolicy = ikePolicyIdentityModel
				updateVpnGatewayConnectionOptionsModel.IpsecPolicy = iPsecPolicyIdentityModel
				updateVpnGatewayConnectionOptionsModel.Name = core.StringPtr("my-vpn-connection")
				updateVpnGatewayConnectionOptionsModel.PeerAddress = core.StringPtr("169.21.50.5")
				updateVpnGatewayConnectionOptionsModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				updateVpnGatewayConnectionOptionsModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				updateVpnGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateVpnGatewayConnection(updateVpnGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateVpnGatewayConnection with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the IKEPolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IKEPolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionDPDPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDPDPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the UpdateVpnGatewayConnectionOptions model
				updateVpnGatewayConnectionOptionsModel := new(vpcv1.UpdateVpnGatewayConnectionOptions)
				updateVpnGatewayConnectionOptionsModel.VpnGatewayID = core.StringPtr("testString")
				updateVpnGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				updateVpnGatewayConnectionOptionsModel.AdminStateUp = core.BoolPtr(true)
				updateVpnGatewayConnectionOptionsModel.IkePolicy = ikePolicyIdentityModel
				updateVpnGatewayConnectionOptionsModel.IpsecPolicy = iPsecPolicyIdentityModel
				updateVpnGatewayConnectionOptionsModel.Name = core.StringPtr("my-vpn-connection")
				updateVpnGatewayConnectionOptionsModel.PeerAddress = core.StringPtr("169.21.50.5")
				updateVpnGatewayConnectionOptionsModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				updateVpnGatewayConnectionOptionsModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				updateVpnGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateVpnGatewayConnection(updateVpnGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVpnGatewayConnectionOptions model with no property values
				updateVpnGatewayConnectionOptionsModelNew := new(vpcv1.UpdateVpnGatewayConnectionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateVpnGatewayConnection(updateVpnGatewayConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVpnGatewayConnectionLocalCidrs(listVpnGatewayConnectionLocalCidrsOptions *ListVpnGatewayConnectionLocalCidrsOptions) - Operation response error`, func() {
		version := "testString"
		listVpnGatewayConnectionLocalCidrsPath := "/vpn_gateways/testString/connections/testString/local_cidrs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpnGatewayConnectionLocalCidrsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVpnGatewayConnectionLocalCidrs with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpnGatewayConnectionLocalCidrsOptions model
				listVpnGatewayConnectionLocalCidrsOptionsModel := new(vpcv1.ListVpnGatewayConnectionLocalCidrsOptions)
				listVpnGatewayConnectionLocalCidrsOptionsModel.VpnGatewayID = core.StringPtr("testString")
				listVpnGatewayConnectionLocalCidrsOptionsModel.ID = core.StringPtr("testString")
				listVpnGatewayConnectionLocalCidrsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVpnGatewayConnectionLocalCidrs(listVpnGatewayConnectionLocalCidrsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVpnGatewayConnectionLocalCidrs(listVpnGatewayConnectionLocalCidrsOptions *ListVpnGatewayConnectionLocalCidrsOptions)`, func() {
		version := "testString"
		listVpnGatewayConnectionLocalCidrsPath := "/vpn_gateways/testString/connections/testString/local_cidrs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpnGatewayConnectionLocalCidrsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"local_cidrs": ["192.168.1.0/24"]}`)
				}))
			})
			It(`Invoke ListVpnGatewayConnectionLocalCidrs successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVpnGatewayConnectionLocalCidrs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVpnGatewayConnectionLocalCidrsOptions model
				listVpnGatewayConnectionLocalCidrsOptionsModel := new(vpcv1.ListVpnGatewayConnectionLocalCidrsOptions)
				listVpnGatewayConnectionLocalCidrsOptionsModel.VpnGatewayID = core.StringPtr("testString")
				listVpnGatewayConnectionLocalCidrsOptionsModel.ID = core.StringPtr("testString")
				listVpnGatewayConnectionLocalCidrsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVpnGatewayConnectionLocalCidrs(listVpnGatewayConnectionLocalCidrsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVpnGatewayConnectionLocalCidrs with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpnGatewayConnectionLocalCidrsOptions model
				listVpnGatewayConnectionLocalCidrsOptionsModel := new(vpcv1.ListVpnGatewayConnectionLocalCidrsOptions)
				listVpnGatewayConnectionLocalCidrsOptionsModel.VpnGatewayID = core.StringPtr("testString")
				listVpnGatewayConnectionLocalCidrsOptionsModel.ID = core.StringPtr("testString")
				listVpnGatewayConnectionLocalCidrsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVpnGatewayConnectionLocalCidrs(listVpnGatewayConnectionLocalCidrsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVpnGatewayConnectionLocalCidrsOptions model with no property values
				listVpnGatewayConnectionLocalCidrsOptionsModelNew := new(vpcv1.ListVpnGatewayConnectionLocalCidrsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListVpnGatewayConnectionLocalCidrs(listVpnGatewayConnectionLocalCidrsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteVpnGatewayConnectionLocalCidr(deleteVpnGatewayConnectionLocalCidrOptions *DeleteVpnGatewayConnectionLocalCidrOptions)`, func() {
		version := "testString"
		deleteVpnGatewayConnectionLocalCidrPath := "/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteVpnGatewayConnectionLocalCidrPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVpnGatewayConnectionLocalCidr successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteVpnGatewayConnectionLocalCidr(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVpnGatewayConnectionLocalCidrOptions model
				deleteVpnGatewayConnectionLocalCidrOptionsModel := new(vpcv1.DeleteVpnGatewayConnectionLocalCidrOptions)
				deleteVpnGatewayConnectionLocalCidrOptionsModel.VpnGatewayID = core.StringPtr("testString")
				deleteVpnGatewayConnectionLocalCidrOptionsModel.ID = core.StringPtr("testString")
				deleteVpnGatewayConnectionLocalCidrOptionsModel.PrefixAddress = core.StringPtr("testString")
				deleteVpnGatewayConnectionLocalCidrOptionsModel.PrefixLength = core.StringPtr("testString")
				deleteVpnGatewayConnectionLocalCidrOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteVpnGatewayConnectionLocalCidr(deleteVpnGatewayConnectionLocalCidrOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVpnGatewayConnectionLocalCidr with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteVpnGatewayConnectionLocalCidrOptions model
				deleteVpnGatewayConnectionLocalCidrOptionsModel := new(vpcv1.DeleteVpnGatewayConnectionLocalCidrOptions)
				deleteVpnGatewayConnectionLocalCidrOptionsModel.VpnGatewayID = core.StringPtr("testString")
				deleteVpnGatewayConnectionLocalCidrOptionsModel.ID = core.StringPtr("testString")
				deleteVpnGatewayConnectionLocalCidrOptionsModel.PrefixAddress = core.StringPtr("testString")
				deleteVpnGatewayConnectionLocalCidrOptionsModel.PrefixLength = core.StringPtr("testString")
				deleteVpnGatewayConnectionLocalCidrOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteVpnGatewayConnectionLocalCidr(deleteVpnGatewayConnectionLocalCidrOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVpnGatewayConnectionLocalCidrOptions model with no property values
				deleteVpnGatewayConnectionLocalCidrOptionsModelNew := new(vpcv1.DeleteVpnGatewayConnectionLocalCidrOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteVpnGatewayConnectionLocalCidr(deleteVpnGatewayConnectionLocalCidrOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVpnGatewayConnectionLocalCidr(getVpnGatewayConnectionLocalCidrOptions *GetVpnGatewayConnectionLocalCidrOptions)`, func() {
		version := "testString"
		getVpnGatewayConnectionLocalCidrPath := "/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpnGatewayConnectionLocalCidrPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke GetVpnGatewayConnectionLocalCidr successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.GetVpnGatewayConnectionLocalCidr(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the GetVpnGatewayConnectionLocalCidrOptions model
				getVpnGatewayConnectionLocalCidrOptionsModel := new(vpcv1.GetVpnGatewayConnectionLocalCidrOptions)
				getVpnGatewayConnectionLocalCidrOptionsModel.VpnGatewayID = core.StringPtr("testString")
				getVpnGatewayConnectionLocalCidrOptionsModel.ID = core.StringPtr("testString")
				getVpnGatewayConnectionLocalCidrOptionsModel.PrefixAddress = core.StringPtr("testString")
				getVpnGatewayConnectionLocalCidrOptionsModel.PrefixLength = core.StringPtr("testString")
				getVpnGatewayConnectionLocalCidrOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.GetVpnGatewayConnectionLocalCidr(getVpnGatewayConnectionLocalCidrOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke GetVpnGatewayConnectionLocalCidr with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpnGatewayConnectionLocalCidrOptions model
				getVpnGatewayConnectionLocalCidrOptionsModel := new(vpcv1.GetVpnGatewayConnectionLocalCidrOptions)
				getVpnGatewayConnectionLocalCidrOptionsModel.VpnGatewayID = core.StringPtr("testString")
				getVpnGatewayConnectionLocalCidrOptionsModel.ID = core.StringPtr("testString")
				getVpnGatewayConnectionLocalCidrOptionsModel.PrefixAddress = core.StringPtr("testString")
				getVpnGatewayConnectionLocalCidrOptionsModel.PrefixLength = core.StringPtr("testString")
				getVpnGatewayConnectionLocalCidrOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.GetVpnGatewayConnectionLocalCidr(getVpnGatewayConnectionLocalCidrOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the GetVpnGatewayConnectionLocalCidrOptions model with no property values
				getVpnGatewayConnectionLocalCidrOptionsModelNew := new(vpcv1.GetVpnGatewayConnectionLocalCidrOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.GetVpnGatewayConnectionLocalCidr(getVpnGatewayConnectionLocalCidrOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`SetVpnGatewayConnectionLocalCidr(setVpnGatewayConnectionLocalCidrOptions *SetVpnGatewayConnectionLocalCidrOptions)`, func() {
		version := "testString"
		setVpnGatewayConnectionLocalCidrPath := "/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(setVpnGatewayConnectionLocalCidrPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke SetVpnGatewayConnectionLocalCidr successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.SetVpnGatewayConnectionLocalCidr(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the SetVpnGatewayConnectionLocalCidrOptions model
				setVpnGatewayConnectionLocalCidrOptionsModel := new(vpcv1.SetVpnGatewayConnectionLocalCidrOptions)
				setVpnGatewayConnectionLocalCidrOptionsModel.VpnGatewayID = core.StringPtr("testString")
				setVpnGatewayConnectionLocalCidrOptionsModel.ID = core.StringPtr("testString")
				setVpnGatewayConnectionLocalCidrOptionsModel.PrefixAddress = core.StringPtr("testString")
				setVpnGatewayConnectionLocalCidrOptionsModel.PrefixLength = core.StringPtr("testString")
				setVpnGatewayConnectionLocalCidrOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.SetVpnGatewayConnectionLocalCidr(setVpnGatewayConnectionLocalCidrOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke SetVpnGatewayConnectionLocalCidr with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the SetVpnGatewayConnectionLocalCidrOptions model
				setVpnGatewayConnectionLocalCidrOptionsModel := new(vpcv1.SetVpnGatewayConnectionLocalCidrOptions)
				setVpnGatewayConnectionLocalCidrOptionsModel.VpnGatewayID = core.StringPtr("testString")
				setVpnGatewayConnectionLocalCidrOptionsModel.ID = core.StringPtr("testString")
				setVpnGatewayConnectionLocalCidrOptionsModel.PrefixAddress = core.StringPtr("testString")
				setVpnGatewayConnectionLocalCidrOptionsModel.PrefixLength = core.StringPtr("testString")
				setVpnGatewayConnectionLocalCidrOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.SetVpnGatewayConnectionLocalCidr(setVpnGatewayConnectionLocalCidrOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the SetVpnGatewayConnectionLocalCidrOptions model with no property values
				setVpnGatewayConnectionLocalCidrOptionsModelNew := new(vpcv1.SetVpnGatewayConnectionLocalCidrOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.SetVpnGatewayConnectionLocalCidr(setVpnGatewayConnectionLocalCidrOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVpnGatewayConnectionPeerCidrs(listVpnGatewayConnectionPeerCidrsOptions *ListVpnGatewayConnectionPeerCidrsOptions) - Operation response error`, func() {
		version := "testString"
		listVpnGatewayConnectionPeerCidrsPath := "/vpn_gateways/testString/connections/testString/peer_cidrs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpnGatewayConnectionPeerCidrsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVpnGatewayConnectionPeerCidrs with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpnGatewayConnectionPeerCidrsOptions model
				listVpnGatewayConnectionPeerCidrsOptionsModel := new(vpcv1.ListVpnGatewayConnectionPeerCidrsOptions)
				listVpnGatewayConnectionPeerCidrsOptionsModel.VpnGatewayID = core.StringPtr("testString")
				listVpnGatewayConnectionPeerCidrsOptionsModel.ID = core.StringPtr("testString")
				listVpnGatewayConnectionPeerCidrsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVpnGatewayConnectionPeerCidrs(listVpnGatewayConnectionPeerCidrsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVpnGatewayConnectionPeerCidrs(listVpnGatewayConnectionPeerCidrsOptions *ListVpnGatewayConnectionPeerCidrsOptions)`, func() {
		version := "testString"
		listVpnGatewayConnectionPeerCidrsPath := "/vpn_gateways/testString/connections/testString/peer_cidrs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpnGatewayConnectionPeerCidrsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"peer_cidrs": ["10.45.1.0/24"]}`)
				}))
			})
			It(`Invoke ListVpnGatewayConnectionPeerCidrs successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVpnGatewayConnectionPeerCidrs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVpnGatewayConnectionPeerCidrsOptions model
				listVpnGatewayConnectionPeerCidrsOptionsModel := new(vpcv1.ListVpnGatewayConnectionPeerCidrsOptions)
				listVpnGatewayConnectionPeerCidrsOptionsModel.VpnGatewayID = core.StringPtr("testString")
				listVpnGatewayConnectionPeerCidrsOptionsModel.ID = core.StringPtr("testString")
				listVpnGatewayConnectionPeerCidrsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVpnGatewayConnectionPeerCidrs(listVpnGatewayConnectionPeerCidrsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVpnGatewayConnectionPeerCidrs with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpnGatewayConnectionPeerCidrsOptions model
				listVpnGatewayConnectionPeerCidrsOptionsModel := new(vpcv1.ListVpnGatewayConnectionPeerCidrsOptions)
				listVpnGatewayConnectionPeerCidrsOptionsModel.VpnGatewayID = core.StringPtr("testString")
				listVpnGatewayConnectionPeerCidrsOptionsModel.ID = core.StringPtr("testString")
				listVpnGatewayConnectionPeerCidrsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVpnGatewayConnectionPeerCidrs(listVpnGatewayConnectionPeerCidrsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVpnGatewayConnectionPeerCidrsOptions model with no property values
				listVpnGatewayConnectionPeerCidrsOptionsModelNew := new(vpcv1.ListVpnGatewayConnectionPeerCidrsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListVpnGatewayConnectionPeerCidrs(listVpnGatewayConnectionPeerCidrsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteVpnGatewayConnectionPeerCidr(deleteVpnGatewayConnectionPeerCidrOptions *DeleteVpnGatewayConnectionPeerCidrOptions)`, func() {
		version := "testString"
		deleteVpnGatewayConnectionPeerCidrPath := "/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteVpnGatewayConnectionPeerCidrPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVpnGatewayConnectionPeerCidr successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteVpnGatewayConnectionPeerCidr(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVpnGatewayConnectionPeerCidrOptions model
				deleteVpnGatewayConnectionPeerCidrOptionsModel := new(vpcv1.DeleteVpnGatewayConnectionPeerCidrOptions)
				deleteVpnGatewayConnectionPeerCidrOptionsModel.VpnGatewayID = core.StringPtr("testString")
				deleteVpnGatewayConnectionPeerCidrOptionsModel.ID = core.StringPtr("testString")
				deleteVpnGatewayConnectionPeerCidrOptionsModel.PrefixAddress = core.StringPtr("testString")
				deleteVpnGatewayConnectionPeerCidrOptionsModel.PrefixLength = core.StringPtr("testString")
				deleteVpnGatewayConnectionPeerCidrOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteVpnGatewayConnectionPeerCidr(deleteVpnGatewayConnectionPeerCidrOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVpnGatewayConnectionPeerCidr with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteVpnGatewayConnectionPeerCidrOptions model
				deleteVpnGatewayConnectionPeerCidrOptionsModel := new(vpcv1.DeleteVpnGatewayConnectionPeerCidrOptions)
				deleteVpnGatewayConnectionPeerCidrOptionsModel.VpnGatewayID = core.StringPtr("testString")
				deleteVpnGatewayConnectionPeerCidrOptionsModel.ID = core.StringPtr("testString")
				deleteVpnGatewayConnectionPeerCidrOptionsModel.PrefixAddress = core.StringPtr("testString")
				deleteVpnGatewayConnectionPeerCidrOptionsModel.PrefixLength = core.StringPtr("testString")
				deleteVpnGatewayConnectionPeerCidrOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteVpnGatewayConnectionPeerCidr(deleteVpnGatewayConnectionPeerCidrOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVpnGatewayConnectionPeerCidrOptions model with no property values
				deleteVpnGatewayConnectionPeerCidrOptionsModelNew := new(vpcv1.DeleteVpnGatewayConnectionPeerCidrOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteVpnGatewayConnectionPeerCidr(deleteVpnGatewayConnectionPeerCidrOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVpnGatewayConnectionPeerCidr(getVpnGatewayConnectionPeerCidrOptions *GetVpnGatewayConnectionPeerCidrOptions)`, func() {
		version := "testString"
		getVpnGatewayConnectionPeerCidrPath := "/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVpnGatewayConnectionPeerCidrPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke GetVpnGatewayConnectionPeerCidr successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.GetVpnGatewayConnectionPeerCidr(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the GetVpnGatewayConnectionPeerCidrOptions model
				getVpnGatewayConnectionPeerCidrOptionsModel := new(vpcv1.GetVpnGatewayConnectionPeerCidrOptions)
				getVpnGatewayConnectionPeerCidrOptionsModel.VpnGatewayID = core.StringPtr("testString")
				getVpnGatewayConnectionPeerCidrOptionsModel.ID = core.StringPtr("testString")
				getVpnGatewayConnectionPeerCidrOptionsModel.PrefixAddress = core.StringPtr("testString")
				getVpnGatewayConnectionPeerCidrOptionsModel.PrefixLength = core.StringPtr("testString")
				getVpnGatewayConnectionPeerCidrOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.GetVpnGatewayConnectionPeerCidr(getVpnGatewayConnectionPeerCidrOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke GetVpnGatewayConnectionPeerCidr with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVpnGatewayConnectionPeerCidrOptions model
				getVpnGatewayConnectionPeerCidrOptionsModel := new(vpcv1.GetVpnGatewayConnectionPeerCidrOptions)
				getVpnGatewayConnectionPeerCidrOptionsModel.VpnGatewayID = core.StringPtr("testString")
				getVpnGatewayConnectionPeerCidrOptionsModel.ID = core.StringPtr("testString")
				getVpnGatewayConnectionPeerCidrOptionsModel.PrefixAddress = core.StringPtr("testString")
				getVpnGatewayConnectionPeerCidrOptionsModel.PrefixLength = core.StringPtr("testString")
				getVpnGatewayConnectionPeerCidrOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.GetVpnGatewayConnectionPeerCidr(getVpnGatewayConnectionPeerCidrOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the GetVpnGatewayConnectionPeerCidrOptions model with no property values
				getVpnGatewayConnectionPeerCidrOptionsModelNew := new(vpcv1.GetVpnGatewayConnectionPeerCidrOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.GetVpnGatewayConnectionPeerCidr(getVpnGatewayConnectionPeerCidrOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`SetVpnGatewayConnectionPeerCidr(setVpnGatewayConnectionPeerCidrOptions *SetVpnGatewayConnectionPeerCidrOptions)`, func() {
		version := "testString"
		setVpnGatewayConnectionPeerCidrPath := "/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(setVpnGatewayConnectionPeerCidrPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke SetVpnGatewayConnectionPeerCidr successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.SetVpnGatewayConnectionPeerCidr(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the SetVpnGatewayConnectionPeerCidrOptions model
				setVpnGatewayConnectionPeerCidrOptionsModel := new(vpcv1.SetVpnGatewayConnectionPeerCidrOptions)
				setVpnGatewayConnectionPeerCidrOptionsModel.VpnGatewayID = core.StringPtr("testString")
				setVpnGatewayConnectionPeerCidrOptionsModel.ID = core.StringPtr("testString")
				setVpnGatewayConnectionPeerCidrOptionsModel.PrefixAddress = core.StringPtr("testString")
				setVpnGatewayConnectionPeerCidrOptionsModel.PrefixLength = core.StringPtr("testString")
				setVpnGatewayConnectionPeerCidrOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.SetVpnGatewayConnectionPeerCidr(setVpnGatewayConnectionPeerCidrOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke SetVpnGatewayConnectionPeerCidr with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the SetVpnGatewayConnectionPeerCidrOptions model
				setVpnGatewayConnectionPeerCidrOptionsModel := new(vpcv1.SetVpnGatewayConnectionPeerCidrOptions)
				setVpnGatewayConnectionPeerCidrOptionsModel.VpnGatewayID = core.StringPtr("testString")
				setVpnGatewayConnectionPeerCidrOptionsModel.ID = core.StringPtr("testString")
				setVpnGatewayConnectionPeerCidrOptionsModel.PrefixAddress = core.StringPtr("testString")
				setVpnGatewayConnectionPeerCidrOptionsModel.PrefixLength = core.StringPtr("testString")
				setVpnGatewayConnectionPeerCidrOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.SetVpnGatewayConnectionPeerCidr(setVpnGatewayConnectionPeerCidrOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the SetVpnGatewayConnectionPeerCidrOptions model with no property values
				setVpnGatewayConnectionPeerCidrOptionsModelNew := new(vpcv1.SetVpnGatewayConnectionPeerCidrOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.SetVpnGatewayConnectionPeerCidr(setVpnGatewayConnectionPeerCidrOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "https://vpcv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				URL:     "{{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListVolumeProfiles(listVolumeProfilesOptions *ListVolumeProfilesOptions) - Operation response error`, func() {
		version := "testString"
		listVolumeProfilesPath := "/volume/profiles"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVolumeProfilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVolumeProfiles with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVolumeProfilesOptions model
				listVolumeProfilesOptionsModel := new(vpcv1.ListVolumeProfilesOptions)
				listVolumeProfilesOptionsModel.Start = core.StringPtr("testString")
				listVolumeProfilesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVolumeProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVolumeProfiles(listVolumeProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVolumeProfiles(listVolumeProfilesOptions *ListVolumeProfilesOptions)`, func() {
		version := "testString"
		listVolumeProfilesPath := "/volume/profiles"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVolumeProfilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "profiles": [{"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "family": "tiered"}]}`)
				}))
			})
			It(`Invoke ListVolumeProfiles successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVolumeProfiles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVolumeProfilesOptions model
				listVolumeProfilesOptionsModel := new(vpcv1.ListVolumeProfilesOptions)
				listVolumeProfilesOptionsModel.Start = core.StringPtr("testString")
				listVolumeProfilesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVolumeProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVolumeProfiles(listVolumeProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVolumeProfiles with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVolumeProfilesOptions model
				listVolumeProfilesOptionsModel := new(vpcv1.ListVolumeProfilesOptions)
				listVolumeProfilesOptionsModel.Start = core.StringPtr("testString")
				listVolumeProfilesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVolumeProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVolumeProfiles(listVolumeProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVolumeProfile(getVolumeProfileOptions *GetVolumeProfileOptions) - Operation response error`, func() {
		version := "testString"
		getVolumeProfilePath := "/volume/profiles/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVolumeProfilePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVolumeProfile with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVolumeProfileOptions model
				getVolumeProfileOptionsModel := new(vpcv1.GetVolumeProfileOptions)
				getVolumeProfileOptionsModel.Name = core.StringPtr("testString")
				getVolumeProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVolumeProfile(getVolumeProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVolumeProfile(getVolumeProfileOptions *GetVolumeProfileOptions)`, func() {
		version := "testString"
		getVolumeProfilePath := "/volume/profiles/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVolumeProfilePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "family": "tiered"}`)
				}))
			})
			It(`Invoke GetVolumeProfile successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVolumeProfile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVolumeProfileOptions model
				getVolumeProfileOptionsModel := new(vpcv1.GetVolumeProfileOptions)
				getVolumeProfileOptionsModel.Name = core.StringPtr("testString")
				getVolumeProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVolumeProfile(getVolumeProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVolumeProfile with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVolumeProfileOptions model
				getVolumeProfileOptionsModel := new(vpcv1.GetVolumeProfileOptions)
				getVolumeProfileOptionsModel.Name = core.StringPtr("testString")
				getVolumeProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVolumeProfile(getVolumeProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVolumeProfileOptions model with no property values
				getVolumeProfileOptionsModelNew := new(vpcv1.GetVolumeProfileOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVolumeProfile(getVolumeProfileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVolumes(listVolumesOptions *ListVolumesOptions) - Operation response error`, func() {
		version := "testString"
		listVolumesPath := "/volumes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVolumesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVolumes with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVolumesOptions model
				listVolumesOptionsModel := new(vpcv1.ListVolumesOptions)
				listVolumesOptionsModel.Start = core.StringPtr("testString")
				listVolumesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVolumesOptionsModel.Name = core.StringPtr("testString")
				listVolumesOptionsModel.ZoneName = core.StringPtr("testString")
				listVolumesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVolumes(listVolumesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVolumes(listVolumesOptions *ListVolumesOptions)`, func() {
		version := "testString"
		listVolumesPath := "/volumes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVolumesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(38))}))

					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "volumes": [{"iops": 10000, "capacity": 100, "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "profile": {"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose"}, "status": "available", "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "type": "boot"}], "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListVolumes successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVolumes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVolumesOptions model
				listVolumesOptionsModel := new(vpcv1.ListVolumesOptions)
				listVolumesOptionsModel.Start = core.StringPtr("testString")
				listVolumesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVolumesOptionsModel.Name = core.StringPtr("testString")
				listVolumesOptionsModel.ZoneName = core.StringPtr("testString")
				listVolumesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVolumes(listVolumesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVolumes with error: Operation request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVolumesOptions model
				listVolumesOptionsModel := new(vpcv1.ListVolumesOptions)
				listVolumesOptionsModel.Start = core.StringPtr("testString")
				listVolumesOptionsModel.Limit = core.Int64Ptr(int64(38))
				listVolumesOptionsModel.Name = core.StringPtr("testString")
				listVolumesOptionsModel.ZoneName = core.StringPtr("testString")
				listVolumesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVolumes(listVolumesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVolume(createVolumeOptions *CreateVolumeOptions) - Operation response error`, func() {
		version := "testString"
		createVolumePath := "/volumes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVolumePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVolume with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the VolumePrototypeVolumeByCapacity model
				volumePrototypeModel := new(vpcv1.VolumePrototypeVolumeByCapacity)
				volumePrototypeModel.Name = core.StringPtr("my-volume")
				volumePrototypeModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeModel.Profile = volumeProfileIdentityModel
				volumePrototypeModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				volumePrototypeModel.Zone = zoneIdentityModel
				volumePrototypeModel.Capacity = core.Int64Ptr(int64(100))

				// Construct an instance of the CreateVolumeOptions model
				createVolumeOptionsModel := new(vpcv1.CreateVolumeOptions)
				createVolumeOptionsModel.VolumePrototype = volumePrototypeModel
				createVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateVolume(createVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateVolume(createVolumeOptions *CreateVolumeOptions)`, func() {
		version := "testString"
		createVolumePath := "/volumes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVolumePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"iops": 10000, "capacity": 100, "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "profile": {"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose"}, "status": "available", "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "type": "boot"}], "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke CreateVolume successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateVolume(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the VolumePrototypeVolumeByCapacity model
				volumePrototypeModel := new(vpcv1.VolumePrototypeVolumeByCapacity)
				volumePrototypeModel.Name = core.StringPtr("my-volume")
				volumePrototypeModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeModel.Profile = volumeProfileIdentityModel
				volumePrototypeModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				volumePrototypeModel.Zone = zoneIdentityModel
				volumePrototypeModel.Capacity = core.Int64Ptr(int64(100))

				// Construct an instance of the CreateVolumeOptions model
				createVolumeOptionsModel := new(vpcv1.CreateVolumeOptions)
				createVolumeOptionsModel.VolumePrototype = volumePrototypeModel
				createVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateVolume(createVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateVolume with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the VolumePrototypeVolumeByCapacity model
				volumePrototypeModel := new(vpcv1.VolumePrototypeVolumeByCapacity)
				volumePrototypeModel.Name = core.StringPtr("my-volume")
				volumePrototypeModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeModel.Profile = volumeProfileIdentityModel
				volumePrototypeModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				volumePrototypeModel.Zone = zoneIdentityModel
				volumePrototypeModel.Capacity = core.Int64Ptr(int64(100))

				// Construct an instance of the CreateVolumeOptions model
				createVolumeOptionsModel := new(vpcv1.CreateVolumeOptions)
				createVolumeOptionsModel.VolumePrototype = volumePrototypeModel
				createVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateVolume(createVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVolumeOptions model with no property values
				createVolumeOptionsModelNew := new(vpcv1.CreateVolumeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateVolume(createVolumeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteVolume(deleteVolumeOptions *DeleteVolumeOptions)`, func() {
		version := "testString"
		deleteVolumePath := "/volumes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteVolumePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVolume successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteVolume(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVolumeOptions model
				deleteVolumeOptionsModel := new(vpcv1.DeleteVolumeOptions)
				deleteVolumeOptionsModel.ID = core.StringPtr("testString")
				deleteVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteVolume(deleteVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVolume with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteVolumeOptions model
				deleteVolumeOptionsModel := new(vpcv1.DeleteVolumeOptions)
				deleteVolumeOptionsModel.ID = core.StringPtr("testString")
				deleteVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteVolume(deleteVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVolumeOptions model with no property values
				deleteVolumeOptionsModelNew := new(vpcv1.DeleteVolumeOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteVolume(deleteVolumeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVolume(getVolumeOptions *GetVolumeOptions) - Operation response error`, func() {
		version := "testString"
		getVolumePath := "/volumes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVolumePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVolume with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVolumeOptions model
				getVolumeOptionsModel := new(vpcv1.GetVolumeOptions)
				getVolumeOptionsModel.ID = core.StringPtr("testString")
				getVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVolume(getVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVolume(getVolumeOptions *GetVolumeOptions)`, func() {
		version := "testString"
		getVolumePath := "/volumes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVolumePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"iops": 10000, "capacity": 100, "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "profile": {"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose"}, "status": "available", "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "type": "boot"}], "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke GetVolume successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVolume(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVolumeOptions model
				getVolumeOptionsModel := new(vpcv1.GetVolumeOptions)
				getVolumeOptionsModel.ID = core.StringPtr("testString")
				getVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVolume(getVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVolume with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVolumeOptions model
				getVolumeOptionsModel := new(vpcv1.GetVolumeOptions)
				getVolumeOptionsModel.ID = core.StringPtr("testString")
				getVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVolume(getVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVolumeOptions model with no property values
				getVolumeOptionsModelNew := new(vpcv1.GetVolumeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVolume(getVolumeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVolume(updateVolumeOptions *UpdateVolumeOptions) - Operation response error`, func() {
		version := "testString"
		updateVolumePath := "/volumes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVolumePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "text/plain")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVolume with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVolumeOptions model
				updateVolumeOptionsModel := new(vpcv1.UpdateVolumeOptions)
				updateVolumeOptionsModel.ID = core.StringPtr("testString")
				updateVolumeOptionsModel.Name = core.StringPtr("my-volume")
				updateVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateVolume(updateVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateVolume(updateVolumeOptions *UpdateVolumeOptions)`, func() {
		version := "testString"
		updateVolumePath := "/volumes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVolumePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"iops": 10000, "capacity": 100, "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "profile": {"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose"}, "status": "available", "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "type": "boot"}], "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateVolume successfully`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateVolume(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateVolumeOptions model
				updateVolumeOptionsModel := new(vpcv1.UpdateVolumeOptions)
				updateVolumeOptionsModel.ID = core.StringPtr("testString")
				updateVolumeOptionsModel.Name = core.StringPtr("my-volume")
				updateVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateVolume(updateVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateVolume with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVolumeOptions model
				updateVolumeOptionsModel := new(vpcv1.UpdateVolumeOptions)
				updateVolumeOptionsModel.ID = core.StringPtr("testString")
				updateVolumeOptionsModel.Name = core.StringPtr("my-volume")
				updateVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateVolume(updateVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVolumeOptions model with no property values
				updateVolumeOptionsModelNew := new(vpcv1.UpdateVolumeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateVolume(updateVolumeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Model constructor tests`, func() {
		Context(`Using a service client instance`, func() {
			version := "testString"
			testService, _ := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:           "http://vpcv1modelgenerator.com",
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			It(`Invoke NewCreateDedicatedHostGroupOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the CreateDedicatedHostGroupOptions model
				createDedicatedHostGroupOptionsModel := testService.NewCreateDedicatedHostGroupOptions()
				createDedicatedHostGroupOptionsModel.SetName("my-host-group")
				createDedicatedHostGroupOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createDedicatedHostGroupOptionsModel.SetZone(zoneIdentityModel)
				createDedicatedHostGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createDedicatedHostGroupOptionsModel).ToNot(BeNil())
				Expect(createDedicatedHostGroupOptionsModel.Name).To(Equal(core.StringPtr("my-host-group")))
				Expect(createDedicatedHostGroupOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createDedicatedHostGroupOptionsModel.Zone).To(Equal(zoneIdentityModel))
				Expect(createDedicatedHostGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateDedicatedHostOptions successfully`, func() {
				// Construct an instance of the DedicatedHostPrototypeGroupDedicatedHostGroupIdentityByID model
				dedicatedHostPrototypeGroupModel := new(vpcv1.DedicatedHostPrototypeGroupDedicatedHostGroupIdentityByID)
				Expect(dedicatedHostPrototypeGroupModel).ToNot(BeNil())
				dedicatedHostPrototypeGroupModel.ID = core.StringPtr("bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0")
				Expect(dedicatedHostPrototypeGroupModel.ID).To(Equal(core.StringPtr("bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0")))

				// Construct an instance of the DedicatedHostPrototypeProfileDedicatedHostProfileIdentityByName model
				dedicatedHostPrototypeProfileModel := new(vpcv1.DedicatedHostPrototypeProfileDedicatedHostProfileIdentityByName)
				Expect(dedicatedHostPrototypeProfileModel).ToNot(BeNil())
				dedicatedHostPrototypeProfileModel.Name = core.StringPtr("m-62x496")
				Expect(dedicatedHostPrototypeProfileModel.Name).To(Equal(core.StringPtr("m-62x496")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				var createDedicatedHostOptionsGroup vpcv1.DedicatedHostPrototypeGroupIntf = nil
				var createDedicatedHostOptionsProfile vpcv1.DedicatedHostPrototypeProfileIntf = nil
				// Construct an instance of the CreateDedicatedHostOptions model
				createDedicatedHostOptionsModel := testService.NewCreateDedicatedHostOptions(createDedicatedHostOptionsGroup, createDedicatedHostOptionsProfile)
				createDedicatedHostOptionsModel.SetGroup(dedicatedHostPrototypeGroupModel)
				createDedicatedHostOptionsModel.SetProfile(dedicatedHostPrototypeProfileModel)
				createDedicatedHostOptionsModel.SetName("my-host")
				createDedicatedHostOptionsModel.SetInstancePlacementEnabled(true)
				createDedicatedHostOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createDedicatedHostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createDedicatedHostOptionsModel).ToNot(BeNil())
				Expect(createDedicatedHostOptionsModel.Group).To(Equal(dedicatedHostPrototypeGroupModel))
				Expect(createDedicatedHostOptionsModel.Profile).To(Equal(dedicatedHostPrototypeProfileModel))
				Expect(createDedicatedHostOptionsModel.Name).To(Equal(core.StringPtr("my-host")))
				Expect(createDedicatedHostOptionsModel.InstancePlacementEnabled).To(Equal(core.BoolPtr(true)))
				Expect(createDedicatedHostOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createDedicatedHostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateFlowLogCollectorOptions successfully`, func() {
				// Construct an instance of the CloudObjectStorageBucketIdentityByName model
				cloudObjectStorageBucketIdentityModel := new(vpcv1.CloudObjectStorageBucketIdentityByName)
				Expect(cloudObjectStorageBucketIdentityModel).ToNot(BeNil())
				cloudObjectStorageBucketIdentityModel.Name = core.StringPtr("bucket-27200-lwx4cfvcue")
				Expect(cloudObjectStorageBucketIdentityModel.Name).To(Equal(core.StringPtr("bucket-27200-lwx4cfvcue")))

				// Construct an instance of the FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				flowLogCollectorPrototypeTargetModel := new(vpcv1.FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				Expect(flowLogCollectorPrototypeTargetModel).ToNot(BeNil())
				flowLogCollectorPrototypeTargetModel.ID = core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")
				Expect(flowLogCollectorPrototypeTargetModel.ID).To(Equal(core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				var createFlowLogCollectorOptionsStorageBucket vpcv1.CloudObjectStorageBucketIdentityIntf = nil
				var createFlowLogCollectorOptionsTarget vpcv1.FlowLogCollectorPrototypeTargetIntf = nil
				// Construct an instance of the CreateFlowLogCollectorOptions model
				createFlowLogCollectorOptionsModel := testService.NewCreateFlowLogCollectorOptions(createFlowLogCollectorOptionsStorageBucket, createFlowLogCollectorOptionsTarget)
				createFlowLogCollectorOptionsModel.SetStorageBucket(cloudObjectStorageBucketIdentityModel)
				createFlowLogCollectorOptionsModel.SetTarget(flowLogCollectorPrototypeTargetModel)
				createFlowLogCollectorOptionsModel.SetActive(false)
				createFlowLogCollectorOptionsModel.SetName("my-flow-log-collector")
				createFlowLogCollectorOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createFlowLogCollectorOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createFlowLogCollectorOptionsModel).ToNot(BeNil())
				Expect(createFlowLogCollectorOptionsModel.StorageBucket).To(Equal(cloudObjectStorageBucketIdentityModel))
				Expect(createFlowLogCollectorOptionsModel.Target).To(Equal(flowLogCollectorPrototypeTargetModel))
				Expect(createFlowLogCollectorOptionsModel.Active).To(Equal(core.BoolPtr(false)))
				Expect(createFlowLogCollectorOptionsModel.Name).To(Equal(core.StringPtr("my-flow-log-collector")))
				Expect(createFlowLogCollectorOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createFlowLogCollectorOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateIkePolicyOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				createIkePolicyOptionsAuthenticationAlgorithm := "md5"
				createIkePolicyOptionsDhGroup := int64(2)
				createIkePolicyOptionsEncryptionAlgorithm := "triple_des"
				createIkePolicyOptionsIkeVersion := int64(1)
				// Construct an instance of the CreateIkePolicyOptions model
				createIkePolicyOptionsModel := testService.NewCreateIkePolicyOptions(createIkePolicyOptionsAuthenticationAlgorithm, createIkePolicyOptionsDhGroup, createIkePolicyOptionsEncryptionAlgorithm, createIkePolicyOptionsIkeVersion)
				createIkePolicyOptionsModel.SetAuthenticationAlgorithm("md5")
				createIkePolicyOptionsModel.SetDhGroup(int64(2))
				createIkePolicyOptionsModel.SetEncryptionAlgorithm("triple_des")
				createIkePolicyOptionsModel.SetIkeVersion(int64(1))
				createIkePolicyOptionsModel.SetKeyLifetime(int64(28800))
				createIkePolicyOptionsModel.SetName("my-ike-policy")
				createIkePolicyOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createIkePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createIkePolicyOptionsModel).ToNot(BeNil())
				Expect(createIkePolicyOptionsModel.AuthenticationAlgorithm).To(Equal(core.StringPtr("md5")))
				Expect(createIkePolicyOptionsModel.DhGroup).To(Equal(core.Int64Ptr(int64(2))))
				Expect(createIkePolicyOptionsModel.EncryptionAlgorithm).To(Equal(core.StringPtr("triple_des")))
				Expect(createIkePolicyOptionsModel.IkeVersion).To(Equal(core.Int64Ptr(int64(1))))
				Expect(createIkePolicyOptionsModel.KeyLifetime).To(Equal(core.Int64Ptr(int64(28800))))
				Expect(createIkePolicyOptionsModel.Name).To(Equal(core.StringPtr("my-ike-policy")))
				Expect(createIkePolicyOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createIkePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateImageOptions successfully`, func() {
				// Construct an instance of the ImageFilePrototype model
				imageFilePrototypeModel := new(vpcv1.ImageFilePrototype)
				Expect(imageFilePrototypeModel).ToNot(BeNil())
				imageFilePrototypeModel.Href = core.StringPtr("cos://us-south/custom-image-vpc-bucket/customImage-0.vhd")
				Expect(imageFilePrototypeModel.Href).To(Equal(core.StringPtr("cos://us-south/custom-image-vpc-bucket/customImage-0.vhd")))

				// Construct an instance of the OperatingSystemIdentityByName model
				operatingSystemIdentityModel := new(vpcv1.OperatingSystemIdentityByName)
				Expect(operatingSystemIdentityModel).ToNot(BeNil())
				operatingSystemIdentityModel.Name = core.StringPtr("ubuntu-16-amd64")
				Expect(operatingSystemIdentityModel.Name).To(Equal(core.StringPtr("ubuntu-16-amd64")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the ImagePrototypeImageByFile model
				imagePrototypeModel := new(vpcv1.ImagePrototypeImageByFile)
				Expect(imagePrototypeModel).ToNot(BeNil())
				imagePrototypeModel.Name = core.StringPtr("my-image")
				imagePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				imagePrototypeModel.File = imageFilePrototypeModel
				imagePrototypeModel.OperatingSystem = operatingSystemIdentityModel
				Expect(imagePrototypeModel.Name).To(Equal(core.StringPtr("my-image")))
				Expect(imagePrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(imagePrototypeModel.File).To(Equal(imageFilePrototypeModel))
				Expect(imagePrototypeModel.OperatingSystem).To(Equal(operatingSystemIdentityModel))

				var imagePrototype vpcv1.ImagePrototypeIntf = nil
				// Construct an instance of the CreateImageOptions model
				createImageOptionsModel := testService.NewCreateImageOptions(imagePrototype)
				createImageOptionsModel.SetImagePrototype(imagePrototypeModel)
				createImageOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createImageOptionsModel).ToNot(BeNil())
				Expect(createImageOptionsModel.ImagePrototype).To(Equal(imagePrototypeModel))
				Expect(createImageOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceActionOptions successfully`, func() {
				instanceID := "testString"
				createInstanceActionOptionsType := "reboot"
				// Construct an instance of the CreateInstanceActionOptions model
				createInstanceActionOptionsModel := testService.NewCreateInstanceActionOptions(instanceID, createInstanceActionOptionsType)
				createInstanceActionOptionsModel.SetInstanceID("testString")
				createInstanceActionOptionsModel.SetType("reboot")
				createInstanceActionOptionsModel.SetForce(true)
				createInstanceActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceActionOptionsModel).ToNot(BeNil())
				Expect(createInstanceActionOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(createInstanceActionOptionsModel.Type).To(Equal(core.StringPtr("reboot")))
				Expect(createInstanceActionOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(createInstanceActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceGroupManagerOptions successfully`, func() {
				// Construct an instance of the InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype model
				instanceGroupManagerPrototypeModel := new(vpcv1.InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype)
				Expect(instanceGroupManagerPrototypeModel).ToNot(BeNil())
				instanceGroupManagerPrototypeModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPrototypeModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPrototypeModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPrototypeModel.MinMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPrototypeModel.ManagerType = core.StringPtr("autoscale")
				Expect(instanceGroupManagerPrototypeModel.AggregationWindow).To(Equal(core.Int64Ptr(int64(120))))
				Expect(instanceGroupManagerPrototypeModel.Cooldown).To(Equal(core.Int64Ptr(int64(210))))
				Expect(instanceGroupManagerPrototypeModel.MaxMembershipCount).To(Equal(core.Int64Ptr(int64(10))))
				Expect(instanceGroupManagerPrototypeModel.MinMembershipCount).To(Equal(core.Int64Ptr(int64(10))))
				Expect(instanceGroupManagerPrototypeModel.ManagerType).To(Equal(core.StringPtr("autoscale")))

				instanceGroupID := "testString"
				var instanceGroupManagerPrototype vpcv1.InstanceGroupManagerPrototypeIntf = nil
				// Construct an instance of the CreateInstanceGroupManagerOptions model
				createInstanceGroupManagerOptionsModel := testService.NewCreateInstanceGroupManagerOptions(instanceGroupID, instanceGroupManagerPrototype)
				createInstanceGroupManagerOptionsModel.SetInstanceGroupID("testString")
				createInstanceGroupManagerOptionsModel.SetInstanceGroupManagerPrototype(instanceGroupManagerPrototypeModel)
				createInstanceGroupManagerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceGroupManagerOptionsModel).ToNot(BeNil())
				Expect(createInstanceGroupManagerOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(createInstanceGroupManagerOptionsModel.InstanceGroupManagerPrototype).To(Equal(instanceGroupManagerPrototypeModel))
				Expect(createInstanceGroupManagerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceGroupManagerPolicyOptions successfully`, func() {
				// Construct an instance of the InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype model
				instanceGroupManagerPolicyPrototypeModel := new(vpcv1.InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype)
				Expect(instanceGroupManagerPolicyPrototypeModel).ToNot(BeNil())
				instanceGroupManagerPolicyPrototypeModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPrototypeModel.MetricValue = core.Int64Ptr(int64(38))
				instanceGroupManagerPolicyPrototypeModel.PolicyType = core.StringPtr("target")
				Expect(instanceGroupManagerPolicyPrototypeModel.MetricType).To(Equal(core.StringPtr("cpu")))
				Expect(instanceGroupManagerPolicyPrototypeModel.MetricValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(instanceGroupManagerPolicyPrototypeModel.PolicyType).To(Equal(core.StringPtr("target")))

				instanceGroupID := "testString"
				instanceGroupManagerID := "testString"
				var instanceGroupManagerPolicyPrototype vpcv1.InstanceGroupManagerPolicyPrototypeIntf = nil
				// Construct an instance of the CreateInstanceGroupManagerPolicyOptions model
				createInstanceGroupManagerPolicyOptionsModel := testService.NewCreateInstanceGroupManagerPolicyOptions(instanceGroupID, instanceGroupManagerID, instanceGroupManagerPolicyPrototype)
				createInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupID("testString")
				createInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupManagerID("testString")
				createInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupManagerPolicyPrototype(instanceGroupManagerPolicyPrototypeModel)
				createInstanceGroupManagerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceGroupManagerPolicyOptionsModel).ToNot(BeNil())
				Expect(createInstanceGroupManagerPolicyOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID).To(Equal(core.StringPtr("testString")))
				Expect(createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPrototype).To(Equal(instanceGroupManagerPolicyPrototypeModel))
				Expect(createInstanceGroupManagerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceGroupOptions successfully`, func() {
				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				Expect(instanceTemplateIdentityModel).ToNot(BeNil())
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")
				Expect(instanceTemplateIdentityModel.ID).To(Equal(core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				Expect(subnetIdentityModel).ToNot(BeNil())
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
				Expect(subnetIdentityModel.ID).To(Equal(core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")))

				var createInstanceGroupOptionsInstanceTemplate vpcv1.InstanceTemplateIdentityIntf = nil
				createInstanceGroupOptionsSubnets := []vpcv1.SubnetIdentityIntf{}
				// Construct an instance of the CreateInstanceGroupOptions model
				createInstanceGroupOptionsModel := testService.NewCreateInstanceGroupOptions(createInstanceGroupOptionsInstanceTemplate, createInstanceGroupOptionsSubnets)
				createInstanceGroupOptionsModel.SetInstanceTemplate(instanceTemplateIdentityModel)
				createInstanceGroupOptionsModel.SetSubnets([]vpcv1.SubnetIdentityIntf{subnetIdentityModel})
				createInstanceGroupOptionsModel.SetName("my-instance-group")
				createInstanceGroupOptionsModel.SetMembershipCount(int64(10))
				createInstanceGroupOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createInstanceGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceGroupOptionsModel).ToNot(BeNil())
				Expect(createInstanceGroupOptionsModel.InstanceTemplate).To(Equal(instanceTemplateIdentityModel))
				Expect(createInstanceGroupOptionsModel.Subnets).To(Equal([]vpcv1.SubnetIdentityIntf{subnetIdentityModel}))
				Expect(createInstanceGroupOptionsModel.Name).To(Equal(core.StringPtr("my-instance-group")))
				Expect(createInstanceGroupOptionsModel.MembershipCount).To(Equal(core.Int64Ptr(int64(10))))
				Expect(createInstanceGroupOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createInstanceGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceOptions successfully`, func() {
				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				Expect(encryptionKeyIdentityModel).ToNot(BeNil())
				encryptionKeyIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
				Expect(encryptionKeyIdentityModel.Crn).To(Equal(core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")))

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				Expect(volumeProfileIdentityModel).ToNot(BeNil())
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")
				Expect(volumeProfileIdentityModel.Name).To(Equal(core.StringPtr("general-purpose")))

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				Expect(securityGroupIdentityModel).ToNot(BeNil())
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")
				Expect(securityGroupIdentityModel.ID).To(Equal(core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")))

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				Expect(subnetIdentityModel).ToNot(BeNil())
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
				Expect(subnetIdentityModel.ID).To(Equal(core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")))

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByID model
				volumeAttachmentPrototypeInstanceContextVolumeModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByID)
				Expect(volumeAttachmentPrototypeInstanceContextVolumeModel).ToNot(BeNil())
				volumeAttachmentPrototypeInstanceContextVolumeModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")
				Expect(volumeAttachmentPrototypeInstanceContextVolumeModel.ID).To(Equal(core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")))

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				Expect(volumePrototypeInstanceByImageContextModel).ToNot(BeNil())
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))
				Expect(volumePrototypeInstanceByImageContextModel.Name).To(Equal(core.StringPtr("my-volume")))
				Expect(volumePrototypeInstanceByImageContextModel.EncryptionKey).To(Equal(encryptionKeyIdentityModel))
				Expect(volumePrototypeInstanceByImageContextModel.Profile).To(Equal(volumeProfileIdentityModel))
				Expect(volumePrototypeInstanceByImageContextModel.Capacity).To(Equal(core.Int64Ptr(int64(100))))
				Expect(volumePrototypeInstanceByImageContextModel.Iops).To(Equal(core.Int64Ptr(int64(10000))))

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				Expect(imageIdentityModel).ToNot(BeNil())
				imageIdentityModel.ID = core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")
				Expect(imageIdentityModel.ID).To(Equal(core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")))

				// Construct an instance of the InstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementPrototypeModel := new(vpcv1.InstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				Expect(instancePlacementPrototypeModel).ToNot(BeNil())
				instancePlacementPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")
				Expect(instancePlacementPrototypeModel.ID).To(Equal(core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")))

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				Expect(instanceProfileIdentityModel).ToNot(BeNil())
				instanceProfileIdentityModel.Name = core.StringPtr("bc1-4x16")
				Expect(instanceProfileIdentityModel.Name).To(Equal(core.StringPtr("bc1-4x16")))

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				Expect(keyIdentityModel).ToNot(BeNil())
				keyIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")
				Expect(keyIdentityModel.ID).To(Equal(core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")))

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				Expect(networkInterfacePrototypeModel).ToNot(BeNil())
				networkInterfacePrototypeModel.AllowIpSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel
				Expect(networkInterfacePrototypeModel.AllowIpSpoofing).To(Equal(core.BoolPtr(true)))
				Expect(networkInterfacePrototypeModel.Name).To(Equal(core.StringPtr("my-network-interface")))
				Expect(networkInterfacePrototypeModel.PrimaryIpv4Address).To(Equal(core.StringPtr("10.0.0.5")))
				Expect(networkInterfacePrototypeModel.SecurityGroups).To(Equal([]vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}))
				Expect(networkInterfacePrototypeModel.Subnet).To(Equal(subnetIdentityModel))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				Expect(vpcIdentityModel).ToNot(BeNil())
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")
				Expect(vpcIdentityModel.ID).To(Equal(core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")))

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel).ToNot(BeNil())
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete).To(Equal(core.BoolPtr(true)))
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel.Name).To(Equal(core.StringPtr("my-volume-attachment")))
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel.Volume).To(Equal(volumePrototypeInstanceByImageContextModel))

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				Expect(volumeAttachmentPrototypeInstanceContextModel).ToNot(BeNil())
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentPrototypeInstanceContextVolumeModel
				Expect(volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete).To(Equal(core.BoolPtr(true)))
				Expect(volumeAttachmentPrototypeInstanceContextModel.Name).To(Equal(core.StringPtr("my-volume-attachment")))
				Expect(volumeAttachmentPrototypeInstanceContextModel.Volume).To(Equal(volumeAttachmentPrototypeInstanceContextVolumeModel))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the InstancePrototypeInstanceByImage model
				instancePrototypeModel := new(vpcv1.InstancePrototypeInstanceByImage)
				Expect(instancePrototypeModel).ToNot(BeNil())
				instancePrototypeModel.Name = core.StringPtr("my-instance")
				instancePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instancePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instancePrototypeModel.PlacementTarget = instancePlacementPrototypeModel
				instancePrototypeModel.Profile = instanceProfileIdentityModel
				instancePrototypeModel.UserData = core.StringPtr("testString")
				instancePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instancePrototypeModel.Vpc = vpcIdentityModel
				instancePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instancePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instancePrototypeModel.Zone = zoneIdentityModel
				instancePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instancePrototypeModel.Image = imageIdentityModel
				Expect(instancePrototypeModel.Name).To(Equal(core.StringPtr("my-instance")))
				Expect(instancePrototypeModel.Keys).To(Equal([]vpcv1.KeyIdentityIntf{keyIdentityModel}))
				Expect(instancePrototypeModel.NetworkInterfaces).To(Equal([]vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}))
				Expect(instancePrototypeModel.PlacementTarget).To(Equal(instancePlacementPrototypeModel))
				Expect(instancePrototypeModel.Profile).To(Equal(instanceProfileIdentityModel))
				Expect(instancePrototypeModel.UserData).To(Equal(core.StringPtr("testString")))
				Expect(instancePrototypeModel.VolumeAttachments).To(Equal([]vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}))
				Expect(instancePrototypeModel.Vpc).To(Equal(vpcIdentityModel))
				Expect(instancePrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(instancePrototypeModel.PrimaryNetworkInterface).To(Equal(networkInterfacePrototypeModel))
				Expect(instancePrototypeModel.Zone).To(Equal(zoneIdentityModel))
				Expect(instancePrototypeModel.BootVolumeAttachment).To(Equal(volumeAttachmentPrototypeInstanceByImageContextModel))
				Expect(instancePrototypeModel.Image).To(Equal(imageIdentityModel))

				var instancePrototype vpcv1.InstancePrototypeIntf = nil
				// Construct an instance of the CreateInstanceOptions model
				createInstanceOptionsModel := testService.NewCreateInstanceOptions(instancePrototype)
				createInstanceOptionsModel.SetInstancePrototype(instancePrototypeModel)
				createInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceOptionsModel).ToNot(BeNil())
				Expect(createInstanceOptionsModel.InstancePrototype).To(Equal(instancePrototypeModel))
				Expect(createInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceTemplateOptions successfully`, func() {
				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				Expect(encryptionKeyIdentityModel).ToNot(BeNil())
				encryptionKeyIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
				Expect(encryptionKeyIdentityModel.Crn).To(Equal(core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")))

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				Expect(volumeProfileIdentityModel).ToNot(BeNil())
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")
				Expect(volumeProfileIdentityModel.Name).To(Equal(core.StringPtr("general-purpose")))

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				Expect(securityGroupIdentityModel).ToNot(BeNil())
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")
				Expect(securityGroupIdentityModel.ID).To(Equal(core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")))

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				Expect(subnetIdentityModel).ToNot(BeNil())
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
				Expect(subnetIdentityModel.ID).To(Equal(core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")))

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByID model
				volumeAttachmentPrototypeInstanceContextVolumeModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByID)
				Expect(volumeAttachmentPrototypeInstanceContextVolumeModel).ToNot(BeNil())
				volumeAttachmentPrototypeInstanceContextVolumeModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")
				Expect(volumeAttachmentPrototypeInstanceContextVolumeModel.ID).To(Equal(core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")))

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				Expect(volumePrototypeInstanceByImageContextModel).ToNot(BeNil())
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))
				Expect(volumePrototypeInstanceByImageContextModel.Name).To(Equal(core.StringPtr("my-volume")))
				Expect(volumePrototypeInstanceByImageContextModel.EncryptionKey).To(Equal(encryptionKeyIdentityModel))
				Expect(volumePrototypeInstanceByImageContextModel.Profile).To(Equal(volumeProfileIdentityModel))
				Expect(volumePrototypeInstanceByImageContextModel.Capacity).To(Equal(core.Int64Ptr(int64(100))))
				Expect(volumePrototypeInstanceByImageContextModel.Iops).To(Equal(core.Int64Ptr(int64(10000))))

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				Expect(imageIdentityModel).ToNot(BeNil())
				imageIdentityModel.ID = core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")
				Expect(imageIdentityModel.ID).To(Equal(core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")))

				// Construct an instance of the InstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementPrototypeModel := new(vpcv1.InstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				Expect(instancePlacementPrototypeModel).ToNot(BeNil())
				instancePlacementPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")
				Expect(instancePlacementPrototypeModel.ID).To(Equal(core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")))

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				Expect(instanceProfileIdentityModel).ToNot(BeNil())
				instanceProfileIdentityModel.Name = core.StringPtr("bc1-4x16")
				Expect(instanceProfileIdentityModel.Name).To(Equal(core.StringPtr("bc1-4x16")))

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				Expect(keyIdentityModel).ToNot(BeNil())
				keyIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")
				Expect(keyIdentityModel.ID).To(Equal(core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")))

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				Expect(networkInterfacePrototypeModel).ToNot(BeNil())
				networkInterfacePrototypeModel.AllowIpSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel
				Expect(networkInterfacePrototypeModel.AllowIpSpoofing).To(Equal(core.BoolPtr(true)))
				Expect(networkInterfacePrototypeModel.Name).To(Equal(core.StringPtr("my-network-interface")))
				Expect(networkInterfacePrototypeModel.PrimaryIpv4Address).To(Equal(core.StringPtr("10.0.0.5")))
				Expect(networkInterfacePrototypeModel.SecurityGroups).To(Equal([]vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}))
				Expect(networkInterfacePrototypeModel.Subnet).To(Equal(subnetIdentityModel))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				Expect(vpcIdentityModel).ToNot(BeNil())
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")
				Expect(vpcIdentityModel.ID).To(Equal(core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")))

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel).ToNot(BeNil())
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete).To(Equal(core.BoolPtr(true)))
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel.Name).To(Equal(core.StringPtr("my-volume-attachment")))
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel.Volume).To(Equal(volumePrototypeInstanceByImageContextModel))

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				Expect(volumeAttachmentPrototypeInstanceContextModel).ToNot(BeNil())
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentPrototypeInstanceContextVolumeModel
				Expect(volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete).To(Equal(core.BoolPtr(true)))
				Expect(volumeAttachmentPrototypeInstanceContextModel.Name).To(Equal(core.StringPtr("my-volume-attachment")))
				Expect(volumeAttachmentPrototypeInstanceContextModel.Volume).To(Equal(volumeAttachmentPrototypeInstanceContextVolumeModel))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the InstanceTemplatePrototypeInstanceByImage model
				instanceTemplatePrototypeModel := new(vpcv1.InstanceTemplatePrototypeInstanceByImage)
				Expect(instanceTemplatePrototypeModel).ToNot(BeNil())
				instanceTemplatePrototypeModel.Name = core.StringPtr("my-instance")
				instanceTemplatePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instanceTemplatePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instanceTemplatePrototypeModel.PlacementTarget = instancePlacementPrototypeModel
				instanceTemplatePrototypeModel.Profile = instanceProfileIdentityModel
				instanceTemplatePrototypeModel.UserData = core.StringPtr("testString")
				instanceTemplatePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instanceTemplatePrototypeModel.Vpc = vpcIdentityModel
				instanceTemplatePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instanceTemplatePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instanceTemplatePrototypeModel.Zone = zoneIdentityModel
				instanceTemplatePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instanceTemplatePrototypeModel.Image = imageIdentityModel
				Expect(instanceTemplatePrototypeModel.Name).To(Equal(core.StringPtr("my-instance")))
				Expect(instanceTemplatePrototypeModel.Keys).To(Equal([]vpcv1.KeyIdentityIntf{keyIdentityModel}))
				Expect(instanceTemplatePrototypeModel.NetworkInterfaces).To(Equal([]vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}))
				Expect(instanceTemplatePrototypeModel.PlacementTarget).To(Equal(instancePlacementPrototypeModel))
				Expect(instanceTemplatePrototypeModel.Profile).To(Equal(instanceProfileIdentityModel))
				Expect(instanceTemplatePrototypeModel.UserData).To(Equal(core.StringPtr("testString")))
				Expect(instanceTemplatePrototypeModel.VolumeAttachments).To(Equal([]vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}))
				Expect(instanceTemplatePrototypeModel.Vpc).To(Equal(vpcIdentityModel))
				Expect(instanceTemplatePrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(instanceTemplatePrototypeModel.PrimaryNetworkInterface).To(Equal(networkInterfacePrototypeModel))
				Expect(instanceTemplatePrototypeModel.Zone).To(Equal(zoneIdentityModel))
				Expect(instanceTemplatePrototypeModel.BootVolumeAttachment).To(Equal(volumeAttachmentPrototypeInstanceByImageContextModel))
				Expect(instanceTemplatePrototypeModel.Image).To(Equal(imageIdentityModel))

				var instanceTemplatePrototype vpcv1.InstanceTemplatePrototypeIntf = nil
				// Construct an instance of the CreateInstanceTemplateOptions model
				createInstanceTemplateOptionsModel := testService.NewCreateInstanceTemplateOptions(instanceTemplatePrototype)
				createInstanceTemplateOptionsModel.SetInstanceTemplatePrototype(instanceTemplatePrototypeModel)
				createInstanceTemplateOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceTemplateOptionsModel).ToNot(BeNil())
				Expect(createInstanceTemplateOptionsModel.InstanceTemplatePrototype).To(Equal(instanceTemplatePrototypeModel))
				Expect(createInstanceTemplateOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateIpsecPolicyOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				createIpsecPolicyOptionsAuthenticationAlgorithm := "md5"
				createIpsecPolicyOptionsEncryptionAlgorithm := "triple_des"
				createIpsecPolicyOptionsPfs := "disabled"
				// Construct an instance of the CreateIpsecPolicyOptions model
				createIpsecPolicyOptionsModel := testService.NewCreateIpsecPolicyOptions(createIpsecPolicyOptionsAuthenticationAlgorithm, createIpsecPolicyOptionsEncryptionAlgorithm, createIpsecPolicyOptionsPfs)
				createIpsecPolicyOptionsModel.SetAuthenticationAlgorithm("md5")
				createIpsecPolicyOptionsModel.SetEncryptionAlgorithm("triple_des")
				createIpsecPolicyOptionsModel.SetPfs("disabled")
				createIpsecPolicyOptionsModel.SetKeyLifetime(int64(3600))
				createIpsecPolicyOptionsModel.SetName("my-ipsec-policy")
				createIpsecPolicyOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createIpsecPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createIpsecPolicyOptionsModel).ToNot(BeNil())
				Expect(createIpsecPolicyOptionsModel.AuthenticationAlgorithm).To(Equal(core.StringPtr("md5")))
				Expect(createIpsecPolicyOptionsModel.EncryptionAlgorithm).To(Equal(core.StringPtr("triple_des")))
				Expect(createIpsecPolicyOptionsModel.Pfs).To(Equal(core.StringPtr("disabled")))
				Expect(createIpsecPolicyOptionsModel.KeyLifetime).To(Equal(core.Int64Ptr(int64(3600))))
				Expect(createIpsecPolicyOptionsModel.Name).To(Equal(core.StringPtr("my-ipsec-policy")))
				Expect(createIpsecPolicyOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createIpsecPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateKeyOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				createKeyOptionsPublicKey := "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En"
				// Construct an instance of the CreateKeyOptions model
				createKeyOptionsModel := testService.NewCreateKeyOptions(createKeyOptionsPublicKey)
				createKeyOptionsModel.SetPublicKey("AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")
				createKeyOptionsModel.SetName("my-key")
				createKeyOptionsModel.SetType("rsa")
				createKeyOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createKeyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createKeyOptionsModel).ToNot(BeNil())
				Expect(createKeyOptionsModel.PublicKey).To(Equal(core.StringPtr("AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")))
				Expect(createKeyOptionsModel.Name).To(Equal(core.StringPtr("my-key")))
				Expect(createKeyOptionsModel.Type).To(Equal(core.StringPtr("rsa")))
				Expect(createKeyOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createKeyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoadBalancerListenerOptions successfully`, func() {
				// Construct an instance of the LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPrototypeTargetModel := new(vpcv1.LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				Expect(loadBalancerListenerPolicyPrototypeTargetModel).ToNot(BeNil())
				loadBalancerListenerPolicyPrototypeTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")
				Expect(loadBalancerListenerPolicyPrototypeTargetModel.ID).To(Equal(core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")))

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				Expect(loadBalancerListenerPolicyRulePrototypeModel).ToNot(BeNil())
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Condition).To(Equal(core.StringPtr("contains")))
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Field).To(Equal(core.StringPtr("MY-APP-HEADER")))
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Type).To(Equal(core.StringPtr("header")))
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Value).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				Expect(certificateInstanceIdentityModel).ToNot(BeNil())
				certificateInstanceIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")
				Expect(certificateInstanceIdentityModel.Crn).To(Equal(core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")))

				// Construct an instance of the LoadBalancerListenerPolicyPrototype model
				loadBalancerListenerPolicyPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyPrototype)
				Expect(loadBalancerListenerPolicyPrototypeModel).ToNot(BeNil())
				loadBalancerListenerPolicyPrototypeModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPrototypeModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPrototypeModel.Action = core.StringPtr("forward")
				loadBalancerListenerPolicyPrototypeModel.Rules = []vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				loadBalancerListenerPolicyPrototypeModel.Target = loadBalancerListenerPolicyPrototypeTargetModel
				Expect(loadBalancerListenerPolicyPrototypeModel.Name).To(Equal(core.StringPtr("my-policy")))
				Expect(loadBalancerListenerPolicyPrototypeModel.Priority).To(Equal(core.Int64Ptr(int64(5))))
				Expect(loadBalancerListenerPolicyPrototypeModel.Action).To(Equal(core.StringPtr("forward")))
				Expect(loadBalancerListenerPolicyPrototypeModel.Rules).To(Equal([]vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}))
				Expect(loadBalancerListenerPolicyPrototypeModel.Target).To(Equal(loadBalancerListenerPolicyPrototypeTargetModel))

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				Expect(loadBalancerPoolIdentityModel).ToNot(BeNil())
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")
				Expect(loadBalancerPoolIdentityModel.ID).To(Equal(core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")))

				loadBalancerID := "testString"
				createLoadBalancerListenerOptionsPort := int64(443)
				createLoadBalancerListenerOptionsProtocol := "http"
				// Construct an instance of the CreateLoadBalancerListenerOptions model
				createLoadBalancerListenerOptionsModel := testService.NewCreateLoadBalancerListenerOptions(loadBalancerID, createLoadBalancerListenerOptionsPort, createLoadBalancerListenerOptionsProtocol)
				createLoadBalancerListenerOptionsModel.SetLoadBalancerID("testString")
				createLoadBalancerListenerOptionsModel.SetPort(int64(443))
				createLoadBalancerListenerOptionsModel.SetProtocol("http")
				createLoadBalancerListenerOptionsModel.SetConnectionLimit(int64(2000))
				createLoadBalancerListenerOptionsModel.SetCertificateInstance(certificateInstanceIdentityModel)
				createLoadBalancerListenerOptionsModel.SetDefaultPool(loadBalancerPoolIdentityModel)
				createLoadBalancerListenerOptionsModel.SetPolicies([]vpcv1.LoadBalancerListenerPolicyPrototype{*loadBalancerListenerPolicyPrototypeModel})
				createLoadBalancerListenerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoadBalancerListenerOptionsModel).ToNot(BeNil())
				Expect(createLoadBalancerListenerOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerOptionsModel.Port).To(Equal(core.Int64Ptr(int64(443))))
				Expect(createLoadBalancerListenerOptionsModel.Protocol).To(Equal(core.StringPtr("http")))
				Expect(createLoadBalancerListenerOptionsModel.ConnectionLimit).To(Equal(core.Int64Ptr(int64(2000))))
				Expect(createLoadBalancerListenerOptionsModel.CertificateInstance).To(Equal(certificateInstanceIdentityModel))
				Expect(createLoadBalancerListenerOptionsModel.DefaultPool).To(Equal(loadBalancerPoolIdentityModel))
				Expect(createLoadBalancerListenerOptionsModel.Policies).To(Equal([]vpcv1.LoadBalancerListenerPolicyPrototype{*loadBalancerListenerPolicyPrototypeModel}))
				Expect(createLoadBalancerListenerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoadBalancerListenerPolicyOptions successfully`, func() {
				// Construct an instance of the LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPrototypeTargetModel := new(vpcv1.LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				Expect(loadBalancerListenerPolicyPrototypeTargetModel).ToNot(BeNil())
				loadBalancerListenerPolicyPrototypeTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")
				Expect(loadBalancerListenerPolicyPrototypeTargetModel.ID).To(Equal(core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")))

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				Expect(loadBalancerListenerPolicyRulePrototypeModel).ToNot(BeNil())
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Condition).To(Equal(core.StringPtr("contains")))
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Field).To(Equal(core.StringPtr("MY-APP-HEADER")))
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Type).To(Equal(core.StringPtr("header")))
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Value).To(Equal(core.StringPtr("testString")))

				loadBalancerID := "testString"
				listenerID := "testString"
				createLoadBalancerListenerPolicyOptionsPriority := int64(5)
				createLoadBalancerListenerPolicyOptionsAction := "forward"
				// Construct an instance of the CreateLoadBalancerListenerPolicyOptions model
				createLoadBalancerListenerPolicyOptionsModel := testService.NewCreateLoadBalancerListenerPolicyOptions(loadBalancerID, listenerID, createLoadBalancerListenerPolicyOptionsPriority, createLoadBalancerListenerPolicyOptionsAction)
				createLoadBalancerListenerPolicyOptionsModel.SetLoadBalancerID("testString")
				createLoadBalancerListenerPolicyOptionsModel.SetListenerID("testString")
				createLoadBalancerListenerPolicyOptionsModel.SetPriority(int64(5))
				createLoadBalancerListenerPolicyOptionsModel.SetAction("forward")
				createLoadBalancerListenerPolicyOptionsModel.SetName("my-policy")
				createLoadBalancerListenerPolicyOptionsModel.SetRules([]vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel})
				createLoadBalancerListenerPolicyOptionsModel.SetTarget(loadBalancerListenerPolicyPrototypeTargetModel)
				createLoadBalancerListenerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoadBalancerListenerPolicyOptionsModel).ToNot(BeNil())
				Expect(createLoadBalancerListenerPolicyOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerPolicyOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerPolicyOptionsModel.Priority).To(Equal(core.Int64Ptr(int64(5))))
				Expect(createLoadBalancerListenerPolicyOptionsModel.Action).To(Equal(core.StringPtr("forward")))
				Expect(createLoadBalancerListenerPolicyOptionsModel.Name).To(Equal(core.StringPtr("my-policy")))
				Expect(createLoadBalancerListenerPolicyOptionsModel.Rules).To(Equal([]vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}))
				Expect(createLoadBalancerListenerPolicyOptionsModel.Target).To(Equal(loadBalancerListenerPolicyPrototypeTargetModel))
				Expect(createLoadBalancerListenerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoadBalancerListenerPolicyRuleOptions successfully`, func() {
				loadBalancerID := "testString"
				listenerID := "testString"
				policyID := "testString"
				createLoadBalancerListenerPolicyRuleOptionsCondition := "contains"
				createLoadBalancerListenerPolicyRuleOptionsType := "header"
				createLoadBalancerListenerPolicyRuleOptionsValue := "testString"
				// Construct an instance of the CreateLoadBalancerListenerPolicyRuleOptions model
				createLoadBalancerListenerPolicyRuleOptionsModel := testService.NewCreateLoadBalancerListenerPolicyRuleOptions(loadBalancerID, listenerID, policyID, createLoadBalancerListenerPolicyRuleOptionsCondition, createLoadBalancerListenerPolicyRuleOptionsType, createLoadBalancerListenerPolicyRuleOptionsValue)
				createLoadBalancerListenerPolicyRuleOptionsModel.SetLoadBalancerID("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetListenerID("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetPolicyID("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetCondition("contains")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetType("header")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetValue("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetField("MY-APP-HEADER")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel).ToNot(BeNil())
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.PolicyID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.Condition).To(Equal(core.StringPtr("contains")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.Type).To(Equal(core.StringPtr("header")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.Field).To(Equal(core.StringPtr("MY-APP-HEADER")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoadBalancerOptions successfully`, func() {
				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				Expect(loadBalancerPoolMemberTargetPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")
				Expect(loadBalancerPoolMemberTargetPrototypeModel.ID).To(Equal(core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")))

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				Expect(loadBalancerPoolHealthMonitorPrototypeModel).ToNot(BeNil())
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("https")
				loadBalancerPoolHealthMonitorPrototypeModel.UrlPath = core.StringPtr("/")
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Delay).To(Equal(core.Int64Ptr(int64(5))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries).To(Equal(core.Int64Ptr(int64(2))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Port).To(Equal(core.Int64Ptr(int64(22))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Timeout).To(Equal(core.Int64Ptr(int64(2))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Type).To(Equal(core.StringPtr("https")))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.UrlPath).To(Equal(core.StringPtr("/")))

				// Construct an instance of the LoadBalancerPoolIdentityByName model
				loadBalancerPoolIdentityByNameModel := new(vpcv1.LoadBalancerPoolIdentityByName)
				Expect(loadBalancerPoolIdentityByNameModel).ToNot(BeNil())
				loadBalancerPoolIdentityByNameModel.Name = core.StringPtr("my-load-balancer-pool")
				Expect(loadBalancerPoolIdentityByNameModel.Name).To(Equal(core.StringPtr("my-load-balancer-pool")))

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				Expect(loadBalancerPoolMemberPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				Expect(loadBalancerPoolMemberPrototypeModel.Port).To(Equal(core.Int64Ptr(int64(80))))
				Expect(loadBalancerPoolMemberPrototypeModel.Weight).To(Equal(core.Int64Ptr(int64(50))))
				Expect(loadBalancerPoolMemberPrototypeModel.Target).To(Equal(loadBalancerPoolMemberTargetPrototypeModel))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				Expect(loadBalancerPoolSessionPersistencePrototypeModel).ToNot(BeNil())
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")
				Expect(loadBalancerPoolSessionPersistencePrototypeModel.Type).To(Equal(core.StringPtr("source_ip")))

				// Construct an instance of the LoadBalancerListenerPrototypeLoadBalancerContext model
				loadBalancerListenerPrototypeLoadBalancerContextModel := new(vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext)
				Expect(loadBalancerListenerPrototypeLoadBalancerContextModel).ToNot(BeNil())
				loadBalancerListenerPrototypeLoadBalancerContextModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPrototypeLoadBalancerContextModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPrototypeLoadBalancerContextModel.Protocol = core.StringPtr("http")
				loadBalancerListenerPrototypeLoadBalancerContextModel.DefaultPool = loadBalancerPoolIdentityByNameModel
				Expect(loadBalancerListenerPrototypeLoadBalancerContextModel.ConnectionLimit).To(Equal(core.Int64Ptr(int64(2000))))
				Expect(loadBalancerListenerPrototypeLoadBalancerContextModel.Port).To(Equal(core.Int64Ptr(int64(443))))
				Expect(loadBalancerListenerPrototypeLoadBalancerContextModel.Protocol).To(Equal(core.StringPtr("http")))
				Expect(loadBalancerListenerPrototypeLoadBalancerContextModel.DefaultPool).To(Equal(loadBalancerPoolIdentityByNameModel))

				// Construct an instance of the LoadBalancerPoolPrototype model
				loadBalancerPoolPrototypeModel := new(vpcv1.LoadBalancerPoolPrototype)
				Expect(loadBalancerPoolPrototypeModel).ToNot(BeNil())
				loadBalancerPoolPrototypeModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPrototypeModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPrototypeModel.Protocol = core.StringPtr("https")
				loadBalancerPoolPrototypeModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				loadBalancerPoolPrototypeModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				loadBalancerPoolPrototypeModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel
				Expect(loadBalancerPoolPrototypeModel.Algorithm).To(Equal(core.StringPtr("least_connections")))
				Expect(loadBalancerPoolPrototypeModel.Name).To(Equal(core.StringPtr("my-load-balancer-pool")))
				Expect(loadBalancerPoolPrototypeModel.Protocol).To(Equal(core.StringPtr("https")))
				Expect(loadBalancerPoolPrototypeModel.HealthMonitor).To(Equal(loadBalancerPoolHealthMonitorPrototypeModel))
				Expect(loadBalancerPoolPrototypeModel.Members).To(Equal([]vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}))
				Expect(loadBalancerPoolPrototypeModel.SessionPersistence).To(Equal(loadBalancerPoolSessionPersistencePrototypeModel))

				// Construct an instance of the LoadBalancerProfileIdentityByName model
				loadBalancerProfileIdentityModel := new(vpcv1.LoadBalancerProfileIdentityByName)
				Expect(loadBalancerProfileIdentityModel).ToNot(BeNil())
				loadBalancerProfileIdentityModel.Name = core.StringPtr("network-small")
				Expect(loadBalancerProfileIdentityModel.Name).To(Equal(core.StringPtr("network-small")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				Expect(subnetIdentityModel).ToNot(BeNil())
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
				Expect(subnetIdentityModel.ID).To(Equal(core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")))

				createLoadBalancerOptionsIsPublic := true
				createLoadBalancerOptionsSubnets := []vpcv1.SubnetIdentityIntf{}
				// Construct an instance of the CreateLoadBalancerOptions model
				createLoadBalancerOptionsModel := testService.NewCreateLoadBalancerOptions(createLoadBalancerOptionsIsPublic, createLoadBalancerOptionsSubnets)
				createLoadBalancerOptionsModel.SetIsPublic(true)
				createLoadBalancerOptionsModel.SetSubnets([]vpcv1.SubnetIdentityIntf{subnetIdentityModel})
				createLoadBalancerOptionsModel.SetName("my-load-balancer")
				createLoadBalancerOptionsModel.SetListeners([]vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext{*loadBalancerListenerPrototypeLoadBalancerContextModel})
				createLoadBalancerOptionsModel.SetPools([]vpcv1.LoadBalancerPoolPrototype{*loadBalancerPoolPrototypeModel})
				createLoadBalancerOptionsModel.SetProfile(loadBalancerProfileIdentityModel)
				createLoadBalancerOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createLoadBalancerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoadBalancerOptionsModel).ToNot(BeNil())
				Expect(createLoadBalancerOptionsModel.IsPublic).To(Equal(core.BoolPtr(true)))
				Expect(createLoadBalancerOptionsModel.Subnets).To(Equal([]vpcv1.SubnetIdentityIntf{subnetIdentityModel}))
				Expect(createLoadBalancerOptionsModel.Name).To(Equal(core.StringPtr("my-load-balancer")))
				Expect(createLoadBalancerOptionsModel.Listeners).To(Equal([]vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext{*loadBalancerListenerPrototypeLoadBalancerContextModel}))
				Expect(createLoadBalancerOptionsModel.Pools).To(Equal([]vpcv1.LoadBalancerPoolPrototype{*loadBalancerPoolPrototypeModel}))
				Expect(createLoadBalancerOptionsModel.Profile).To(Equal(loadBalancerProfileIdentityModel))
				Expect(createLoadBalancerOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createLoadBalancerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoadBalancerPoolMemberOptions successfully`, func() {
				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				Expect(loadBalancerPoolMemberTargetPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")
				Expect(loadBalancerPoolMemberTargetPrototypeModel.ID).To(Equal(core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")))

				loadBalancerID := "testString"
				poolID := "testString"
				createLoadBalancerPoolMemberOptionsPort := int64(80)
				var createLoadBalancerPoolMemberOptionsTarget vpcv1.LoadBalancerPoolMemberTargetPrototypeIntf = nil
				// Construct an instance of the CreateLoadBalancerPoolMemberOptions model
				createLoadBalancerPoolMemberOptionsModel := testService.NewCreateLoadBalancerPoolMemberOptions(loadBalancerID, poolID, createLoadBalancerPoolMemberOptionsPort, createLoadBalancerPoolMemberOptionsTarget)
				createLoadBalancerPoolMemberOptionsModel.SetLoadBalancerID("testString")
				createLoadBalancerPoolMemberOptionsModel.SetPoolID("testString")
				createLoadBalancerPoolMemberOptionsModel.SetPort(int64(80))
				createLoadBalancerPoolMemberOptionsModel.SetTarget(loadBalancerPoolMemberTargetPrototypeModel)
				createLoadBalancerPoolMemberOptionsModel.SetWeight(int64(50))
				createLoadBalancerPoolMemberOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoadBalancerPoolMemberOptionsModel).ToNot(BeNil())
				Expect(createLoadBalancerPoolMemberOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerPoolMemberOptionsModel.PoolID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerPoolMemberOptionsModel.Port).To(Equal(core.Int64Ptr(int64(80))))
				Expect(createLoadBalancerPoolMemberOptionsModel.Target).To(Equal(loadBalancerPoolMemberTargetPrototypeModel))
				Expect(createLoadBalancerPoolMemberOptionsModel.Weight).To(Equal(core.Int64Ptr(int64(50))))
				Expect(createLoadBalancerPoolMemberOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoadBalancerPoolOptions successfully`, func() {
				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				Expect(loadBalancerPoolMemberTargetPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")
				Expect(loadBalancerPoolMemberTargetPrototypeModel.ID).To(Equal(core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")))

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				Expect(loadBalancerPoolHealthMonitorPrototypeModel).ToNot(BeNil())
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("https")
				loadBalancerPoolHealthMonitorPrototypeModel.UrlPath = core.StringPtr("/")
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Delay).To(Equal(core.Int64Ptr(int64(5))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries).To(Equal(core.Int64Ptr(int64(2))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Port).To(Equal(core.Int64Ptr(int64(22))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Timeout).To(Equal(core.Int64Ptr(int64(2))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Type).To(Equal(core.StringPtr("https")))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.UrlPath).To(Equal(core.StringPtr("/")))

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				Expect(loadBalancerPoolMemberPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				Expect(loadBalancerPoolMemberPrototypeModel.Port).To(Equal(core.Int64Ptr(int64(80))))
				Expect(loadBalancerPoolMemberPrototypeModel.Weight).To(Equal(core.Int64Ptr(int64(50))))
				Expect(loadBalancerPoolMemberPrototypeModel.Target).To(Equal(loadBalancerPoolMemberTargetPrototypeModel))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				Expect(loadBalancerPoolSessionPersistencePrototypeModel).ToNot(BeNil())
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")
				Expect(loadBalancerPoolSessionPersistencePrototypeModel.Type).To(Equal(core.StringPtr("source_ip")))

				loadBalancerID := "testString"
				createLoadBalancerPoolOptionsAlgorithm := "least_connections"
				createLoadBalancerPoolOptionsProtocol := "https"
				var createLoadBalancerPoolOptionsHealthMonitor *vpcv1.LoadBalancerPoolHealthMonitorPrototype = nil
				// Construct an instance of the CreateLoadBalancerPoolOptions model
				createLoadBalancerPoolOptionsModel := testService.NewCreateLoadBalancerPoolOptions(loadBalancerID, createLoadBalancerPoolOptionsAlgorithm, createLoadBalancerPoolOptionsProtocol, createLoadBalancerPoolOptionsHealthMonitor)
				createLoadBalancerPoolOptionsModel.SetLoadBalancerID("testString")
				createLoadBalancerPoolOptionsModel.SetAlgorithm("least_connections")
				createLoadBalancerPoolOptionsModel.SetProtocol("https")
				createLoadBalancerPoolOptionsModel.SetHealthMonitor(loadBalancerPoolHealthMonitorPrototypeModel)
				createLoadBalancerPoolOptionsModel.SetName("my-load-balancer-pool")
				createLoadBalancerPoolOptionsModel.SetMembers([]vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel})
				createLoadBalancerPoolOptionsModel.SetSessionPersistence(loadBalancerPoolSessionPersistencePrototypeModel)
				createLoadBalancerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoadBalancerPoolOptionsModel).ToNot(BeNil())
				Expect(createLoadBalancerPoolOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerPoolOptionsModel.Algorithm).To(Equal(core.StringPtr("least_connections")))
				Expect(createLoadBalancerPoolOptionsModel.Protocol).To(Equal(core.StringPtr("https")))
				Expect(createLoadBalancerPoolOptionsModel.HealthMonitor).To(Equal(loadBalancerPoolHealthMonitorPrototypeModel))
				Expect(createLoadBalancerPoolOptionsModel.Name).To(Equal(core.StringPtr("my-load-balancer-pool")))
				Expect(createLoadBalancerPoolOptionsModel.Members).To(Equal([]vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}))
				Expect(createLoadBalancerPoolOptionsModel.SessionPersistence).To(Equal(loadBalancerPoolSessionPersistencePrototypeModel))
				Expect(createLoadBalancerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateNetworkAclOptions successfully`, func() {
				// Construct an instance of the NetworkACLRuleReference model
				networkAclRuleReferenceModel := new(vpcv1.NetworkACLRuleReference)
				Expect(networkAclRuleReferenceModel).ToNot(BeNil())
				networkAclRuleReferenceModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRuleReferenceModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRuleReferenceModel.Name = core.StringPtr("my-rule-1")
				Expect(networkAclRuleReferenceModel.ID).To(Equal(core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")))
				Expect(networkAclRuleReferenceModel.Href).To(Equal(core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")))
				Expect(networkAclRuleReferenceModel.Name).To(Equal(core.StringPtr("my-rule-1")))

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll model
				networkAclRulePrototypeNetworkAclContextModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll)
				Expect(networkAclRulePrototypeNetworkAclContextModel).ToNot(BeNil())
				networkAclRulePrototypeNetworkAclContextModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRulePrototypeNetworkAclContextModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRulePrototypeNetworkAclContextModel.Name = core.StringPtr("my-rule-2")
				networkAclRulePrototypeNetworkAclContextModel.Action = core.StringPtr("allow")
				networkAclRulePrototypeNetworkAclContextModel.Destination = core.StringPtr("192.168.3.0/24")
				networkAclRulePrototypeNetworkAclContextModel.Direction = core.StringPtr("inbound")
				networkAclRulePrototypeNetworkAclContextModel.Source = core.StringPtr("192.168.3.0/24")
				networkAclRulePrototypeNetworkAclContextModel.Protocol = core.StringPtr("all")
				networkAclRulePrototypeNetworkAclContextModel.Before = networkAclRuleReferenceModel
				networkAclRulePrototypeNetworkAclContextModel.CreatedAt = CreateMockDateTime()
				networkAclRulePrototypeNetworkAclContextModel.IpVersion = core.StringPtr("ipv4")
				Expect(networkAclRulePrototypeNetworkAclContextModel.ID).To(Equal(core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")))
				Expect(networkAclRulePrototypeNetworkAclContextModel.Href).To(Equal(core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")))
				Expect(networkAclRulePrototypeNetworkAclContextModel.Name).To(Equal(core.StringPtr("my-rule-2")))
				Expect(networkAclRulePrototypeNetworkAclContextModel.Action).To(Equal(core.StringPtr("allow")))
				Expect(networkAclRulePrototypeNetworkAclContextModel.Destination).To(Equal(core.StringPtr("192.168.3.0/24")))
				Expect(networkAclRulePrototypeNetworkAclContextModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(networkAclRulePrototypeNetworkAclContextModel.Source).To(Equal(core.StringPtr("192.168.3.0/24")))
				Expect(networkAclRulePrototypeNetworkAclContextModel.Protocol).To(Equal(core.StringPtr("all")))
				Expect(networkAclRulePrototypeNetworkAclContextModel.Before).To(Equal(networkAclRuleReferenceModel))
				Expect(networkAclRulePrototypeNetworkAclContextModel.CreatedAt).To(Equal(CreateMockDateTime()))
				Expect(networkAclRulePrototypeNetworkAclContextModel.IpVersion).To(Equal(core.StringPtr("ipv4")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				Expect(vpcIdentityModel).ToNot(BeNil())
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")
				Expect(vpcIdentityModel.ID).To(Equal(core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")))

				// Construct an instance of the NetworkACLPrototypeNetworkACLByRules model
				networkAclPrototypeModel := new(vpcv1.NetworkACLPrototypeNetworkACLByRules)
				Expect(networkAclPrototypeModel).ToNot(BeNil())
				networkAclPrototypeModel.Name = core.StringPtr("my-network-acl")
				networkAclPrototypeModel.Vpc = vpcIdentityModel
				networkAclPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				networkAclPrototypeModel.Rules = []vpcv1.NetworkACLRulePrototypeNetworkACLContextIntf{networkAclRulePrototypeNetworkAclContextModel}
				Expect(networkAclPrototypeModel.Name).To(Equal(core.StringPtr("my-network-acl")))
				Expect(networkAclPrototypeModel.Vpc).To(Equal(vpcIdentityModel))
				Expect(networkAclPrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(networkAclPrototypeModel.Rules).To(Equal([]vpcv1.NetworkACLRulePrototypeNetworkACLContextIntf{networkAclRulePrototypeNetworkAclContextModel}))

				// Construct an instance of the CreateNetworkAclOptions model
				createNetworkAclOptionsModel := testService.NewCreateNetworkAclOptions()
				createNetworkAclOptionsModel.SetNetworkACLPrototype(networkAclPrototypeModel)
				createNetworkAclOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createNetworkAclOptionsModel).ToNot(BeNil())
				Expect(createNetworkAclOptionsModel.NetworkACLPrototype).To(Equal(networkAclPrototypeModel))
				Expect(createNetworkAclOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateNetworkAclRuleOptions successfully`, func() {
				// Construct an instance of the NetworkACLRuleReference model
				networkAclRuleReferenceModel := new(vpcv1.NetworkACLRuleReference)
				Expect(networkAclRuleReferenceModel).ToNot(BeNil())
				networkAclRuleReferenceModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRuleReferenceModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRuleReferenceModel.Name = core.StringPtr("my-rule-1")
				Expect(networkAclRuleReferenceModel.ID).To(Equal(core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")))
				Expect(networkAclRuleReferenceModel.Href).To(Equal(core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")))
				Expect(networkAclRuleReferenceModel.Name).To(Equal(core.StringPtr("my-rule-1")))

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLRuleProtocolICMP model
				networkAclRulePrototypeModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLRuleProtocolICMP)
				Expect(networkAclRulePrototypeModel).ToNot(BeNil())
				networkAclRulePrototypeModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRulePrototypeModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")
				networkAclRulePrototypeModel.Name = core.StringPtr("my-rule-2")
				networkAclRulePrototypeModel.Action = core.StringPtr("allow")
				networkAclRulePrototypeModel.Destination = core.StringPtr("192.168.3.0/24")
				networkAclRulePrototypeModel.Direction = core.StringPtr("inbound")
				networkAclRulePrototypeModel.Source = core.StringPtr("192.168.3.0/24")
				networkAclRulePrototypeModel.Protocol = core.StringPtr("icmp")
				networkAclRulePrototypeModel.Before = networkAclRuleReferenceModel
				networkAclRulePrototypeModel.CreatedAt = CreateMockDateTime()
				networkAclRulePrototypeModel.IpVersion = core.StringPtr("ipv4")
				networkAclRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				networkAclRulePrototypeModel.Type = core.Int64Ptr(int64(8))
				Expect(networkAclRulePrototypeModel.ID).To(Equal(core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")))
				Expect(networkAclRulePrototypeModel.Href).To(Equal(core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9")))
				Expect(networkAclRulePrototypeModel.Name).To(Equal(core.StringPtr("my-rule-2")))
				Expect(networkAclRulePrototypeModel.Action).To(Equal(core.StringPtr("allow")))
				Expect(networkAclRulePrototypeModel.Destination).To(Equal(core.StringPtr("192.168.3.0/24")))
				Expect(networkAclRulePrototypeModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(networkAclRulePrototypeModel.Source).To(Equal(core.StringPtr("192.168.3.0/24")))
				Expect(networkAclRulePrototypeModel.Protocol).To(Equal(core.StringPtr("icmp")))
				Expect(networkAclRulePrototypeModel.Before).To(Equal(networkAclRuleReferenceModel))
				Expect(networkAclRulePrototypeModel.CreatedAt).To(Equal(CreateMockDateTime()))
				Expect(networkAclRulePrototypeModel.IpVersion).To(Equal(core.StringPtr("ipv4")))
				Expect(networkAclRulePrototypeModel.Code).To(Equal(core.Int64Ptr(int64(0))))
				Expect(networkAclRulePrototypeModel.Type).To(Equal(core.Int64Ptr(int64(8))))

				networkAclID := "testString"
				var networkAclRulePrototype vpcv1.NetworkACLRulePrototypeIntf = nil
				// Construct an instance of the CreateNetworkAclRuleOptions model
				createNetworkAclRuleOptionsModel := testService.NewCreateNetworkAclRuleOptions(networkAclID, networkAclRulePrototype)
				createNetworkAclRuleOptionsModel.SetNetworkAclID("testString")
				createNetworkAclRuleOptionsModel.SetNetworkACLRulePrototype(networkAclRulePrototypeModel)
				createNetworkAclRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createNetworkAclRuleOptionsModel).ToNot(BeNil())
				Expect(createNetworkAclRuleOptionsModel.NetworkAclID).To(Equal(core.StringPtr("testString")))
				Expect(createNetworkAclRuleOptionsModel.NetworkACLRulePrototype).To(Equal(networkAclRulePrototypeModel))
				Expect(createNetworkAclRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateNetworkInterfaceFloatingIpBindingOptions successfully`, func() {
				instanceID := "testString"
				networkInterfaceID := "testString"
				id := "testString"
				// Construct an instance of the CreateNetworkInterfaceFloatingIpBindingOptions model
				createNetworkInterfaceFloatingIpBindingOptionsModel := testService.NewCreateNetworkInterfaceFloatingIpBindingOptions(instanceID, networkInterfaceID, id)
				createNetworkInterfaceFloatingIpBindingOptionsModel.SetInstanceID("testString")
				createNetworkInterfaceFloatingIpBindingOptionsModel.SetNetworkInterfaceID("testString")
				createNetworkInterfaceFloatingIpBindingOptionsModel.SetID("testString")
				createNetworkInterfaceFloatingIpBindingOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createNetworkInterfaceFloatingIpBindingOptionsModel).ToNot(BeNil())
				Expect(createNetworkInterfaceFloatingIpBindingOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(createNetworkInterfaceFloatingIpBindingOptionsModel.NetworkInterfaceID).To(Equal(core.StringPtr("testString")))
				Expect(createNetworkInterfaceFloatingIpBindingOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(createNetworkInterfaceFloatingIpBindingOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateNetworkInterfaceOptions successfully`, func() {
				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				Expect(securityGroupIdentityModel).ToNot(BeNil())
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")
				Expect(securityGroupIdentityModel.ID).To(Equal(core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")))

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				Expect(subnetIdentityModel).ToNot(BeNil())
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
				Expect(subnetIdentityModel.ID).To(Equal(core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")))

				instanceID := "testString"
				var createNetworkInterfaceOptionsSubnet vpcv1.SubnetIdentityIntf = nil
				// Construct an instance of the CreateNetworkInterfaceOptions model
				createNetworkInterfaceOptionsModel := testService.NewCreateNetworkInterfaceOptions(instanceID, createNetworkInterfaceOptionsSubnet)
				createNetworkInterfaceOptionsModel.SetInstanceID("testString")
				createNetworkInterfaceOptionsModel.SetSubnet(subnetIdentityModel)
				createNetworkInterfaceOptionsModel.SetAllowIpSpoofing(true)
				createNetworkInterfaceOptionsModel.SetName("my-network-interface")
				createNetworkInterfaceOptionsModel.SetPrimaryIpv4Address("10.0.0.5")
				createNetworkInterfaceOptionsModel.SetSecurityGroups([]vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel})
				createNetworkInterfaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createNetworkInterfaceOptionsModel).ToNot(BeNil())
				Expect(createNetworkInterfaceOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(createNetworkInterfaceOptionsModel.Subnet).To(Equal(subnetIdentityModel))
				Expect(createNetworkInterfaceOptionsModel.AllowIpSpoofing).To(Equal(core.BoolPtr(true)))
				Expect(createNetworkInterfaceOptionsModel.Name).To(Equal(core.StringPtr("my-network-interface")))
				Expect(createNetworkInterfaceOptionsModel.PrimaryIpv4Address).To(Equal(core.StringPtr("10.0.0.5")))
				Expect(createNetworkInterfaceOptionsModel.SecurityGroups).To(Equal([]vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}))
				Expect(createNetworkInterfaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreatePublicGatewayOptions successfully`, func() {
				// Construct an instance of the PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByID model
				publicGatewayPrototypeFloatingIpModel := new(vpcv1.PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByID)
				Expect(publicGatewayPrototypeFloatingIpModel).ToNot(BeNil())
				publicGatewayPrototypeFloatingIpModel.ID = core.StringPtr("39300233-9995-4806-89a5-3c1b6eb88689")
				Expect(publicGatewayPrototypeFloatingIpModel.ID).To(Equal(core.StringPtr("39300233-9995-4806-89a5-3c1b6eb88689")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				Expect(vpcIdentityModel).ToNot(BeNil())
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")
				Expect(vpcIdentityModel.ID).To(Equal(core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				var createPublicGatewayOptionsVpc vpcv1.VPCIdentityIntf = nil
				var createPublicGatewayOptionsZone vpcv1.ZoneIdentityIntf = nil
				// Construct an instance of the CreatePublicGatewayOptions model
				createPublicGatewayOptionsModel := testService.NewCreatePublicGatewayOptions(createPublicGatewayOptionsVpc, createPublicGatewayOptionsZone)
				createPublicGatewayOptionsModel.SetVpc(vpcIdentityModel)
				createPublicGatewayOptionsModel.SetZone(zoneIdentityModel)
				createPublicGatewayOptionsModel.SetName("my-public-gateway")
				createPublicGatewayOptionsModel.SetFloatingIp(publicGatewayPrototypeFloatingIpModel)
				createPublicGatewayOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createPublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createPublicGatewayOptionsModel).ToNot(BeNil())
				Expect(createPublicGatewayOptionsModel.Vpc).To(Equal(vpcIdentityModel))
				Expect(createPublicGatewayOptionsModel.Zone).To(Equal(zoneIdentityModel))
				Expect(createPublicGatewayOptionsModel.Name).To(Equal(core.StringPtr("my-public-gateway")))
				Expect(createPublicGatewayOptionsModel.FloatingIp).To(Equal(publicGatewayPrototypeFloatingIpModel))
				Expect(createPublicGatewayOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createPublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSecurityGroupNetworkInterfaceBindingOptions successfully`, func() {
				securityGroupID := "testString"
				id := "testString"
				// Construct an instance of the CreateSecurityGroupNetworkInterfaceBindingOptions model
				createSecurityGroupNetworkInterfaceBindingOptionsModel := testService.NewCreateSecurityGroupNetworkInterfaceBindingOptions(securityGroupID, id)
				createSecurityGroupNetworkInterfaceBindingOptionsModel.SetSecurityGroupID("testString")
				createSecurityGroupNetworkInterfaceBindingOptionsModel.SetID("testString")
				createSecurityGroupNetworkInterfaceBindingOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSecurityGroupNetworkInterfaceBindingOptionsModel).ToNot(BeNil())
				Expect(createSecurityGroupNetworkInterfaceBindingOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(createSecurityGroupNetworkInterfaceBindingOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(createSecurityGroupNetworkInterfaceBindingOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSecurityGroupOptions successfully`, func() {
				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP model
				securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP)
				Expect(securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel).ToNot(BeNil())
				securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel.Address = core.StringPtr("192.168.3.4")
				Expect(securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP)
				Expect(securityGroupRulePrototypeModel).ToNot(BeNil())
				securityGroupRulePrototypeModel.ID = core.StringPtr("6f2a6efe-21e2-401c-b237-620aa26ba16a")
				securityGroupRulePrototypeModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a")
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IpVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePrototypeModel.Remote = securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel
				securityGroupRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePrototypeModel.Type = core.Int64Ptr(int64(8))
				Expect(securityGroupRulePrototypeModel.ID).To(Equal(core.StringPtr("6f2a6efe-21e2-401c-b237-620aa26ba16a")))
				Expect(securityGroupRulePrototypeModel.Href).To(Equal(core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a")))
				Expect(securityGroupRulePrototypeModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(securityGroupRulePrototypeModel.IpVersion).To(Equal(core.StringPtr("ipv4")))
				Expect(securityGroupRulePrototypeModel.Protocol).To(Equal(core.StringPtr("icmp")))
				Expect(securityGroupRulePrototypeModel.Remote).To(Equal(securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel))
				Expect(securityGroupRulePrototypeModel.Code).To(Equal(core.Int64Ptr(int64(0))))
				Expect(securityGroupRulePrototypeModel.Type).To(Equal(core.Int64Ptr(int64(8))))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				Expect(vpcIdentityModel).ToNot(BeNil())
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")
				Expect(vpcIdentityModel.ID).To(Equal(core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")))

				var createSecurityGroupOptionsVpc vpcv1.VPCIdentityIntf = nil
				// Construct an instance of the CreateSecurityGroupOptions model
				createSecurityGroupOptionsModel := testService.NewCreateSecurityGroupOptions(createSecurityGroupOptionsVpc)
				createSecurityGroupOptionsModel.SetVpc(vpcIdentityModel)
				createSecurityGroupOptionsModel.SetName("my-security-group")
				createSecurityGroupOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createSecurityGroupOptionsModel.SetRules([]vpcv1.SecurityGroupRulePrototypeIntf{securityGroupRulePrototypeModel})
				createSecurityGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSecurityGroupOptionsModel).ToNot(BeNil())
				Expect(createSecurityGroupOptionsModel.Vpc).To(Equal(vpcIdentityModel))
				Expect(createSecurityGroupOptionsModel.Name).To(Equal(core.StringPtr("my-security-group")))
				Expect(createSecurityGroupOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createSecurityGroupOptionsModel.Rules).To(Equal([]vpcv1.SecurityGroupRulePrototypeIntf{securityGroupRulePrototypeModel}))
				Expect(createSecurityGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSecurityGroupRuleOptions successfully`, func() {
				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP model
				securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP)
				Expect(securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel).ToNot(BeNil())
				securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel.Address = core.StringPtr("192.168.3.4")
				Expect(securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP)
				Expect(securityGroupRulePrototypeModel).ToNot(BeNil())
				securityGroupRulePrototypeModel.ID = core.StringPtr("6f2a6efe-21e2-401c-b237-620aa26ba16a")
				securityGroupRulePrototypeModel.Href = core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a")
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IpVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePrototypeModel.Remote = securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel
				securityGroupRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePrototypeModel.Type = core.Int64Ptr(int64(8))
				Expect(securityGroupRulePrototypeModel.ID).To(Equal(core.StringPtr("6f2a6efe-21e2-401c-b237-620aa26ba16a")))
				Expect(securityGroupRulePrototypeModel.Href).To(Equal(core.StringPtr("https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a")))
				Expect(securityGroupRulePrototypeModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(securityGroupRulePrototypeModel.IpVersion).To(Equal(core.StringPtr("ipv4")))
				Expect(securityGroupRulePrototypeModel.Protocol).To(Equal(core.StringPtr("icmp")))
				Expect(securityGroupRulePrototypeModel.Remote).To(Equal(securityGroupRulePrototypeSecurityGroupRuleProtocolIcmpRemoteModel))
				Expect(securityGroupRulePrototypeModel.Code).To(Equal(core.Int64Ptr(int64(0))))
				Expect(securityGroupRulePrototypeModel.Type).To(Equal(core.Int64Ptr(int64(8))))

				securityGroupID := "testString"
				var securityGroupRulePrototype vpcv1.SecurityGroupRulePrototypeIntf = nil
				// Construct an instance of the CreateSecurityGroupRuleOptions model
				createSecurityGroupRuleOptionsModel := testService.NewCreateSecurityGroupRuleOptions(securityGroupID, securityGroupRulePrototype)
				createSecurityGroupRuleOptionsModel.SetSecurityGroupID("testString")
				createSecurityGroupRuleOptionsModel.SetSecurityGroupRulePrototype(securityGroupRulePrototypeModel)
				createSecurityGroupRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSecurityGroupRuleOptionsModel).ToNot(BeNil())
				Expect(createSecurityGroupRuleOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(createSecurityGroupRuleOptionsModel.SecurityGroupRulePrototype).To(Equal(securityGroupRulePrototypeModel))
				Expect(createSecurityGroupRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSubnetOptions successfully`, func() {
				// Construct an instance of the NetworkACLIdentityByID model
				networkAclIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				Expect(networkAclIdentityModel).ToNot(BeNil())
				networkAclIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")
				Expect(networkAclIdentityModel.ID).To(Equal(core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")))

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				Expect(publicGatewayIdentityModel).ToNot(BeNil())
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")
				Expect(publicGatewayIdentityModel.ID).To(Equal(core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				Expect(routingTableIdentityModel).ToNot(BeNil())
				routingTableIdentityModel.ID = core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")
				Expect(routingTableIdentityModel.ID).To(Equal(core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				Expect(vpcIdentityModel).ToNot(BeNil())
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")
				Expect(vpcIdentityModel.ID).To(Equal(core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the SubnetPrototypeSubnetByTotalCount model
				subnetPrototypeModel := new(vpcv1.SubnetPrototypeSubnetByTotalCount)
				Expect(subnetPrototypeModel).ToNot(BeNil())
				subnetPrototypeModel.Name = core.StringPtr("my-subnet")
				subnetPrototypeModel.NetworkAcl = networkAclIdentityModel
				subnetPrototypeModel.PublicGateway = publicGatewayIdentityModel
				subnetPrototypeModel.RoutingTable = routingTableIdentityModel
				subnetPrototypeModel.IpVersion = core.StringPtr("both")
				subnetPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				subnetPrototypeModel.Vpc = vpcIdentityModel
				subnetPrototypeModel.TotalIpv4AddressCount = core.Int64Ptr(int64(256))
				subnetPrototypeModel.Zone = zoneIdentityModel
				Expect(subnetPrototypeModel.Name).To(Equal(core.StringPtr("my-subnet")))
				Expect(subnetPrototypeModel.NetworkAcl).To(Equal(networkAclIdentityModel))
				Expect(subnetPrototypeModel.PublicGateway).To(Equal(publicGatewayIdentityModel))
				Expect(subnetPrototypeModel.RoutingTable).To(Equal(routingTableIdentityModel))
				Expect(subnetPrototypeModel.IpVersion).To(Equal(core.StringPtr("both")))
				Expect(subnetPrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(subnetPrototypeModel.Vpc).To(Equal(vpcIdentityModel))
				Expect(subnetPrototypeModel.TotalIpv4AddressCount).To(Equal(core.Int64Ptr(int64(256))))
				Expect(subnetPrototypeModel.Zone).To(Equal(zoneIdentityModel))

				var subnetPrototype vpcv1.SubnetPrototypeIntf = nil
				// Construct an instance of the CreateSubnetOptions model
				createSubnetOptionsModel := testService.NewCreateSubnetOptions(subnetPrototype)
				createSubnetOptionsModel.SetSubnetPrototype(subnetPrototypeModel)
				createSubnetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSubnetOptionsModel).ToNot(BeNil())
				Expect(createSubnetOptionsModel.SubnetPrototype).To(Equal(subnetPrototypeModel))
				Expect(createSubnetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVolumeAttachmentOptions successfully`, func() {
				// Construct an instance of the VolumeIdentityByID model
				volumeIdentityModel := new(vpcv1.VolumeIdentityByID)
				Expect(volumeIdentityModel).ToNot(BeNil())
				volumeIdentityModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")
				Expect(volumeIdentityModel.ID).To(Equal(core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")))

				instanceID := "testString"
				var createVolumeAttachmentOptionsVolume vpcv1.VolumeIdentityIntf = nil
				// Construct an instance of the CreateVolumeAttachmentOptions model
				createVolumeAttachmentOptionsModel := testService.NewCreateVolumeAttachmentOptions(instanceID, createVolumeAttachmentOptionsVolume)
				createVolumeAttachmentOptionsModel.SetInstanceID("testString")
				createVolumeAttachmentOptionsModel.SetVolume(volumeIdentityModel)
				createVolumeAttachmentOptionsModel.SetDeleteVolumeOnInstanceDelete(true)
				createVolumeAttachmentOptionsModel.SetName("my-volume-attachment")
				createVolumeAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVolumeAttachmentOptionsModel).ToNot(BeNil())
				Expect(createVolumeAttachmentOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(createVolumeAttachmentOptionsModel.Volume).To(Equal(volumeIdentityModel))
				Expect(createVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete).To(Equal(core.BoolPtr(true)))
				Expect(createVolumeAttachmentOptionsModel.Name).To(Equal(core.StringPtr("my-volume-attachment")))
				Expect(createVolumeAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVolumeOptions successfully`, func() {
				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				Expect(encryptionKeyIdentityModel).ToNot(BeNil())
				encryptionKeyIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
				Expect(encryptionKeyIdentityModel.Crn).To(Equal(core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				Expect(volumeProfileIdentityModel).ToNot(BeNil())
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")
				Expect(volumeProfileIdentityModel.Name).To(Equal(core.StringPtr("general-purpose")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the VolumePrototypeVolumeByCapacity model
				volumePrototypeModel := new(vpcv1.VolumePrototypeVolumeByCapacity)
				Expect(volumePrototypeModel).ToNot(BeNil())
				volumePrototypeModel.Name = core.StringPtr("my-volume")
				volumePrototypeModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeModel.Profile = volumeProfileIdentityModel
				volumePrototypeModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				volumePrototypeModel.Zone = zoneIdentityModel
				volumePrototypeModel.Capacity = core.Int64Ptr(int64(100))
				Expect(volumePrototypeModel.Name).To(Equal(core.StringPtr("my-volume")))
				Expect(volumePrototypeModel.EncryptionKey).To(Equal(encryptionKeyIdentityModel))
				Expect(volumePrototypeModel.Profile).To(Equal(volumeProfileIdentityModel))
				Expect(volumePrototypeModel.Iops).To(Equal(core.Int64Ptr(int64(10000))))
				Expect(volumePrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(volumePrototypeModel.Zone).To(Equal(zoneIdentityModel))
				Expect(volumePrototypeModel.Capacity).To(Equal(core.Int64Ptr(int64(100))))

				var volumePrototype vpcv1.VolumePrototypeIntf = nil
				// Construct an instance of the CreateVolumeOptions model
				createVolumeOptionsModel := testService.NewCreateVolumeOptions(volumePrototype)
				createVolumeOptionsModel.SetVolumePrototype(volumePrototypeModel)
				createVolumeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVolumeOptionsModel).ToNot(BeNil())
				Expect(createVolumeOptionsModel.VolumePrototype).To(Equal(volumePrototypeModel))
				Expect(createVolumeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVpcAddressPrefixOptions successfully`, func() {
				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				vpcID := "testString"
				createVpcAddressPrefixOptionsCidr := "10.0.0.0/24"
				var createVpcAddressPrefixOptionsZone vpcv1.ZoneIdentityIntf = nil
				// Construct an instance of the CreateVpcAddressPrefixOptions model
				createVpcAddressPrefixOptionsModel := testService.NewCreateVpcAddressPrefixOptions(vpcID, createVpcAddressPrefixOptionsCidr, createVpcAddressPrefixOptionsZone)
				createVpcAddressPrefixOptionsModel.SetVpcID("testString")
				createVpcAddressPrefixOptionsModel.SetCidr("10.0.0.0/24")
				createVpcAddressPrefixOptionsModel.SetZone(zoneIdentityModel)
				createVpcAddressPrefixOptionsModel.SetName("my-address-prefix-2")
				createVpcAddressPrefixOptionsModel.SetIsDefault(true)
				createVpcAddressPrefixOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVpcAddressPrefixOptionsModel).ToNot(BeNil())
				Expect(createVpcAddressPrefixOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(createVpcAddressPrefixOptionsModel.Cidr).To(Equal(core.StringPtr("10.0.0.0/24")))
				Expect(createVpcAddressPrefixOptionsModel.Zone).To(Equal(zoneIdentityModel))
				Expect(createVpcAddressPrefixOptionsModel.Name).To(Equal(core.StringPtr("my-address-prefix-2")))
				Expect(createVpcAddressPrefixOptionsModel.IsDefault).To(Equal(core.BoolPtr(true)))
				Expect(createVpcAddressPrefixOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVpcOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the CreateVpcOptions model
				createVpcOptionsModel := testService.NewCreateVpcOptions()
				createVpcOptionsModel.SetName("my-vpc")
				createVpcOptionsModel.SetAddressPrefixManagement("manual")
				createVpcOptionsModel.SetClassicAccess(false)
				createVpcOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createVpcOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVpcOptionsModel).ToNot(BeNil())
				Expect(createVpcOptionsModel.Name).To(Equal(core.StringPtr("my-vpc")))
				Expect(createVpcOptionsModel.AddressPrefixManagement).To(Equal(core.StringPtr("manual")))
				Expect(createVpcOptionsModel.ClassicAccess).To(Equal(core.BoolPtr(false)))
				Expect(createVpcOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createVpcOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVpcRouteOptions successfully`, func() {
				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				Expect(routeNextHopPrototypeModel).ToNot(BeNil())
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")
				Expect(routeNextHopPrototypeModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				vpcID := "testString"
				createVpcRouteOptionsDestination := "192.168.3.0/24"
				var createVpcRouteOptionsZone vpcv1.ZoneIdentityIntf = nil
				// Construct an instance of the CreateVpcRouteOptions model
				createVpcRouteOptionsModel := testService.NewCreateVpcRouteOptions(vpcID, createVpcRouteOptionsDestination, createVpcRouteOptionsZone)
				createVpcRouteOptionsModel.SetVpcID("testString")
				createVpcRouteOptionsModel.SetDestination("192.168.3.0/24")
				createVpcRouteOptionsModel.SetZone(zoneIdentityModel)
				createVpcRouteOptionsModel.SetAction("delegate")
				createVpcRouteOptionsModel.SetNextHop(routeNextHopPrototypeModel)
				createVpcRouteOptionsModel.SetName("my-route-2")
				createVpcRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVpcRouteOptionsModel).ToNot(BeNil())
				Expect(createVpcRouteOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(createVpcRouteOptionsModel.Destination).To(Equal(core.StringPtr("192.168.3.0/24")))
				Expect(createVpcRouteOptionsModel.Zone).To(Equal(zoneIdentityModel))
				Expect(createVpcRouteOptionsModel.Action).To(Equal(core.StringPtr("delegate")))
				Expect(createVpcRouteOptionsModel.NextHop).To(Equal(routeNextHopPrototypeModel))
				Expect(createVpcRouteOptionsModel.Name).To(Equal(core.StringPtr("my-route-2")))
				Expect(createVpcRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVpcRoutingTableOptions successfully`, func() {
				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				Expect(routeNextHopPrototypeModel).ToNot(BeNil())
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")
				Expect(routeNextHopPrototypeModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the RoutePrototype model
				routePrototypeModel := new(vpcv1.RoutePrototype)
				Expect(routePrototypeModel).ToNot(BeNil())
				routePrototypeModel.Action = core.StringPtr("delegate")
				routePrototypeModel.NextHop = routeNextHopPrototypeModel
				routePrototypeModel.Name = core.StringPtr("my-route-2")
				routePrototypeModel.Destination = core.StringPtr("192.168.3.0/24")
				routePrototypeModel.Zone = zoneIdentityModel
				Expect(routePrototypeModel.Action).To(Equal(core.StringPtr("delegate")))
				Expect(routePrototypeModel.NextHop).To(Equal(routeNextHopPrototypeModel))
				Expect(routePrototypeModel.Name).To(Equal(core.StringPtr("my-route-2")))
				Expect(routePrototypeModel.Destination).To(Equal(core.StringPtr("192.168.3.0/24")))
				Expect(routePrototypeModel.Zone).To(Equal(zoneIdentityModel))

				vpcID := "testString"
				// Construct an instance of the CreateVpcRoutingTableOptions model
				createVpcRoutingTableOptionsModel := testService.NewCreateVpcRoutingTableOptions(vpcID)
				createVpcRoutingTableOptionsModel.SetVpcID("testString")
				createVpcRoutingTableOptionsModel.SetName("my-routing-table-2")
				createVpcRoutingTableOptionsModel.SetRoutes([]vpcv1.RoutePrototype{*routePrototypeModel})
				createVpcRoutingTableOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVpcRoutingTableOptionsModel).ToNot(BeNil())
				Expect(createVpcRoutingTableOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(createVpcRoutingTableOptionsModel.Name).To(Equal(core.StringPtr("my-routing-table-2")))
				Expect(createVpcRoutingTableOptionsModel.Routes).To(Equal([]vpcv1.RoutePrototype{*routePrototypeModel}))
				Expect(createVpcRoutingTableOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVpcRoutingTableRouteOptions successfully`, func() {
				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				Expect(routeNextHopPrototypeModel).ToNot(BeNil())
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")
				Expect(routeNextHopPrototypeModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				vpcID := "testString"
				routingTableID := "testString"
				createVpcRoutingTableRouteOptionsDestination := "192.168.3.0/24"
				var createVpcRoutingTableRouteOptionsZone vpcv1.ZoneIdentityIntf = nil
				// Construct an instance of the CreateVpcRoutingTableRouteOptions model
				createVpcRoutingTableRouteOptionsModel := testService.NewCreateVpcRoutingTableRouteOptions(vpcID, routingTableID, createVpcRoutingTableRouteOptionsDestination, createVpcRoutingTableRouteOptionsZone)
				createVpcRoutingTableRouteOptionsModel.SetVpcID("testString")
				createVpcRoutingTableRouteOptionsModel.SetRoutingTableID("testString")
				createVpcRoutingTableRouteOptionsModel.SetDestination("192.168.3.0/24")
				createVpcRoutingTableRouteOptionsModel.SetZone(zoneIdentityModel)
				createVpcRoutingTableRouteOptionsModel.SetAction("delegate")
				createVpcRoutingTableRouteOptionsModel.SetNextHop(routeNextHopPrototypeModel)
				createVpcRoutingTableRouteOptionsModel.SetName("my-route-2")
				createVpcRoutingTableRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVpcRoutingTableRouteOptionsModel).ToNot(BeNil())
				Expect(createVpcRoutingTableRouteOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(createVpcRoutingTableRouteOptionsModel.RoutingTableID).To(Equal(core.StringPtr("testString")))
				Expect(createVpcRoutingTableRouteOptionsModel.Destination).To(Equal(core.StringPtr("192.168.3.0/24")))
				Expect(createVpcRoutingTableRouteOptionsModel.Zone).To(Equal(zoneIdentityModel))
				Expect(createVpcRoutingTableRouteOptionsModel.Action).To(Equal(core.StringPtr("delegate")))
				Expect(createVpcRoutingTableRouteOptionsModel.NextHop).To(Equal(routeNextHopPrototypeModel))
				Expect(createVpcRoutingTableRouteOptionsModel.Name).To(Equal(core.StringPtr("my-route-2")))
				Expect(createVpcRoutingTableRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVpnGatewayConnectionOptions successfully`, func() {
				// Construct an instance of the IKEPolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IKEPolicyIdentityByID)
				Expect(ikePolicyIdentityModel).ToNot(BeNil())
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")
				Expect(ikePolicyIdentityModel.ID).To(Equal(core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")))

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				Expect(iPsecPolicyIdentityModel).ToNot(BeNil())
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")
				Expect(iPsecPolicyIdentityModel.ID).To(Equal(core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")))

				// Construct an instance of the VPNGatewayConnectionDPDPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDPDPrototype)
				Expect(vpnGatewayConnectionDpdPrototypeModel).ToNot(BeNil())
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))
				Expect(vpnGatewayConnectionDpdPrototypeModel.Action).To(Equal(core.StringPtr("restart")))
				Expect(vpnGatewayConnectionDpdPrototypeModel.Interval).To(Equal(core.Int64Ptr(int64(30))))
				Expect(vpnGatewayConnectionDpdPrototypeModel.Timeout).To(Equal(core.Int64Ptr(int64(120))))

				vpnGatewayID := "testString"
				createVpnGatewayConnectionOptionsPeerAddress := "169.21.50.5"
				createVpnGatewayConnectionOptionsPsk := "lkj14b1oi0alcniejkso"
				// Construct an instance of the CreateVpnGatewayConnectionOptions model
				createVpnGatewayConnectionOptionsModel := testService.NewCreateVpnGatewayConnectionOptions(vpnGatewayID, createVpnGatewayConnectionOptionsPeerAddress, createVpnGatewayConnectionOptionsPsk)
				createVpnGatewayConnectionOptionsModel.SetVpnGatewayID("testString")
				createVpnGatewayConnectionOptionsModel.SetPeerAddress("169.21.50.5")
				createVpnGatewayConnectionOptionsModel.SetPsk("lkj14b1oi0alcniejkso")
				createVpnGatewayConnectionOptionsModel.SetAdminStateUp(true)
				createVpnGatewayConnectionOptionsModel.SetIkePolicy(ikePolicyIdentityModel)
				createVpnGatewayConnectionOptionsModel.SetIpsecPolicy(iPsecPolicyIdentityModel)
				createVpnGatewayConnectionOptionsModel.SetName("my-vpn-connection")
				createVpnGatewayConnectionOptionsModel.SetDeadPeerDetection(vpnGatewayConnectionDpdPrototypeModel)
				createVpnGatewayConnectionOptionsModel.SetLocalCidrs([]string{"192.168.1.0/24"})
				createVpnGatewayConnectionOptionsModel.SetPeerCidrs([]string{"10.45.1.0/24"})
				createVpnGatewayConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVpnGatewayConnectionOptionsModel).ToNot(BeNil())
				Expect(createVpnGatewayConnectionOptionsModel.VpnGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(createVpnGatewayConnectionOptionsModel.PeerAddress).To(Equal(core.StringPtr("169.21.50.5")))
				Expect(createVpnGatewayConnectionOptionsModel.Psk).To(Equal(core.StringPtr("lkj14b1oi0alcniejkso")))
				Expect(createVpnGatewayConnectionOptionsModel.AdminStateUp).To(Equal(core.BoolPtr(true)))
				Expect(createVpnGatewayConnectionOptionsModel.IkePolicy).To(Equal(ikePolicyIdentityModel))
				Expect(createVpnGatewayConnectionOptionsModel.IpsecPolicy).To(Equal(iPsecPolicyIdentityModel))
				Expect(createVpnGatewayConnectionOptionsModel.Name).To(Equal(core.StringPtr("my-vpn-connection")))
				Expect(createVpnGatewayConnectionOptionsModel.DeadPeerDetection).To(Equal(vpnGatewayConnectionDpdPrototypeModel))
				Expect(createVpnGatewayConnectionOptionsModel.LocalCidrs).To(Equal([]string{"192.168.1.0/24"}))
				Expect(createVpnGatewayConnectionOptionsModel.PeerCidrs).To(Equal([]string{"10.45.1.0/24"}))
				Expect(createVpnGatewayConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVpnGatewayOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				Expect(subnetIdentityModel).ToNot(BeNil())
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
				Expect(subnetIdentityModel.ID).To(Equal(core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")))

				var createVpnGatewayOptionsSubnet vpcv1.SubnetIdentityIntf = nil
				// Construct an instance of the CreateVpnGatewayOptions model
				createVpnGatewayOptionsModel := testService.NewCreateVpnGatewayOptions(createVpnGatewayOptionsSubnet)
				createVpnGatewayOptionsModel.SetSubnet(subnetIdentityModel)
				createVpnGatewayOptionsModel.SetName("my-vpn-gateway")
				createVpnGatewayOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createVpnGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVpnGatewayOptionsModel).ToNot(BeNil())
				Expect(createVpnGatewayOptionsModel.Subnet).To(Equal(subnetIdentityModel))
				Expect(createVpnGatewayOptionsModel.Name).To(Equal(core.StringPtr("my-vpn-gateway")))
				Expect(createVpnGatewayOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createVpnGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteAllInstanceGroupMembershipsOptions successfully`, func() {
				instanceGroupID := "testString"
				// Construct an instance of the DeleteAllInstanceGroupMembershipsOptions model
				deleteAllInstanceGroupMembershipsOptionsModel := testService.NewDeleteAllInstanceGroupMembershipsOptions(instanceGroupID)
				deleteAllInstanceGroupMembershipsOptionsModel.SetInstanceGroupID("testString")
				deleteAllInstanceGroupMembershipsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteAllInstanceGroupMembershipsOptionsModel).ToNot(BeNil())
				Expect(deleteAllInstanceGroupMembershipsOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteAllInstanceGroupMembershipsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteDedicatedHostGroupOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeleteDedicatedHostGroupOptions model
				deleteDedicatedHostGroupOptionsModel := testService.NewDeleteDedicatedHostGroupOptions(id)
				deleteDedicatedHostGroupOptionsModel.SetID("testString")
				deleteDedicatedHostGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteDedicatedHostGroupOptionsModel).ToNot(BeNil())
				Expect(deleteDedicatedHostGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteDedicatedHostGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteDedicatedHostOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeleteDedicatedHostOptions model
				deleteDedicatedHostOptionsModel := testService.NewDeleteDedicatedHostOptions(id)
				deleteDedicatedHostOptionsModel.SetID("testString")
				deleteDedicatedHostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteDedicatedHostOptionsModel).ToNot(BeNil())
				Expect(deleteDedicatedHostOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteDedicatedHostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteFlowLogCollectorOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeleteFlowLogCollectorOptions model
				deleteFlowLogCollectorOptionsModel := testService.NewDeleteFlowLogCollectorOptions(id)
				deleteFlowLogCollectorOptionsModel.SetID("testString")
				deleteFlowLogCollectorOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteFlowLogCollectorOptionsModel).ToNot(BeNil())
				Expect(deleteFlowLogCollectorOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteFlowLogCollectorOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteIkePolicyOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeleteIkePolicyOptions model
				deleteIkePolicyOptionsModel := testService.NewDeleteIkePolicyOptions(id)
				deleteIkePolicyOptionsModel.SetID("testString")
				deleteIkePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteIkePolicyOptionsModel).ToNot(BeNil())
				Expect(deleteIkePolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteIkePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteImageOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeleteImageOptions model
				deleteImageOptionsModel := testService.NewDeleteImageOptions(id)
				deleteImageOptionsModel.SetID("testString")
				deleteImageOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteImageOptionsModel).ToNot(BeNil())
				Expect(deleteImageOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteImageOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceGroupManagerOptions successfully`, func() {
				instanceGroupID := "testString"
				id := "testString"
				// Construct an instance of the DeleteInstanceGroupManagerOptions model
				deleteInstanceGroupManagerOptionsModel := testService.NewDeleteInstanceGroupManagerOptions(instanceGroupID, id)
				deleteInstanceGroupManagerOptionsModel.SetInstanceGroupID("testString")
				deleteInstanceGroupManagerOptionsModel.SetID("testString")
				deleteInstanceGroupManagerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceGroupManagerOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceGroupManagerOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupManagerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupManagerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceGroupManagerPolicyOptions successfully`, func() {
				instanceGroupID := "testString"
				instanceGroupManagerID := "testString"
				id := "testString"
				// Construct an instance of the DeleteInstanceGroupManagerPolicyOptions model
				deleteInstanceGroupManagerPolicyOptionsModel := testService.NewDeleteInstanceGroupManagerPolicyOptions(instanceGroupID, instanceGroupManagerID, id)
				deleteInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupID("testString")
				deleteInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupManagerID("testString")
				deleteInstanceGroupManagerPolicyOptionsModel.SetID("testString")
				deleteInstanceGroupManagerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceGroupManagerPolicyOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceGroupManagerPolicyOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupManagerPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupManagerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceGroupMembershipOptions successfully`, func() {
				instanceGroupID := "testString"
				id := "testString"
				// Construct an instance of the DeleteInstanceGroupMembershipOptions model
				deleteInstanceGroupMembershipOptionsModel := testService.NewDeleteInstanceGroupMembershipOptions(instanceGroupID, id)
				deleteInstanceGroupMembershipOptionsModel.SetInstanceGroupID("testString")
				deleteInstanceGroupMembershipOptionsModel.SetID("testString")
				deleteInstanceGroupMembershipOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceGroupMembershipOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceGroupMembershipOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupMembershipOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupMembershipOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceGroupOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeleteInstanceGroupOptions model
				deleteInstanceGroupOptionsModel := testService.NewDeleteInstanceGroupOptions(id)
				deleteInstanceGroupOptionsModel.SetID("testString")
				deleteInstanceGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceGroupOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeleteInstanceOptions model
				deleteInstanceOptionsModel := testService.NewDeleteInstanceOptions(id)
				deleteInstanceOptionsModel.SetID("testString")
				deleteInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceTemplateOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeleteInstanceTemplateOptions model
				deleteInstanceTemplateOptionsModel := testService.NewDeleteInstanceTemplateOptions(id)
				deleteInstanceTemplateOptionsModel.SetID("testString")
				deleteInstanceTemplateOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceTemplateOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceTemplateOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceTemplateOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteIpsecPolicyOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeleteIpsecPolicyOptions model
				deleteIpsecPolicyOptionsModel := testService.NewDeleteIpsecPolicyOptions(id)
				deleteIpsecPolicyOptionsModel.SetID("testString")
				deleteIpsecPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteIpsecPolicyOptionsModel).ToNot(BeNil())
				Expect(deleteIpsecPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteIpsecPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteKeyOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeleteKeyOptions model
				deleteKeyOptionsModel := testService.NewDeleteKeyOptions(id)
				deleteKeyOptionsModel.SetID("testString")
				deleteKeyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteKeyOptionsModel).ToNot(BeNil())
				Expect(deleteKeyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteKeyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoadBalancerListenerOptions successfully`, func() {
				loadBalancerID := "testString"
				id := "testString"
				// Construct an instance of the DeleteLoadBalancerListenerOptions model
				deleteLoadBalancerListenerOptionsModel := testService.NewDeleteLoadBalancerListenerOptions(loadBalancerID, id)
				deleteLoadBalancerListenerOptionsModel.SetLoadBalancerID("testString")
				deleteLoadBalancerListenerOptionsModel.SetID("testString")
				deleteLoadBalancerListenerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoadBalancerListenerOptionsModel).ToNot(BeNil())
				Expect(deleteLoadBalancerListenerOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoadBalancerListenerPolicyOptions successfully`, func() {
				loadBalancerID := "testString"
				listenerID := "testString"
				id := "testString"
				// Construct an instance of the DeleteLoadBalancerListenerPolicyOptions model
				deleteLoadBalancerListenerPolicyOptionsModel := testService.NewDeleteLoadBalancerListenerPolicyOptions(loadBalancerID, listenerID, id)
				deleteLoadBalancerListenerPolicyOptionsModel.SetLoadBalancerID("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.SetListenerID("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.SetID("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoadBalancerListenerPolicyOptionsModel).ToNot(BeNil())
				Expect(deleteLoadBalancerListenerPolicyOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoadBalancerListenerPolicyRuleOptions successfully`, func() {
				loadBalancerID := "testString"
				listenerID := "testString"
				policyID := "testString"
				id := "testString"
				// Construct an instance of the DeleteLoadBalancerListenerPolicyRuleOptions model
				deleteLoadBalancerListenerPolicyRuleOptionsModel := testService.NewDeleteLoadBalancerListenerPolicyRuleOptions(loadBalancerID, listenerID, policyID, id)
				deleteLoadBalancerListenerPolicyRuleOptionsModel.SetLoadBalancerID("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.SetListenerID("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.SetPolicyID("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.SetID("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoadBalancerListenerPolicyRuleOptionsModel).ToNot(BeNil())
				Expect(deleteLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyRuleOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyRuleOptionsModel.PolicyID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoadBalancerOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeleteLoadBalancerOptions model
				deleteLoadBalancerOptionsModel := testService.NewDeleteLoadBalancerOptions(id)
				deleteLoadBalancerOptionsModel.SetID("testString")
				deleteLoadBalancerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoadBalancerOptionsModel).ToNot(BeNil())
				Expect(deleteLoadBalancerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoadBalancerPoolMemberOptions successfully`, func() {
				loadBalancerID := "testString"
				poolID := "testString"
				id := "testString"
				// Construct an instance of the DeleteLoadBalancerPoolMemberOptions model
				deleteLoadBalancerPoolMemberOptionsModel := testService.NewDeleteLoadBalancerPoolMemberOptions(loadBalancerID, poolID, id)
				deleteLoadBalancerPoolMemberOptionsModel.SetLoadBalancerID("testString")
				deleteLoadBalancerPoolMemberOptionsModel.SetPoolID("testString")
				deleteLoadBalancerPoolMemberOptionsModel.SetID("testString")
				deleteLoadBalancerPoolMemberOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoadBalancerPoolMemberOptionsModel).ToNot(BeNil())
				Expect(deleteLoadBalancerPoolMemberOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerPoolMemberOptionsModel.PoolID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerPoolMemberOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerPoolMemberOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoadBalancerPoolOptions successfully`, func() {
				loadBalancerID := "testString"
				id := "testString"
				// Construct an instance of the DeleteLoadBalancerPoolOptions model
				deleteLoadBalancerPoolOptionsModel := testService.NewDeleteLoadBalancerPoolOptions(loadBalancerID, id)
				deleteLoadBalancerPoolOptionsModel.SetLoadBalancerID("testString")
				deleteLoadBalancerPoolOptionsModel.SetID("testString")
				deleteLoadBalancerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoadBalancerPoolOptionsModel).ToNot(BeNil())
				Expect(deleteLoadBalancerPoolOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerPoolOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteNetworkAclOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeleteNetworkAclOptions model
				deleteNetworkAclOptionsModel := testService.NewDeleteNetworkAclOptions(id)
				deleteNetworkAclOptionsModel.SetID("testString")
				deleteNetworkAclOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteNetworkAclOptionsModel).ToNot(BeNil())
				Expect(deleteNetworkAclOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteNetworkAclOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteNetworkAclRuleOptions successfully`, func() {
				networkAclID := "testString"
				id := "testString"
				// Construct an instance of the DeleteNetworkAclRuleOptions model
				deleteNetworkAclRuleOptionsModel := testService.NewDeleteNetworkAclRuleOptions(networkAclID, id)
				deleteNetworkAclRuleOptionsModel.SetNetworkAclID("testString")
				deleteNetworkAclRuleOptionsModel.SetID("testString")
				deleteNetworkAclRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteNetworkAclRuleOptionsModel).ToNot(BeNil())
				Expect(deleteNetworkAclRuleOptionsModel.NetworkAclID).To(Equal(core.StringPtr("testString")))
				Expect(deleteNetworkAclRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteNetworkAclRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteNetworkInterfaceFloatingIpBindingOptions successfully`, func() {
				instanceID := "testString"
				networkInterfaceID := "testString"
				id := "testString"
				// Construct an instance of the DeleteNetworkInterfaceFloatingIpBindingOptions model
				deleteNetworkInterfaceFloatingIpBindingOptionsModel := testService.NewDeleteNetworkInterfaceFloatingIpBindingOptions(instanceID, networkInterfaceID, id)
				deleteNetworkInterfaceFloatingIpBindingOptionsModel.SetInstanceID("testString")
				deleteNetworkInterfaceFloatingIpBindingOptionsModel.SetNetworkInterfaceID("testString")
				deleteNetworkInterfaceFloatingIpBindingOptionsModel.SetID("testString")
				deleteNetworkInterfaceFloatingIpBindingOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteNetworkInterfaceFloatingIpBindingOptionsModel).ToNot(BeNil())
				Expect(deleteNetworkInterfaceFloatingIpBindingOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(deleteNetworkInterfaceFloatingIpBindingOptionsModel.NetworkInterfaceID).To(Equal(core.StringPtr("testString")))
				Expect(deleteNetworkInterfaceFloatingIpBindingOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteNetworkInterfaceFloatingIpBindingOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteNetworkInterfaceOptions successfully`, func() {
				instanceID := "testString"
				id := "testString"
				// Construct an instance of the DeleteNetworkInterfaceOptions model
				deleteNetworkInterfaceOptionsModel := testService.NewDeleteNetworkInterfaceOptions(instanceID, id)
				deleteNetworkInterfaceOptionsModel.SetInstanceID("testString")
				deleteNetworkInterfaceOptionsModel.SetID("testString")
				deleteNetworkInterfaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteNetworkInterfaceOptionsModel).ToNot(BeNil())
				Expect(deleteNetworkInterfaceOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(deleteNetworkInterfaceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteNetworkInterfaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeletePublicGatewayOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeletePublicGatewayOptions model
				deletePublicGatewayOptionsModel := testService.NewDeletePublicGatewayOptions(id)
				deletePublicGatewayOptionsModel.SetID("testString")
				deletePublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deletePublicGatewayOptionsModel).ToNot(BeNil())
				Expect(deletePublicGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deletePublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteSecurityGroupNetworkInterfaceBindingOptions successfully`, func() {
				securityGroupID := "testString"
				id := "testString"
				// Construct an instance of the DeleteSecurityGroupNetworkInterfaceBindingOptions model
				deleteSecurityGroupNetworkInterfaceBindingOptionsModel := testService.NewDeleteSecurityGroupNetworkInterfaceBindingOptions(securityGroupID, id)
				deleteSecurityGroupNetworkInterfaceBindingOptionsModel.SetSecurityGroupID("testString")
				deleteSecurityGroupNetworkInterfaceBindingOptionsModel.SetID("testString")
				deleteSecurityGroupNetworkInterfaceBindingOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteSecurityGroupNetworkInterfaceBindingOptionsModel).ToNot(BeNil())
				Expect(deleteSecurityGroupNetworkInterfaceBindingOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSecurityGroupNetworkInterfaceBindingOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSecurityGroupNetworkInterfaceBindingOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteSecurityGroupOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeleteSecurityGroupOptions model
				deleteSecurityGroupOptionsModel := testService.NewDeleteSecurityGroupOptions(id)
				deleteSecurityGroupOptionsModel.SetID("testString")
				deleteSecurityGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteSecurityGroupOptionsModel).ToNot(BeNil())
				Expect(deleteSecurityGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSecurityGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteSecurityGroupRuleOptions successfully`, func() {
				securityGroupID := "testString"
				id := "testString"
				// Construct an instance of the DeleteSecurityGroupRuleOptions model
				deleteSecurityGroupRuleOptionsModel := testService.NewDeleteSecurityGroupRuleOptions(securityGroupID, id)
				deleteSecurityGroupRuleOptionsModel.SetSecurityGroupID("testString")
				deleteSecurityGroupRuleOptionsModel.SetID("testString")
				deleteSecurityGroupRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteSecurityGroupRuleOptionsModel).ToNot(BeNil())
				Expect(deleteSecurityGroupRuleOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSecurityGroupRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSecurityGroupRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteSubnetOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeleteSubnetOptions model
				deleteSubnetOptionsModel := testService.NewDeleteSubnetOptions(id)
				deleteSubnetOptionsModel.SetID("testString")
				deleteSubnetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteSubnetOptionsModel).ToNot(BeNil())
				Expect(deleteSubnetOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSubnetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteSubnetPublicGatewayBindingOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeleteSubnetPublicGatewayBindingOptions model
				deleteSubnetPublicGatewayBindingOptionsModel := testService.NewDeleteSubnetPublicGatewayBindingOptions(id)
				deleteSubnetPublicGatewayBindingOptionsModel.SetID("testString")
				deleteSubnetPublicGatewayBindingOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteSubnetPublicGatewayBindingOptionsModel).ToNot(BeNil())
				Expect(deleteSubnetPublicGatewayBindingOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSubnetPublicGatewayBindingOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVolumeAttachmentOptions successfully`, func() {
				instanceID := "testString"
				id := "testString"
				// Construct an instance of the DeleteVolumeAttachmentOptions model
				deleteVolumeAttachmentOptionsModel := testService.NewDeleteVolumeAttachmentOptions(instanceID, id)
				deleteVolumeAttachmentOptionsModel.SetInstanceID("testString")
				deleteVolumeAttachmentOptionsModel.SetID("testString")
				deleteVolumeAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVolumeAttachmentOptionsModel).ToNot(BeNil())
				Expect(deleteVolumeAttachmentOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVolumeAttachmentOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVolumeAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVolumeOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeleteVolumeOptions model
				deleteVolumeOptionsModel := testService.NewDeleteVolumeOptions(id)
				deleteVolumeOptionsModel.SetID("testString")
				deleteVolumeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVolumeOptionsModel).ToNot(BeNil())
				Expect(deleteVolumeOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVolumeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVpcAddressPrefixOptions successfully`, func() {
				vpcID := "testString"
				id := "testString"
				// Construct an instance of the DeleteVpcAddressPrefixOptions model
				deleteVpcAddressPrefixOptionsModel := testService.NewDeleteVpcAddressPrefixOptions(vpcID, id)
				deleteVpcAddressPrefixOptionsModel.SetVpcID("testString")
				deleteVpcAddressPrefixOptionsModel.SetID("testString")
				deleteVpcAddressPrefixOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVpcAddressPrefixOptionsModel).ToNot(BeNil())
				Expect(deleteVpcAddressPrefixOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpcAddressPrefixOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpcAddressPrefixOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVpcOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeleteVpcOptions model
				deleteVpcOptionsModel := testService.NewDeleteVpcOptions(id)
				deleteVpcOptionsModel.SetID("testString")
				deleteVpcOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVpcOptionsModel).ToNot(BeNil())
				Expect(deleteVpcOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpcOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVpcRouteOptions successfully`, func() {
				vpcID := "testString"
				id := "testString"
				// Construct an instance of the DeleteVpcRouteOptions model
				deleteVpcRouteOptionsModel := testService.NewDeleteVpcRouteOptions(vpcID, id)
				deleteVpcRouteOptionsModel.SetVpcID("testString")
				deleteVpcRouteOptionsModel.SetID("testString")
				deleteVpcRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVpcRouteOptionsModel).ToNot(BeNil())
				Expect(deleteVpcRouteOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpcRouteOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpcRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVpcRoutingTableOptions successfully`, func() {
				vpcID := "testString"
				id := "testString"
				// Construct an instance of the DeleteVpcRoutingTableOptions model
				deleteVpcRoutingTableOptionsModel := testService.NewDeleteVpcRoutingTableOptions(vpcID, id)
				deleteVpcRoutingTableOptionsModel.SetVpcID("testString")
				deleteVpcRoutingTableOptionsModel.SetID("testString")
				deleteVpcRoutingTableOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVpcRoutingTableOptionsModel).ToNot(BeNil())
				Expect(deleteVpcRoutingTableOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpcRoutingTableOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpcRoutingTableOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVpcRoutingTableRouteOptions successfully`, func() {
				vpcID := "testString"
				routingTableID := "testString"
				id := "testString"
				// Construct an instance of the DeleteVpcRoutingTableRouteOptions model
				deleteVpcRoutingTableRouteOptionsModel := testService.NewDeleteVpcRoutingTableRouteOptions(vpcID, routingTableID, id)
				deleteVpcRoutingTableRouteOptionsModel.SetVpcID("testString")
				deleteVpcRoutingTableRouteOptionsModel.SetRoutingTableID("testString")
				deleteVpcRoutingTableRouteOptionsModel.SetID("testString")
				deleteVpcRoutingTableRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVpcRoutingTableRouteOptionsModel).ToNot(BeNil())
				Expect(deleteVpcRoutingTableRouteOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpcRoutingTableRouteOptionsModel.RoutingTableID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpcRoutingTableRouteOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpcRoutingTableRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVpnGatewayConnectionLocalCidrOptions successfully`, func() {
				vpnGatewayID := "testString"
				id := "testString"
				prefixAddress := "testString"
				prefixLength := "testString"
				// Construct an instance of the DeleteVpnGatewayConnectionLocalCidrOptions model
				deleteVpnGatewayConnectionLocalCidrOptionsModel := testService.NewDeleteVpnGatewayConnectionLocalCidrOptions(vpnGatewayID, id, prefixAddress, prefixLength)
				deleteVpnGatewayConnectionLocalCidrOptionsModel.SetVpnGatewayID("testString")
				deleteVpnGatewayConnectionLocalCidrOptionsModel.SetID("testString")
				deleteVpnGatewayConnectionLocalCidrOptionsModel.SetPrefixAddress("testString")
				deleteVpnGatewayConnectionLocalCidrOptionsModel.SetPrefixLength("testString")
				deleteVpnGatewayConnectionLocalCidrOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVpnGatewayConnectionLocalCidrOptionsModel).ToNot(BeNil())
				Expect(deleteVpnGatewayConnectionLocalCidrOptionsModel.VpnGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpnGatewayConnectionLocalCidrOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpnGatewayConnectionLocalCidrOptionsModel.PrefixAddress).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpnGatewayConnectionLocalCidrOptionsModel.PrefixLength).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpnGatewayConnectionLocalCidrOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVpnGatewayConnectionOptions successfully`, func() {
				vpnGatewayID := "testString"
				id := "testString"
				// Construct an instance of the DeleteVpnGatewayConnectionOptions model
				deleteVpnGatewayConnectionOptionsModel := testService.NewDeleteVpnGatewayConnectionOptions(vpnGatewayID, id)
				deleteVpnGatewayConnectionOptionsModel.SetVpnGatewayID("testString")
				deleteVpnGatewayConnectionOptionsModel.SetID("testString")
				deleteVpnGatewayConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVpnGatewayConnectionOptionsModel).ToNot(BeNil())
				Expect(deleteVpnGatewayConnectionOptionsModel.VpnGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpnGatewayConnectionOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpnGatewayConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVpnGatewayConnectionPeerCidrOptions successfully`, func() {
				vpnGatewayID := "testString"
				id := "testString"
				prefixAddress := "testString"
				prefixLength := "testString"
				// Construct an instance of the DeleteVpnGatewayConnectionPeerCidrOptions model
				deleteVpnGatewayConnectionPeerCidrOptionsModel := testService.NewDeleteVpnGatewayConnectionPeerCidrOptions(vpnGatewayID, id, prefixAddress, prefixLength)
				deleteVpnGatewayConnectionPeerCidrOptionsModel.SetVpnGatewayID("testString")
				deleteVpnGatewayConnectionPeerCidrOptionsModel.SetID("testString")
				deleteVpnGatewayConnectionPeerCidrOptionsModel.SetPrefixAddress("testString")
				deleteVpnGatewayConnectionPeerCidrOptionsModel.SetPrefixLength("testString")
				deleteVpnGatewayConnectionPeerCidrOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVpnGatewayConnectionPeerCidrOptionsModel).ToNot(BeNil())
				Expect(deleteVpnGatewayConnectionPeerCidrOptionsModel.VpnGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpnGatewayConnectionPeerCidrOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpnGatewayConnectionPeerCidrOptionsModel.PrefixAddress).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpnGatewayConnectionPeerCidrOptionsModel.PrefixLength).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpnGatewayConnectionPeerCidrOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVpnGatewayOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the DeleteVpnGatewayOptions model
				deleteVpnGatewayOptionsModel := testService.NewDeleteVpnGatewayOptions(id)
				deleteVpnGatewayOptionsModel.SetID("testString")
				deleteVpnGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVpnGatewayOptionsModel).ToNot(BeNil())
				Expect(deleteVpnGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpnGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetDedicatedHostGroupOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetDedicatedHostGroupOptions model
				getDedicatedHostGroupOptionsModel := testService.NewGetDedicatedHostGroupOptions(id)
				getDedicatedHostGroupOptionsModel.SetID("testString")
				getDedicatedHostGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getDedicatedHostGroupOptionsModel).ToNot(BeNil())
				Expect(getDedicatedHostGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getDedicatedHostGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetDedicatedHostOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetDedicatedHostOptions model
				getDedicatedHostOptionsModel := testService.NewGetDedicatedHostOptions(id)
				getDedicatedHostOptionsModel.SetID("testString")
				getDedicatedHostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getDedicatedHostOptionsModel).ToNot(BeNil())
				Expect(getDedicatedHostOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getDedicatedHostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetDedicatedHostProfileOptions successfully`, func() {
				name := "testString"
				// Construct an instance of the GetDedicatedHostProfileOptions model
				getDedicatedHostProfileOptionsModel := testService.NewGetDedicatedHostProfileOptions(name)
				getDedicatedHostProfileOptionsModel.SetName("testString")
				getDedicatedHostProfileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getDedicatedHostProfileOptionsModel).ToNot(BeNil())
				Expect(getDedicatedHostProfileOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getDedicatedHostProfileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetFloatingIpOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetFloatingIpOptions model
				getFloatingIpOptionsModel := testService.NewGetFloatingIpOptions(id)
				getFloatingIpOptionsModel.SetID("testString")
				getFloatingIpOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getFloatingIpOptionsModel).ToNot(BeNil())
				Expect(getFloatingIpOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getFloatingIpOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetFlowLogCollectorOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetFlowLogCollectorOptions model
				getFlowLogCollectorOptionsModel := testService.NewGetFlowLogCollectorOptions(id)
				getFlowLogCollectorOptionsModel.SetID("testString")
				getFlowLogCollectorOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getFlowLogCollectorOptionsModel).ToNot(BeNil())
				Expect(getFlowLogCollectorOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getFlowLogCollectorOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetIkePolicyOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetIkePolicyOptions model
				getIkePolicyOptionsModel := testService.NewGetIkePolicyOptions(id)
				getIkePolicyOptionsModel.SetID("testString")
				getIkePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getIkePolicyOptionsModel).ToNot(BeNil())
				Expect(getIkePolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getIkePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetImageOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetImageOptions model
				getImageOptionsModel := testService.NewGetImageOptions(id)
				getImageOptionsModel.SetID("testString")
				getImageOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getImageOptionsModel).ToNot(BeNil())
				Expect(getImageOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getImageOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceGroupManagerOptions successfully`, func() {
				instanceGroupID := "testString"
				id := "testString"
				// Construct an instance of the GetInstanceGroupManagerOptions model
				getInstanceGroupManagerOptionsModel := testService.NewGetInstanceGroupManagerOptions(instanceGroupID, id)
				getInstanceGroupManagerOptionsModel.SetInstanceGroupID("testString")
				getInstanceGroupManagerOptionsModel.SetID("testString")
				getInstanceGroupManagerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceGroupManagerOptionsModel).ToNot(BeNil())
				Expect(getInstanceGroupManagerOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupManagerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupManagerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceGroupManagerPolicyOptions successfully`, func() {
				instanceGroupID := "testString"
				instanceGroupManagerID := "testString"
				id := "testString"
				// Construct an instance of the GetInstanceGroupManagerPolicyOptions model
				getInstanceGroupManagerPolicyOptionsModel := testService.NewGetInstanceGroupManagerPolicyOptions(instanceGroupID, instanceGroupManagerID, id)
				getInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupID("testString")
				getInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupManagerID("testString")
				getInstanceGroupManagerPolicyOptionsModel.SetID("testString")
				getInstanceGroupManagerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceGroupManagerPolicyOptionsModel).ToNot(BeNil())
				Expect(getInstanceGroupManagerPolicyOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupManagerPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupManagerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceGroupMembershipOptions successfully`, func() {
				instanceGroupID := "testString"
				id := "testString"
				// Construct an instance of the GetInstanceGroupMembershipOptions model
				getInstanceGroupMembershipOptionsModel := testService.NewGetInstanceGroupMembershipOptions(instanceGroupID, id)
				getInstanceGroupMembershipOptionsModel.SetInstanceGroupID("testString")
				getInstanceGroupMembershipOptionsModel.SetID("testString")
				getInstanceGroupMembershipOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceGroupMembershipOptionsModel).ToNot(BeNil())
				Expect(getInstanceGroupMembershipOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupMembershipOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupMembershipOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceGroupOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetInstanceGroupOptions model
				getInstanceGroupOptionsModel := testService.NewGetInstanceGroupOptions(id)
				getInstanceGroupOptionsModel.SetID("testString")
				getInstanceGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceGroupOptionsModel).ToNot(BeNil())
				Expect(getInstanceGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceInitializationOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetInstanceInitializationOptions model
				getInstanceInitializationOptionsModel := testService.NewGetInstanceInitializationOptions(id)
				getInstanceInitializationOptionsModel.SetID("testString")
				getInstanceInitializationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceInitializationOptionsModel).ToNot(BeNil())
				Expect(getInstanceInitializationOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceInitializationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetInstanceOptions model
				getInstanceOptionsModel := testService.NewGetInstanceOptions(id)
				getInstanceOptionsModel.SetID("testString")
				getInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceOptionsModel).ToNot(BeNil())
				Expect(getInstanceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceProfileOptions successfully`, func() {
				name := "testString"
				// Construct an instance of the GetInstanceProfileOptions model
				getInstanceProfileOptionsModel := testService.NewGetInstanceProfileOptions(name)
				getInstanceProfileOptionsModel.SetName("testString")
				getInstanceProfileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceProfileOptionsModel).ToNot(BeNil())
				Expect(getInstanceProfileOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceProfileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceTemplateOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetInstanceTemplateOptions model
				getInstanceTemplateOptionsModel := testService.NewGetInstanceTemplateOptions(id)
				getInstanceTemplateOptionsModel.SetID("testString")
				getInstanceTemplateOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceTemplateOptionsModel).ToNot(BeNil())
				Expect(getInstanceTemplateOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceTemplateOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetIpsecPolicyOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetIpsecPolicyOptions model
				getIpsecPolicyOptionsModel := testService.NewGetIpsecPolicyOptions(id)
				getIpsecPolicyOptionsModel.SetID("testString")
				getIpsecPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getIpsecPolicyOptionsModel).ToNot(BeNil())
				Expect(getIpsecPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getIpsecPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetKeyOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetKeyOptions model
				getKeyOptionsModel := testService.NewGetKeyOptions(id)
				getKeyOptionsModel.SetID("testString")
				getKeyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getKeyOptionsModel).ToNot(BeNil())
				Expect(getKeyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getKeyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerListenerOptions successfully`, func() {
				loadBalancerID := "testString"
				id := "testString"
				// Construct an instance of the GetLoadBalancerListenerOptions model
				getLoadBalancerListenerOptionsModel := testService.NewGetLoadBalancerListenerOptions(loadBalancerID, id)
				getLoadBalancerListenerOptionsModel.SetLoadBalancerID("testString")
				getLoadBalancerListenerOptionsModel.SetID("testString")
				getLoadBalancerListenerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerListenerOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerListenerOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerListenerPolicyOptions successfully`, func() {
				loadBalancerID := "testString"
				listenerID := "testString"
				id := "testString"
				// Construct an instance of the GetLoadBalancerListenerPolicyOptions model
				getLoadBalancerListenerPolicyOptionsModel := testService.NewGetLoadBalancerListenerPolicyOptions(loadBalancerID, listenerID, id)
				getLoadBalancerListenerPolicyOptionsModel.SetLoadBalancerID("testString")
				getLoadBalancerListenerPolicyOptionsModel.SetListenerID("testString")
				getLoadBalancerListenerPolicyOptionsModel.SetID("testString")
				getLoadBalancerListenerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerListenerPolicyOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerListenerPolicyOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerListenerPolicyRuleOptions successfully`, func() {
				loadBalancerID := "testString"
				listenerID := "testString"
				policyID := "testString"
				id := "testString"
				// Construct an instance of the GetLoadBalancerListenerPolicyRuleOptions model
				getLoadBalancerListenerPolicyRuleOptionsModel := testService.NewGetLoadBalancerListenerPolicyRuleOptions(loadBalancerID, listenerID, policyID, id)
				getLoadBalancerListenerPolicyRuleOptionsModel.SetLoadBalancerID("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.SetListenerID("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.SetPolicyID("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.SetID("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerListenerPolicyRuleOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyRuleOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyRuleOptionsModel.PolicyID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetLoadBalancerOptions model
				getLoadBalancerOptionsModel := testService.NewGetLoadBalancerOptions(id)
				getLoadBalancerOptionsModel.SetID("testString")
				getLoadBalancerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerPoolMemberOptions successfully`, func() {
				loadBalancerID := "testString"
				poolID := "testString"
				id := "testString"
				// Construct an instance of the GetLoadBalancerPoolMemberOptions model
				getLoadBalancerPoolMemberOptionsModel := testService.NewGetLoadBalancerPoolMemberOptions(loadBalancerID, poolID, id)
				getLoadBalancerPoolMemberOptionsModel.SetLoadBalancerID("testString")
				getLoadBalancerPoolMemberOptionsModel.SetPoolID("testString")
				getLoadBalancerPoolMemberOptionsModel.SetID("testString")
				getLoadBalancerPoolMemberOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerPoolMemberOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerPoolMemberOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerPoolMemberOptionsModel.PoolID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerPoolMemberOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerPoolMemberOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerPoolOptions successfully`, func() {
				loadBalancerID := "testString"
				id := "testString"
				// Construct an instance of the GetLoadBalancerPoolOptions model
				getLoadBalancerPoolOptionsModel := testService.NewGetLoadBalancerPoolOptions(loadBalancerID, id)
				getLoadBalancerPoolOptionsModel.SetLoadBalancerID("testString")
				getLoadBalancerPoolOptionsModel.SetID("testString")
				getLoadBalancerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerPoolOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerPoolOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerPoolOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerProfileOptions successfully`, func() {
				name := "testString"
				// Construct an instance of the GetLoadBalancerProfileOptions model
				getLoadBalancerProfileOptionsModel := testService.NewGetLoadBalancerProfileOptions(name)
				getLoadBalancerProfileOptionsModel.SetName("testString")
				getLoadBalancerProfileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerProfileOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerProfileOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerProfileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerStatisticsOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetLoadBalancerStatisticsOptions model
				getLoadBalancerStatisticsOptionsModel := testService.NewGetLoadBalancerStatisticsOptions(id)
				getLoadBalancerStatisticsOptionsModel.SetID("testString")
				getLoadBalancerStatisticsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerStatisticsOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerStatisticsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerStatisticsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetNetworkAclOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetNetworkAclOptions model
				getNetworkAclOptionsModel := testService.NewGetNetworkAclOptions(id)
				getNetworkAclOptionsModel.SetID("testString")
				getNetworkAclOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getNetworkAclOptionsModel).ToNot(BeNil())
				Expect(getNetworkAclOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getNetworkAclOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetNetworkAclRuleOptions successfully`, func() {
				networkAclID := "testString"
				id := "testString"
				// Construct an instance of the GetNetworkAclRuleOptions model
				getNetworkAclRuleOptionsModel := testService.NewGetNetworkAclRuleOptions(networkAclID, id)
				getNetworkAclRuleOptionsModel.SetNetworkAclID("testString")
				getNetworkAclRuleOptionsModel.SetID("testString")
				getNetworkAclRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getNetworkAclRuleOptionsModel).ToNot(BeNil())
				Expect(getNetworkAclRuleOptionsModel.NetworkAclID).To(Equal(core.StringPtr("testString")))
				Expect(getNetworkAclRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getNetworkAclRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetNetworkInterfaceFloatingIpOptions successfully`, func() {
				instanceID := "testString"
				networkInterfaceID := "testString"
				id := "testString"
				// Construct an instance of the GetNetworkInterfaceFloatingIpOptions model
				getNetworkInterfaceFloatingIpOptionsModel := testService.NewGetNetworkInterfaceFloatingIpOptions(instanceID, networkInterfaceID, id)
				getNetworkInterfaceFloatingIpOptionsModel.SetInstanceID("testString")
				getNetworkInterfaceFloatingIpOptionsModel.SetNetworkInterfaceID("testString")
				getNetworkInterfaceFloatingIpOptionsModel.SetID("testString")
				getNetworkInterfaceFloatingIpOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getNetworkInterfaceFloatingIpOptionsModel).ToNot(BeNil())
				Expect(getNetworkInterfaceFloatingIpOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(getNetworkInterfaceFloatingIpOptionsModel.NetworkInterfaceID).To(Equal(core.StringPtr("testString")))
				Expect(getNetworkInterfaceFloatingIpOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getNetworkInterfaceFloatingIpOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetNetworkInterfaceOptions successfully`, func() {
				instanceID := "testString"
				id := "testString"
				// Construct an instance of the GetNetworkInterfaceOptions model
				getNetworkInterfaceOptionsModel := testService.NewGetNetworkInterfaceOptions(instanceID, id)
				getNetworkInterfaceOptionsModel.SetInstanceID("testString")
				getNetworkInterfaceOptionsModel.SetID("testString")
				getNetworkInterfaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getNetworkInterfaceOptionsModel).ToNot(BeNil())
				Expect(getNetworkInterfaceOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(getNetworkInterfaceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getNetworkInterfaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetOperatingSystemOptions successfully`, func() {
				name := "testString"
				// Construct an instance of the GetOperatingSystemOptions model
				getOperatingSystemOptionsModel := testService.NewGetOperatingSystemOptions(name)
				getOperatingSystemOptionsModel.SetName("testString")
				getOperatingSystemOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getOperatingSystemOptionsModel).ToNot(BeNil())
				Expect(getOperatingSystemOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getOperatingSystemOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetPublicGatewayOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetPublicGatewayOptions model
				getPublicGatewayOptionsModel := testService.NewGetPublicGatewayOptions(id)
				getPublicGatewayOptionsModel.SetID("testString")
				getPublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getPublicGatewayOptionsModel).ToNot(BeNil())
				Expect(getPublicGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getPublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetRegionOptions successfully`, func() {
				name := "testString"
				// Construct an instance of the GetRegionOptions model
				getRegionOptionsModel := testService.NewGetRegionOptions(name)
				getRegionOptionsModel.SetName("testString")
				getRegionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getRegionOptionsModel).ToNot(BeNil())
				Expect(getRegionOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getRegionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSecurityGroupNetworkInterfaceOptions successfully`, func() {
				securityGroupID := "testString"
				id := "testString"
				// Construct an instance of the GetSecurityGroupNetworkInterfaceOptions model
				getSecurityGroupNetworkInterfaceOptionsModel := testService.NewGetSecurityGroupNetworkInterfaceOptions(securityGroupID, id)
				getSecurityGroupNetworkInterfaceOptionsModel.SetSecurityGroupID("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.SetID("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSecurityGroupNetworkInterfaceOptionsModel).ToNot(BeNil())
				Expect(getSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getSecurityGroupNetworkInterfaceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSecurityGroupNetworkInterfaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSecurityGroupOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetSecurityGroupOptions model
				getSecurityGroupOptionsModel := testService.NewGetSecurityGroupOptions(id)
				getSecurityGroupOptionsModel.SetID("testString")
				getSecurityGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSecurityGroupOptionsModel).ToNot(BeNil())
				Expect(getSecurityGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSecurityGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSecurityGroupRuleOptions successfully`, func() {
				securityGroupID := "testString"
				id := "testString"
				// Construct an instance of the GetSecurityGroupRuleOptions model
				getSecurityGroupRuleOptionsModel := testService.NewGetSecurityGroupRuleOptions(securityGroupID, id)
				getSecurityGroupRuleOptionsModel.SetSecurityGroupID("testString")
				getSecurityGroupRuleOptionsModel.SetID("testString")
				getSecurityGroupRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSecurityGroupRuleOptionsModel).ToNot(BeNil())
				Expect(getSecurityGroupRuleOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getSecurityGroupRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSecurityGroupRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSubnetNetworkAclOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetSubnetNetworkAclOptions model
				getSubnetNetworkAclOptionsModel := testService.NewGetSubnetNetworkAclOptions(id)
				getSubnetNetworkAclOptionsModel.SetID("testString")
				getSubnetNetworkAclOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSubnetNetworkAclOptionsModel).ToNot(BeNil())
				Expect(getSubnetNetworkAclOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSubnetNetworkAclOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSubnetOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetSubnetOptions model
				getSubnetOptionsModel := testService.NewGetSubnetOptions(id)
				getSubnetOptionsModel.SetID("testString")
				getSubnetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSubnetOptionsModel).ToNot(BeNil())
				Expect(getSubnetOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSubnetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSubnetPublicGatewayOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetSubnetPublicGatewayOptions model
				getSubnetPublicGatewayOptionsModel := testService.NewGetSubnetPublicGatewayOptions(id)
				getSubnetPublicGatewayOptionsModel.SetID("testString")
				getSubnetPublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSubnetPublicGatewayOptionsModel).ToNot(BeNil())
				Expect(getSubnetPublicGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSubnetPublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSubnetRoutingTableOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetSubnetRoutingTableOptions model
				getSubnetRoutingTableOptionsModel := testService.NewGetSubnetRoutingTableOptions(id)
				getSubnetRoutingTableOptionsModel.SetID("testString")
				getSubnetRoutingTableOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSubnetRoutingTableOptionsModel).ToNot(BeNil())
				Expect(getSubnetRoutingTableOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSubnetRoutingTableOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVolumeAttachmentOptions successfully`, func() {
				instanceID := "testString"
				id := "testString"
				// Construct an instance of the GetVolumeAttachmentOptions model
				getVolumeAttachmentOptionsModel := testService.NewGetVolumeAttachmentOptions(instanceID, id)
				getVolumeAttachmentOptionsModel.SetInstanceID("testString")
				getVolumeAttachmentOptionsModel.SetID("testString")
				getVolumeAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVolumeAttachmentOptionsModel).ToNot(BeNil())
				Expect(getVolumeAttachmentOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(getVolumeAttachmentOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVolumeAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVolumeOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetVolumeOptions model
				getVolumeOptionsModel := testService.NewGetVolumeOptions(id)
				getVolumeOptionsModel.SetID("testString")
				getVolumeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVolumeOptionsModel).ToNot(BeNil())
				Expect(getVolumeOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVolumeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVolumeProfileOptions successfully`, func() {
				name := "testString"
				// Construct an instance of the GetVolumeProfileOptions model
				getVolumeProfileOptionsModel := testService.NewGetVolumeProfileOptions(name)
				getVolumeProfileOptionsModel.SetName("testString")
				getVolumeProfileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVolumeProfileOptionsModel).ToNot(BeNil())
				Expect(getVolumeProfileOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getVolumeProfileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVpcAddressPrefixOptions successfully`, func() {
				vpcID := "testString"
				id := "testString"
				// Construct an instance of the GetVpcAddressPrefixOptions model
				getVpcAddressPrefixOptionsModel := testService.NewGetVpcAddressPrefixOptions(vpcID, id)
				getVpcAddressPrefixOptionsModel.SetVpcID("testString")
				getVpcAddressPrefixOptionsModel.SetID("testString")
				getVpcAddressPrefixOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVpcAddressPrefixOptionsModel).ToNot(BeNil())
				Expect(getVpcAddressPrefixOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(getVpcAddressPrefixOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVpcAddressPrefixOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVpcDefaultNetworkAclOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetVpcDefaultNetworkAclOptions model
				getVpcDefaultNetworkAclOptionsModel := testService.NewGetVpcDefaultNetworkAclOptions(id)
				getVpcDefaultNetworkAclOptionsModel.SetID("testString")
				getVpcDefaultNetworkAclOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVpcDefaultNetworkAclOptionsModel).ToNot(BeNil())
				Expect(getVpcDefaultNetworkAclOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVpcDefaultNetworkAclOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVpcDefaultRoutingTableOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetVpcDefaultRoutingTableOptions model
				getVpcDefaultRoutingTableOptionsModel := testService.NewGetVpcDefaultRoutingTableOptions(id)
				getVpcDefaultRoutingTableOptionsModel.SetID("testString")
				getVpcDefaultRoutingTableOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVpcDefaultRoutingTableOptionsModel).ToNot(BeNil())
				Expect(getVpcDefaultRoutingTableOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVpcDefaultRoutingTableOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVpcDefaultSecurityGroupOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetVpcDefaultSecurityGroupOptions model
				getVpcDefaultSecurityGroupOptionsModel := testService.NewGetVpcDefaultSecurityGroupOptions(id)
				getVpcDefaultSecurityGroupOptionsModel.SetID("testString")
				getVpcDefaultSecurityGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVpcDefaultSecurityGroupOptionsModel).ToNot(BeNil())
				Expect(getVpcDefaultSecurityGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVpcDefaultSecurityGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVpcOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetVpcOptions model
				getVpcOptionsModel := testService.NewGetVpcOptions(id)
				getVpcOptionsModel.SetID("testString")
				getVpcOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVpcOptionsModel).ToNot(BeNil())
				Expect(getVpcOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVpcOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVpcRouteOptions successfully`, func() {
				vpcID := "testString"
				id := "testString"
				// Construct an instance of the GetVpcRouteOptions model
				getVpcRouteOptionsModel := testService.NewGetVpcRouteOptions(vpcID, id)
				getVpcRouteOptionsModel.SetVpcID("testString")
				getVpcRouteOptionsModel.SetID("testString")
				getVpcRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVpcRouteOptionsModel).ToNot(BeNil())
				Expect(getVpcRouteOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(getVpcRouteOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVpcRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVpcRoutingTableOptions successfully`, func() {
				vpcID := "testString"
				id := "testString"
				// Construct an instance of the GetVpcRoutingTableOptions model
				getVpcRoutingTableOptionsModel := testService.NewGetVpcRoutingTableOptions(vpcID, id)
				getVpcRoutingTableOptionsModel.SetVpcID("testString")
				getVpcRoutingTableOptionsModel.SetID("testString")
				getVpcRoutingTableOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVpcRoutingTableOptionsModel).ToNot(BeNil())
				Expect(getVpcRoutingTableOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(getVpcRoutingTableOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVpcRoutingTableOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVpcRoutingTableRouteOptions successfully`, func() {
				vpcID := "testString"
				routingTableID := "testString"
				id := "testString"
				// Construct an instance of the GetVpcRoutingTableRouteOptions model
				getVpcRoutingTableRouteOptionsModel := testService.NewGetVpcRoutingTableRouteOptions(vpcID, routingTableID, id)
				getVpcRoutingTableRouteOptionsModel.SetVpcID("testString")
				getVpcRoutingTableRouteOptionsModel.SetRoutingTableID("testString")
				getVpcRoutingTableRouteOptionsModel.SetID("testString")
				getVpcRoutingTableRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVpcRoutingTableRouteOptionsModel).ToNot(BeNil())
				Expect(getVpcRoutingTableRouteOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(getVpcRoutingTableRouteOptionsModel.RoutingTableID).To(Equal(core.StringPtr("testString")))
				Expect(getVpcRoutingTableRouteOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVpcRoutingTableRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVpnGatewayConnectionLocalCidrOptions successfully`, func() {
				vpnGatewayID := "testString"
				id := "testString"
				prefixAddress := "testString"
				prefixLength := "testString"
				// Construct an instance of the GetVpnGatewayConnectionLocalCidrOptions model
				getVpnGatewayConnectionLocalCidrOptionsModel := testService.NewGetVpnGatewayConnectionLocalCidrOptions(vpnGatewayID, id, prefixAddress, prefixLength)
				getVpnGatewayConnectionLocalCidrOptionsModel.SetVpnGatewayID("testString")
				getVpnGatewayConnectionLocalCidrOptionsModel.SetID("testString")
				getVpnGatewayConnectionLocalCidrOptionsModel.SetPrefixAddress("testString")
				getVpnGatewayConnectionLocalCidrOptionsModel.SetPrefixLength("testString")
				getVpnGatewayConnectionLocalCidrOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVpnGatewayConnectionLocalCidrOptionsModel).ToNot(BeNil())
				Expect(getVpnGatewayConnectionLocalCidrOptionsModel.VpnGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(getVpnGatewayConnectionLocalCidrOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVpnGatewayConnectionLocalCidrOptionsModel.PrefixAddress).To(Equal(core.StringPtr("testString")))
				Expect(getVpnGatewayConnectionLocalCidrOptionsModel.PrefixLength).To(Equal(core.StringPtr("testString")))
				Expect(getVpnGatewayConnectionLocalCidrOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVpnGatewayConnectionOptions successfully`, func() {
				vpnGatewayID := "testString"
				id := "testString"
				// Construct an instance of the GetVpnGatewayConnectionOptions model
				getVpnGatewayConnectionOptionsModel := testService.NewGetVpnGatewayConnectionOptions(vpnGatewayID, id)
				getVpnGatewayConnectionOptionsModel.SetVpnGatewayID("testString")
				getVpnGatewayConnectionOptionsModel.SetID("testString")
				getVpnGatewayConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVpnGatewayConnectionOptionsModel).ToNot(BeNil())
				Expect(getVpnGatewayConnectionOptionsModel.VpnGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(getVpnGatewayConnectionOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVpnGatewayConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVpnGatewayConnectionPeerCidrOptions successfully`, func() {
				vpnGatewayID := "testString"
				id := "testString"
				prefixAddress := "testString"
				prefixLength := "testString"
				// Construct an instance of the GetVpnGatewayConnectionPeerCidrOptions model
				getVpnGatewayConnectionPeerCidrOptionsModel := testService.NewGetVpnGatewayConnectionPeerCidrOptions(vpnGatewayID, id, prefixAddress, prefixLength)
				getVpnGatewayConnectionPeerCidrOptionsModel.SetVpnGatewayID("testString")
				getVpnGatewayConnectionPeerCidrOptionsModel.SetID("testString")
				getVpnGatewayConnectionPeerCidrOptionsModel.SetPrefixAddress("testString")
				getVpnGatewayConnectionPeerCidrOptionsModel.SetPrefixLength("testString")
				getVpnGatewayConnectionPeerCidrOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVpnGatewayConnectionPeerCidrOptionsModel).ToNot(BeNil())
				Expect(getVpnGatewayConnectionPeerCidrOptionsModel.VpnGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(getVpnGatewayConnectionPeerCidrOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVpnGatewayConnectionPeerCidrOptionsModel.PrefixAddress).To(Equal(core.StringPtr("testString")))
				Expect(getVpnGatewayConnectionPeerCidrOptionsModel.PrefixLength).To(Equal(core.StringPtr("testString")))
				Expect(getVpnGatewayConnectionPeerCidrOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVpnGatewayOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the GetVpnGatewayOptions model
				getVpnGatewayOptionsModel := testService.NewGetVpnGatewayOptions(id)
				getVpnGatewayOptionsModel.SetID("testString")
				getVpnGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVpnGatewayOptionsModel).ToNot(BeNil())
				Expect(getVpnGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVpnGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetZoneOptions successfully`, func() {
				regionName := "testString"
				zoneName := "testString"
				// Construct an instance of the GetZoneOptions model
				getZoneOptionsModel := testService.NewGetZoneOptions(regionName, zoneName)
				getZoneOptionsModel.SetRegionName("testString")
				getZoneOptionsModel.SetZoneName("testString")
				getZoneOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getZoneOptionsModel).ToNot(BeNil())
				Expect(getZoneOptionsModel.RegionName).To(Equal(core.StringPtr("testString")))
				Expect(getZoneOptionsModel.ZoneName).To(Equal(core.StringPtr("testString")))
				Expect(getZoneOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewImageFilePrototype successfully`, func() {
				href := "cos://us-south/custom-image-vpc-bucket/customImage-0.vhd"
				model, err := testService.NewImageFilePrototype(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewListDedicatedHostGroupsOptions successfully`, func() {
				// Construct an instance of the ListDedicatedHostGroupsOptions model
				listDedicatedHostGroupsOptionsModel := testService.NewListDedicatedHostGroupsOptions()
				listDedicatedHostGroupsOptionsModel.SetStart("testString")
				listDedicatedHostGroupsOptionsModel.SetLimit(int64(38))
				listDedicatedHostGroupsOptionsModel.SetResourceGroupID("testString")
				listDedicatedHostGroupsOptionsModel.SetZoneName("testString")
				listDedicatedHostGroupsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listDedicatedHostGroupsOptionsModel).ToNot(BeNil())
				Expect(listDedicatedHostGroupsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listDedicatedHostGroupsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listDedicatedHostGroupsOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listDedicatedHostGroupsOptionsModel.ZoneName).To(Equal(core.StringPtr("testString")))
				Expect(listDedicatedHostGroupsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListDedicatedHostProfilesOptions successfully`, func() {
				// Construct an instance of the ListDedicatedHostProfilesOptions model
				listDedicatedHostProfilesOptionsModel := testService.NewListDedicatedHostProfilesOptions()
				listDedicatedHostProfilesOptionsModel.SetStart("testString")
				listDedicatedHostProfilesOptionsModel.SetLimit(int64(38))
				listDedicatedHostProfilesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listDedicatedHostProfilesOptionsModel).ToNot(BeNil())
				Expect(listDedicatedHostProfilesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listDedicatedHostProfilesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listDedicatedHostProfilesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListDedicatedHostsOptions successfully`, func() {
				// Construct an instance of the ListDedicatedHostsOptions model
				listDedicatedHostsOptionsModel := testService.NewListDedicatedHostsOptions()
				listDedicatedHostsOptionsModel.SetDedicatedHostGroupID("testString")
				listDedicatedHostsOptionsModel.SetStart("testString")
				listDedicatedHostsOptionsModel.SetLimit(int64(38))
				listDedicatedHostsOptionsModel.SetResourceGroupID("testString")
				listDedicatedHostsOptionsModel.SetZoneName("testString")
				listDedicatedHostsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listDedicatedHostsOptionsModel).ToNot(BeNil())
				Expect(listDedicatedHostsOptionsModel.DedicatedHostGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listDedicatedHostsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listDedicatedHostsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listDedicatedHostsOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listDedicatedHostsOptionsModel.ZoneName).To(Equal(core.StringPtr("testString")))
				Expect(listDedicatedHostsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListFloatingIpsOptions successfully`, func() {
				// Construct an instance of the ListFloatingIpsOptions model
				listFloatingIpsOptionsModel := testService.NewListFloatingIpsOptions()
				listFloatingIpsOptionsModel.SetStart("testString")
				listFloatingIpsOptionsModel.SetLimit(int64(38))
				listFloatingIpsOptionsModel.SetResourceGroupID("testString")
				listFloatingIpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listFloatingIpsOptionsModel).ToNot(BeNil())
				Expect(listFloatingIpsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listFloatingIpsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listFloatingIpsOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listFloatingIpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListFlowLogCollectorsOptions successfully`, func() {
				// Construct an instance of the ListFlowLogCollectorsOptions model
				listFlowLogCollectorsOptionsModel := testService.NewListFlowLogCollectorsOptions()
				listFlowLogCollectorsOptionsModel.SetStart("testString")
				listFlowLogCollectorsOptionsModel.SetLimit(int64(38))
				listFlowLogCollectorsOptionsModel.SetResourceGroupID("testString")
				listFlowLogCollectorsOptionsModel.SetName("testString")
				listFlowLogCollectorsOptionsModel.SetVpcID("testString")
				listFlowLogCollectorsOptionsModel.SetVpcCrn("testString")
				listFlowLogCollectorsOptionsModel.SetVpcName("testString")
				listFlowLogCollectorsOptionsModel.SetTargetID("testString")
				listFlowLogCollectorsOptionsModel.SetTargetResourceType("vpc")
				listFlowLogCollectorsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listFlowLogCollectorsOptionsModel).ToNot(BeNil())
				Expect(listFlowLogCollectorsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listFlowLogCollectorsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listFlowLogCollectorsOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listFlowLogCollectorsOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(listFlowLogCollectorsOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(listFlowLogCollectorsOptionsModel.VpcCrn).To(Equal(core.StringPtr("testString")))
				Expect(listFlowLogCollectorsOptionsModel.VpcName).To(Equal(core.StringPtr("testString")))
				Expect(listFlowLogCollectorsOptionsModel.TargetID).To(Equal(core.StringPtr("testString")))
				Expect(listFlowLogCollectorsOptionsModel.TargetResourceType).To(Equal(core.StringPtr("vpc")))
				Expect(listFlowLogCollectorsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListIkePoliciesOptions successfully`, func() {
				// Construct an instance of the ListIkePoliciesOptions model
				listIkePoliciesOptionsModel := testService.NewListIkePoliciesOptions()
				listIkePoliciesOptionsModel.SetStart("testString")
				listIkePoliciesOptionsModel.SetLimit(int64(38))
				listIkePoliciesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listIkePoliciesOptionsModel).ToNot(BeNil())
				Expect(listIkePoliciesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listIkePoliciesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listIkePoliciesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListImagesOptions successfully`, func() {
				// Construct an instance of the ListImagesOptions model
				listImagesOptionsModel := testService.NewListImagesOptions()
				listImagesOptionsModel.SetStart("testString")
				listImagesOptionsModel.SetLimit(int64(38))
				listImagesOptionsModel.SetResourceGroupID("testString")
				listImagesOptionsModel.SetName("testString")
				listImagesOptionsModel.SetVisibility("private")
				listImagesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listImagesOptionsModel).ToNot(BeNil())
				Expect(listImagesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listImagesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listImagesOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listImagesOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(listImagesOptionsModel.Visibility).To(Equal(core.StringPtr("private")))
				Expect(listImagesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceGroupManagerPoliciesOptions successfully`, func() {
				instanceGroupID := "testString"
				instanceGroupManagerID := "testString"
				// Construct an instance of the ListInstanceGroupManagerPoliciesOptions model
				listInstanceGroupManagerPoliciesOptionsModel := testService.NewListInstanceGroupManagerPoliciesOptions(instanceGroupID, instanceGroupManagerID)
				listInstanceGroupManagerPoliciesOptionsModel.SetInstanceGroupID("testString")
				listInstanceGroupManagerPoliciesOptionsModel.SetInstanceGroupManagerID("testString")
				listInstanceGroupManagerPoliciesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceGroupManagerPoliciesOptionsModel).ToNot(BeNil())
				Expect(listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupManagerID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceGroupManagerPoliciesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceGroupManagersOptions successfully`, func() {
				instanceGroupID := "testString"
				// Construct an instance of the ListInstanceGroupManagersOptions model
				listInstanceGroupManagersOptionsModel := testService.NewListInstanceGroupManagersOptions(instanceGroupID)
				listInstanceGroupManagersOptionsModel.SetInstanceGroupID("testString")
				listInstanceGroupManagersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceGroupManagersOptionsModel).ToNot(BeNil())
				Expect(listInstanceGroupManagersOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceGroupManagersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceGroupMembershipsOptions successfully`, func() {
				instanceGroupID := "testString"
				// Construct an instance of the ListInstanceGroupMembershipsOptions model
				listInstanceGroupMembershipsOptionsModel := testService.NewListInstanceGroupMembershipsOptions(instanceGroupID)
				listInstanceGroupMembershipsOptionsModel.SetInstanceGroupID("testString")
				listInstanceGroupMembershipsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceGroupMembershipsOptionsModel).ToNot(BeNil())
				Expect(listInstanceGroupMembershipsOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceGroupMembershipsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceGroupsOptions successfully`, func() {
				// Construct an instance of the ListInstanceGroupsOptions model
				listInstanceGroupsOptionsModel := testService.NewListInstanceGroupsOptions()
				listInstanceGroupsOptionsModel.SetStart("testString")
				listInstanceGroupsOptionsModel.SetLimit(int64(38))
				listInstanceGroupsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceGroupsOptionsModel).ToNot(BeNil())
				Expect(listInstanceGroupsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceGroupsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listInstanceGroupsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceProfilesOptions successfully`, func() {
				// Construct an instance of the ListInstanceProfilesOptions model
				listInstanceProfilesOptionsModel := testService.NewListInstanceProfilesOptions()
				listInstanceProfilesOptionsModel.SetStart("testString")
				listInstanceProfilesOptionsModel.SetLimit(int64(38))
				listInstanceProfilesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceProfilesOptionsModel).ToNot(BeNil())
				Expect(listInstanceProfilesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceProfilesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listInstanceProfilesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceTemplatesOptions successfully`, func() {
				// Construct an instance of the ListInstanceTemplatesOptions model
				listInstanceTemplatesOptionsModel := testService.NewListInstanceTemplatesOptions()
				listInstanceTemplatesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceTemplatesOptionsModel).ToNot(BeNil())
				Expect(listInstanceTemplatesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstancesOptions successfully`, func() {
				// Construct an instance of the ListInstancesOptions model
				listInstancesOptionsModel := testService.NewListInstancesOptions()
				listInstancesOptionsModel.SetStart("testString")
				listInstancesOptionsModel.SetLimit(int64(38))
				listInstancesOptionsModel.SetResourceGroupID("testString")
				listInstancesOptionsModel.SetName("testString")
				listInstancesOptionsModel.SetVpcID("testString")
				listInstancesOptionsModel.SetVpcCrn("testString")
				listInstancesOptionsModel.SetVpcName("testString")
				listInstancesOptionsModel.SetNetworkInterfacesSubnetID("testString")
				listInstancesOptionsModel.SetNetworkInterfacesSubnetCrn("testString")
				listInstancesOptionsModel.SetNetworkInterfacesSubnetName("testString")
				listInstancesOptionsModel.SetDedicatedHostID("testString")
				listInstancesOptionsModel.SetDedicatedHostCrn("testString")
				listInstancesOptionsModel.SetDedicatedHostName("testString")
				listInstancesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstancesOptionsModel).ToNot(BeNil())
				Expect(listInstancesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listInstancesOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.VpcCrn).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.VpcName).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.NetworkInterfacesSubnetID).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.NetworkInterfacesSubnetCrn).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.NetworkInterfacesSubnetName).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.DedicatedHostID).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.DedicatedHostCrn).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.DedicatedHostName).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListIpsecPoliciesOptions successfully`, func() {
				// Construct an instance of the ListIpsecPoliciesOptions model
				listIpsecPoliciesOptionsModel := testService.NewListIpsecPoliciesOptions()
				listIpsecPoliciesOptionsModel.SetStart("testString")
				listIpsecPoliciesOptionsModel.SetLimit(int64(38))
				listIpsecPoliciesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listIpsecPoliciesOptionsModel).ToNot(BeNil())
				Expect(listIpsecPoliciesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listIpsecPoliciesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listIpsecPoliciesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListKeysOptions successfully`, func() {
				// Construct an instance of the ListKeysOptions model
				listKeysOptionsModel := testService.NewListKeysOptions()
				listKeysOptionsModel.SetStart("testString")
				listKeysOptionsModel.SetLimit(int64(38))
				listKeysOptionsModel.SetResourceGroupID("testString")
				listKeysOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listKeysOptionsModel).ToNot(BeNil())
				Expect(listKeysOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listKeysOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listKeysOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listKeysOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancerListenerPoliciesOptions successfully`, func() {
				loadBalancerID := "testString"
				listenerID := "testString"
				// Construct an instance of the ListLoadBalancerListenerPoliciesOptions model
				listLoadBalancerListenerPoliciesOptionsModel := testService.NewListLoadBalancerListenerPoliciesOptions(loadBalancerID, listenerID)
				listLoadBalancerListenerPoliciesOptionsModel.SetLoadBalancerID("testString")
				listLoadBalancerListenerPoliciesOptionsModel.SetListenerID("testString")
				listLoadBalancerListenerPoliciesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancerListenerPoliciesOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancerListenerPoliciesOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerListenerPoliciesOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerListenerPoliciesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancerListenerPolicyRulesOptions successfully`, func() {
				loadBalancerID := "testString"
				listenerID := "testString"
				policyID := "testString"
				// Construct an instance of the ListLoadBalancerListenerPolicyRulesOptions model
				listLoadBalancerListenerPolicyRulesOptionsModel := testService.NewListLoadBalancerListenerPolicyRulesOptions(loadBalancerID, listenerID, policyID)
				listLoadBalancerListenerPolicyRulesOptionsModel.SetLoadBalancerID("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.SetListenerID("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.SetPolicyID("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancerListenerPolicyRulesOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancerListenerPolicyRulesOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerListenerPolicyRulesOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerListenerPolicyRulesOptionsModel.PolicyID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerListenerPolicyRulesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancerListenersOptions successfully`, func() {
				loadBalancerID := "testString"
				// Construct an instance of the ListLoadBalancerListenersOptions model
				listLoadBalancerListenersOptionsModel := testService.NewListLoadBalancerListenersOptions(loadBalancerID)
				listLoadBalancerListenersOptionsModel.SetLoadBalancerID("testString")
				listLoadBalancerListenersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancerListenersOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancerListenersOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerListenersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancerPoolMembersOptions successfully`, func() {
				loadBalancerID := "testString"
				poolID := "testString"
				// Construct an instance of the ListLoadBalancerPoolMembersOptions model
				listLoadBalancerPoolMembersOptionsModel := testService.NewListLoadBalancerPoolMembersOptions(loadBalancerID, poolID)
				listLoadBalancerPoolMembersOptionsModel.SetLoadBalancerID("testString")
				listLoadBalancerPoolMembersOptionsModel.SetPoolID("testString")
				listLoadBalancerPoolMembersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancerPoolMembersOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancerPoolMembersOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerPoolMembersOptionsModel.PoolID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerPoolMembersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancerPoolsOptions successfully`, func() {
				loadBalancerID := "testString"
				// Construct an instance of the ListLoadBalancerPoolsOptions model
				listLoadBalancerPoolsOptionsModel := testService.NewListLoadBalancerPoolsOptions(loadBalancerID)
				listLoadBalancerPoolsOptionsModel.SetLoadBalancerID("testString")
				listLoadBalancerPoolsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancerPoolsOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancerPoolsOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerPoolsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancerProfilesOptions successfully`, func() {
				// Construct an instance of the ListLoadBalancerProfilesOptions model
				listLoadBalancerProfilesOptionsModel := testService.NewListLoadBalancerProfilesOptions()
				listLoadBalancerProfilesOptionsModel.SetStart("testString")
				listLoadBalancerProfilesOptionsModel.SetLimit(int64(38))
				listLoadBalancerProfilesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancerProfilesOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancerProfilesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerProfilesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listLoadBalancerProfilesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancersOptions successfully`, func() {
				// Construct an instance of the ListLoadBalancersOptions model
				listLoadBalancersOptionsModel := testService.NewListLoadBalancersOptions()
				listLoadBalancersOptionsModel.SetResourceGroupID("testString")
				listLoadBalancersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancersOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancersOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListNetworkAclRulesOptions successfully`, func() {
				networkAclID := "testString"
				// Construct an instance of the ListNetworkAclRulesOptions model
				listNetworkAclRulesOptionsModel := testService.NewListNetworkAclRulesOptions(networkAclID)
				listNetworkAclRulesOptionsModel.SetNetworkAclID("testString")
				listNetworkAclRulesOptionsModel.SetStart("testString")
				listNetworkAclRulesOptionsModel.SetLimit(int64(38))
				listNetworkAclRulesOptionsModel.SetDirection("inbound")
				listNetworkAclRulesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listNetworkAclRulesOptionsModel).ToNot(BeNil())
				Expect(listNetworkAclRulesOptionsModel.NetworkAclID).To(Equal(core.StringPtr("testString")))
				Expect(listNetworkAclRulesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listNetworkAclRulesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listNetworkAclRulesOptionsModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(listNetworkAclRulesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListNetworkAclsOptions successfully`, func() {
				// Construct an instance of the ListNetworkAclsOptions model
				listNetworkAclsOptionsModel := testService.NewListNetworkAclsOptions()
				listNetworkAclsOptionsModel.SetStart("testString")
				listNetworkAclsOptionsModel.SetLimit(int64(38))
				listNetworkAclsOptionsModel.SetResourceGroupID("testString")
				listNetworkAclsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listNetworkAclsOptionsModel).ToNot(BeNil())
				Expect(listNetworkAclsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listNetworkAclsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listNetworkAclsOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listNetworkAclsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListNetworkInterfaceFloatingIpsOptions successfully`, func() {
				instanceID := "testString"
				networkInterfaceID := "testString"
				// Construct an instance of the ListNetworkInterfaceFloatingIpsOptions model
				listNetworkInterfaceFloatingIpsOptionsModel := testService.NewListNetworkInterfaceFloatingIpsOptions(instanceID, networkInterfaceID)
				listNetworkInterfaceFloatingIpsOptionsModel.SetInstanceID("testString")
				listNetworkInterfaceFloatingIpsOptionsModel.SetNetworkInterfaceID("testString")
				listNetworkInterfaceFloatingIpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listNetworkInterfaceFloatingIpsOptionsModel).ToNot(BeNil())
				Expect(listNetworkInterfaceFloatingIpsOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(listNetworkInterfaceFloatingIpsOptionsModel.NetworkInterfaceID).To(Equal(core.StringPtr("testString")))
				Expect(listNetworkInterfaceFloatingIpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListNetworkInterfacesOptions successfully`, func() {
				instanceID := "testString"
				// Construct an instance of the ListNetworkInterfacesOptions model
				listNetworkInterfacesOptionsModel := testService.NewListNetworkInterfacesOptions(instanceID)
				listNetworkInterfacesOptionsModel.SetInstanceID("testString")
				listNetworkInterfacesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listNetworkInterfacesOptionsModel).ToNot(BeNil())
				Expect(listNetworkInterfacesOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(listNetworkInterfacesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListOperatingSystemsOptions successfully`, func() {
				// Construct an instance of the ListOperatingSystemsOptions model
				listOperatingSystemsOptionsModel := testService.NewListOperatingSystemsOptions()
				listOperatingSystemsOptionsModel.SetStart("testString")
				listOperatingSystemsOptionsModel.SetLimit(int64(38))
				listOperatingSystemsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listOperatingSystemsOptionsModel).ToNot(BeNil())
				Expect(listOperatingSystemsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listOperatingSystemsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listOperatingSystemsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListPublicGatewaysOptions successfully`, func() {
				// Construct an instance of the ListPublicGatewaysOptions model
				listPublicGatewaysOptionsModel := testService.NewListPublicGatewaysOptions()
				listPublicGatewaysOptionsModel.SetStart("testString")
				listPublicGatewaysOptionsModel.SetLimit(int64(38))
				listPublicGatewaysOptionsModel.SetResourceGroupID("testString")
				listPublicGatewaysOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listPublicGatewaysOptionsModel).ToNot(BeNil())
				Expect(listPublicGatewaysOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listPublicGatewaysOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listPublicGatewaysOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listPublicGatewaysOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListRegionsOptions successfully`, func() {
				// Construct an instance of the ListRegionsOptions model
				listRegionsOptionsModel := testService.NewListRegionsOptions()
				listRegionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listRegionsOptionsModel).ToNot(BeNil())
				Expect(listRegionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSecurityGroupNetworkInterfacesOptions successfully`, func() {
				securityGroupID := "testString"
				// Construct an instance of the ListSecurityGroupNetworkInterfacesOptions model
				listSecurityGroupNetworkInterfacesOptionsModel := testService.NewListSecurityGroupNetworkInterfacesOptions(securityGroupID)
				listSecurityGroupNetworkInterfacesOptionsModel.SetSecurityGroupID("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSecurityGroupNetworkInterfacesOptionsModel).ToNot(BeNil())
				Expect(listSecurityGroupNetworkInterfacesOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupNetworkInterfacesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSecurityGroupRulesOptions successfully`, func() {
				securityGroupID := "testString"
				// Construct an instance of the ListSecurityGroupRulesOptions model
				listSecurityGroupRulesOptionsModel := testService.NewListSecurityGroupRulesOptions(securityGroupID)
				listSecurityGroupRulesOptionsModel.SetSecurityGroupID("testString")
				listSecurityGroupRulesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSecurityGroupRulesOptionsModel).ToNot(BeNil())
				Expect(listSecurityGroupRulesOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupRulesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSecurityGroupsOptions successfully`, func() {
				// Construct an instance of the ListSecurityGroupsOptions model
				listSecurityGroupsOptionsModel := testService.NewListSecurityGroupsOptions()
				listSecurityGroupsOptionsModel.SetStart("testString")
				listSecurityGroupsOptionsModel.SetLimit(int64(38))
				listSecurityGroupsOptionsModel.SetResourceGroupID("testString")
				listSecurityGroupsOptionsModel.SetVpcID("testString")
				listSecurityGroupsOptionsModel.SetVpcCrn("testString")
				listSecurityGroupsOptionsModel.SetVpcName("testString")
				listSecurityGroupsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSecurityGroupsOptionsModel).ToNot(BeNil())
				Expect(listSecurityGroupsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listSecurityGroupsOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupsOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupsOptionsModel.VpcCrn).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupsOptionsModel.VpcName).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSubnetsOptions successfully`, func() {
				// Construct an instance of the ListSubnetsOptions model
				listSubnetsOptionsModel := testService.NewListSubnetsOptions()
				listSubnetsOptionsModel.SetStart("testString")
				listSubnetsOptionsModel.SetLimit(int64(38))
				listSubnetsOptionsModel.SetResourceGroupID("testString")
				listSubnetsOptionsModel.SetRoutingTableID("testString")
				listSubnetsOptionsModel.SetRoutingTableName("testString")
				listSubnetsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSubnetsOptionsModel).ToNot(BeNil())
				Expect(listSubnetsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listSubnetsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listSubnetsOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listSubnetsOptionsModel.RoutingTableID).To(Equal(core.StringPtr("testString")))
				Expect(listSubnetsOptionsModel.RoutingTableName).To(Equal(core.StringPtr("testString")))
				Expect(listSubnetsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVolumeAttachmentsOptions successfully`, func() {
				instanceID := "testString"
				// Construct an instance of the ListVolumeAttachmentsOptions model
				listVolumeAttachmentsOptionsModel := testService.NewListVolumeAttachmentsOptions(instanceID)
				listVolumeAttachmentsOptionsModel.SetInstanceID("testString")
				listVolumeAttachmentsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVolumeAttachmentsOptionsModel).ToNot(BeNil())
				Expect(listVolumeAttachmentsOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(listVolumeAttachmentsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVolumeProfilesOptions successfully`, func() {
				// Construct an instance of the ListVolumeProfilesOptions model
				listVolumeProfilesOptionsModel := testService.NewListVolumeProfilesOptions()
				listVolumeProfilesOptionsModel.SetStart("testString")
				listVolumeProfilesOptionsModel.SetLimit(int64(38))
				listVolumeProfilesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVolumeProfilesOptionsModel).ToNot(BeNil())
				Expect(listVolumeProfilesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVolumeProfilesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listVolumeProfilesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVolumesOptions successfully`, func() {
				// Construct an instance of the ListVolumesOptions model
				listVolumesOptionsModel := testService.NewListVolumesOptions()
				listVolumesOptionsModel.SetStart("testString")
				listVolumesOptionsModel.SetLimit(int64(38))
				listVolumesOptionsModel.SetName("testString")
				listVolumesOptionsModel.SetZoneName("testString")
				listVolumesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVolumesOptionsModel).ToNot(BeNil())
				Expect(listVolumesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVolumesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listVolumesOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(listVolumesOptionsModel.ZoneName).To(Equal(core.StringPtr("testString")))
				Expect(listVolumesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVpcAddressPrefixesOptions successfully`, func() {
				vpcID := "testString"
				// Construct an instance of the ListVpcAddressPrefixesOptions model
				listVpcAddressPrefixesOptionsModel := testService.NewListVpcAddressPrefixesOptions(vpcID)
				listVpcAddressPrefixesOptionsModel.SetVpcID("testString")
				listVpcAddressPrefixesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVpcAddressPrefixesOptionsModel).ToNot(BeNil())
				Expect(listVpcAddressPrefixesOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(listVpcAddressPrefixesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVpcRoutesOptions successfully`, func() {
				vpcID := "testString"
				// Construct an instance of the ListVpcRoutesOptions model
				listVpcRoutesOptionsModel := testService.NewListVpcRoutesOptions(vpcID)
				listVpcRoutesOptionsModel.SetVpcID("testString")
				listVpcRoutesOptionsModel.SetZoneName("testString")
				listVpcRoutesOptionsModel.SetStart("testString")
				listVpcRoutesOptionsModel.SetLimit(int64(38))
				listVpcRoutesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVpcRoutesOptionsModel).ToNot(BeNil())
				Expect(listVpcRoutesOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(listVpcRoutesOptionsModel.ZoneName).To(Equal(core.StringPtr("testString")))
				Expect(listVpcRoutesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVpcRoutesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listVpcRoutesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVpcRoutingTableRoutesOptions successfully`, func() {
				vpcID := "testString"
				routingTableID := "testString"
				// Construct an instance of the ListVpcRoutingTableRoutesOptions model
				listVpcRoutingTableRoutesOptionsModel := testService.NewListVpcRoutingTableRoutesOptions(vpcID, routingTableID)
				listVpcRoutingTableRoutesOptionsModel.SetVpcID("testString")
				listVpcRoutingTableRoutesOptionsModel.SetRoutingTableID("testString")
				listVpcRoutingTableRoutesOptionsModel.SetStart("testString")
				listVpcRoutingTableRoutesOptionsModel.SetLimit(int64(38))
				listVpcRoutingTableRoutesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVpcRoutingTableRoutesOptionsModel).ToNot(BeNil())
				Expect(listVpcRoutingTableRoutesOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(listVpcRoutingTableRoutesOptionsModel.RoutingTableID).To(Equal(core.StringPtr("testString")))
				Expect(listVpcRoutingTableRoutesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVpcRoutingTableRoutesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listVpcRoutingTableRoutesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVpcRoutingTablesOptions successfully`, func() {
				vpcID := "testString"
				// Construct an instance of the ListVpcRoutingTablesOptions model
				listVpcRoutingTablesOptionsModel := testService.NewListVpcRoutingTablesOptions(vpcID)
				listVpcRoutingTablesOptionsModel.SetVpcID("testString")
				listVpcRoutingTablesOptionsModel.SetStart("testString")
				listVpcRoutingTablesOptionsModel.SetLimit(int64(38))
				listVpcRoutingTablesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVpcRoutingTablesOptionsModel).ToNot(BeNil())
				Expect(listVpcRoutingTablesOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(listVpcRoutingTablesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVpcRoutingTablesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listVpcRoutingTablesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVpcsOptions successfully`, func() {
				// Construct an instance of the ListVpcsOptions model
				listVpcsOptionsModel := testService.NewListVpcsOptions()
				listVpcsOptionsModel.SetStart("testString")
				listVpcsOptionsModel.SetLimit(int64(38))
				listVpcsOptionsModel.SetResourceGroupID("testString")
				listVpcsOptionsModel.SetClassicAccess(true)
				listVpcsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVpcsOptionsModel).ToNot(BeNil())
				Expect(listVpcsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVpcsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listVpcsOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listVpcsOptionsModel.ClassicAccess).To(Equal(core.BoolPtr(true)))
				Expect(listVpcsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVpnGatewayConnectionLocalCidrsOptions successfully`, func() {
				vpnGatewayID := "testString"
				id := "testString"
				// Construct an instance of the ListVpnGatewayConnectionLocalCidrsOptions model
				listVpnGatewayConnectionLocalCidrsOptionsModel := testService.NewListVpnGatewayConnectionLocalCidrsOptions(vpnGatewayID, id)
				listVpnGatewayConnectionLocalCidrsOptionsModel.SetVpnGatewayID("testString")
				listVpnGatewayConnectionLocalCidrsOptionsModel.SetID("testString")
				listVpnGatewayConnectionLocalCidrsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVpnGatewayConnectionLocalCidrsOptionsModel).ToNot(BeNil())
				Expect(listVpnGatewayConnectionLocalCidrsOptionsModel.VpnGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listVpnGatewayConnectionLocalCidrsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listVpnGatewayConnectionLocalCidrsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVpnGatewayConnectionPeerCidrsOptions successfully`, func() {
				vpnGatewayID := "testString"
				id := "testString"
				// Construct an instance of the ListVpnGatewayConnectionPeerCidrsOptions model
				listVpnGatewayConnectionPeerCidrsOptionsModel := testService.NewListVpnGatewayConnectionPeerCidrsOptions(vpnGatewayID, id)
				listVpnGatewayConnectionPeerCidrsOptionsModel.SetVpnGatewayID("testString")
				listVpnGatewayConnectionPeerCidrsOptionsModel.SetID("testString")
				listVpnGatewayConnectionPeerCidrsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVpnGatewayConnectionPeerCidrsOptionsModel).ToNot(BeNil())
				Expect(listVpnGatewayConnectionPeerCidrsOptionsModel.VpnGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listVpnGatewayConnectionPeerCidrsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listVpnGatewayConnectionPeerCidrsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVpnGatewayConnectionsOptions successfully`, func() {
				vpnGatewayID := "testString"
				// Construct an instance of the ListVpnGatewayConnectionsOptions model
				listVpnGatewayConnectionsOptionsModel := testService.NewListVpnGatewayConnectionsOptions(vpnGatewayID)
				listVpnGatewayConnectionsOptionsModel.SetVpnGatewayID("testString")
				listVpnGatewayConnectionsOptionsModel.SetStatus("testString")
				listVpnGatewayConnectionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVpnGatewayConnectionsOptionsModel).ToNot(BeNil())
				Expect(listVpnGatewayConnectionsOptionsModel.VpnGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listVpnGatewayConnectionsOptionsModel.Status).To(Equal(core.StringPtr("testString")))
				Expect(listVpnGatewayConnectionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVpnGatewayIkePolicyConnectionsOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the ListVpnGatewayIkePolicyConnectionsOptions model
				listVpnGatewayIkePolicyConnectionsOptionsModel := testService.NewListVpnGatewayIkePolicyConnectionsOptions(id)
				listVpnGatewayIkePolicyConnectionsOptionsModel.SetID("testString")
				listVpnGatewayIkePolicyConnectionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVpnGatewayIkePolicyConnectionsOptionsModel).ToNot(BeNil())
				Expect(listVpnGatewayIkePolicyConnectionsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listVpnGatewayIkePolicyConnectionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVpnGatewayIpsecPolicyConnectionsOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the ListVpnGatewayIpsecPolicyConnectionsOptions model
				listVpnGatewayIpsecPolicyConnectionsOptionsModel := testService.NewListVpnGatewayIpsecPolicyConnectionsOptions(id)
				listVpnGatewayIpsecPolicyConnectionsOptionsModel.SetID("testString")
				listVpnGatewayIpsecPolicyConnectionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVpnGatewayIpsecPolicyConnectionsOptionsModel).ToNot(BeNil())
				Expect(listVpnGatewayIpsecPolicyConnectionsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listVpnGatewayIpsecPolicyConnectionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVpnGatewaysOptions successfully`, func() {
				// Construct an instance of the ListVpnGatewaysOptions model
				listVpnGatewaysOptionsModel := testService.NewListVpnGatewaysOptions()
				listVpnGatewaysOptionsModel.SetStart("testString")
				listVpnGatewaysOptionsModel.SetLimit(int64(38))
				listVpnGatewaysOptionsModel.SetResourceGroupID("testString")
				listVpnGatewaysOptionsModel.SetSort("name")
				listVpnGatewaysOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVpnGatewaysOptionsModel).ToNot(BeNil())
				Expect(listVpnGatewaysOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVpnGatewaysOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listVpnGatewaysOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listVpnGatewaysOptionsModel.Sort).To(Equal(core.StringPtr("name")))
				Expect(listVpnGatewaysOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListZonesOptions successfully`, func() {
				regionName := "testString"
				// Construct an instance of the ListZonesOptions model
				listZonesOptionsModel := testService.NewListZonesOptions(regionName)
				listZonesOptionsModel.SetRegionName("testString")
				listZonesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listZonesOptionsModel).ToNot(BeNil())
				Expect(listZonesOptionsModel.RegionName).To(Equal(core.StringPtr("testString")))
				Expect(listZonesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewLoadBalancerListenerPolicyPrototype successfully`, func() {
				priority := int64(5)
				action := "forward"
				model, err := testService.NewLoadBalancerListenerPolicyPrototype(priority, action)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPolicyRulePrototype successfully`, func() {
				condition := "contains"
				typeVar := "header"
				value := "testString"
				model, err := testService.NewLoadBalancerListenerPolicyRulePrototype(condition, typeVar, value)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPrototypeLoadBalancerContext successfully`, func() {
				port := int64(443)
				protocol := "http"
				model, err := testService.NewLoadBalancerListenerPrototypeLoadBalancerContext(port, protocol)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolHealthMonitorPatch successfully`, func() {
				delay := int64(5)
				maxRetries := int64(2)
				timeout := int64(2)
				typeVar := "https"
				model, err := testService.NewLoadBalancerPoolHealthMonitorPatch(delay, maxRetries, timeout, typeVar)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolHealthMonitorPrototype successfully`, func() {
				delay := int64(5)
				maxRetries := int64(2)
				timeout := int64(2)
				typeVar := "https"
				model, err := testService.NewLoadBalancerPoolHealthMonitorPrototype(delay, maxRetries, timeout, typeVar)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolIdentityByName successfully`, func() {
				name := "my-load-balancer-pool"
				model, err := testService.NewLoadBalancerPoolIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolMemberPrototype successfully`, func() {
				port := int64(80)
				var target vpcv1.LoadBalancerPoolMemberTargetPrototypeIntf = nil
				_, err := testService.NewLoadBalancerPoolMemberPrototype(port, target)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolPrototype successfully`, func() {
				algorithm := "least_connections"
				protocol := "https"
				var healthMonitor *vpcv1.LoadBalancerPoolHealthMonitorPrototype = nil
				_, err := testService.NewLoadBalancerPoolPrototype(algorithm, protocol, healthMonitor)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolSessionPersistencePatch successfully`, func() {
				typeVar := "source_ip"
				model, err := testService.NewLoadBalancerPoolSessionPersistencePatch(typeVar)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolSessionPersistencePrototype successfully`, func() {
				typeVar := "source_ip"
				model, err := testService.NewLoadBalancerPoolSessionPersistencePrototype(typeVar)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRuleReference successfully`, func() {
				id := "8daca77a-4980-4d33-8f3e-7038797be8f9"
				href := "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9"
				name := "my-rule-1"
				model, err := testService.NewNetworkACLRuleReference(id, href, name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkInterfacePrototype successfully`, func() {
				var subnet vpcv1.SubnetIdentityIntf = nil
				_, err := testService.NewNetworkInterfacePrototype(subnet)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewReleaseFloatingIpOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the ReleaseFloatingIpOptions model
				releaseFloatingIpOptionsModel := testService.NewReleaseFloatingIpOptions(id)
				releaseFloatingIpOptionsModel.SetID("testString")
				releaseFloatingIpOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(releaseFloatingIpOptionsModel).ToNot(BeNil())
				Expect(releaseFloatingIpOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(releaseFloatingIpOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReserveFloatingIpOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the FloatingIPPrototypeFloatingIPByZone model
				floatingIpPrototypeModel := new(vpcv1.FloatingIPPrototypeFloatingIPByZone)
				Expect(floatingIpPrototypeModel).ToNot(BeNil())
				floatingIpPrototypeModel.Name = core.StringPtr("my-floating-ip")
				floatingIpPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				floatingIpPrototypeModel.Zone = zoneIdentityModel
				Expect(floatingIpPrototypeModel.Name).To(Equal(core.StringPtr("my-floating-ip")))
				Expect(floatingIpPrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(floatingIpPrototypeModel.Zone).To(Equal(zoneIdentityModel))

				var floatingIpPrototype vpcv1.FloatingIPPrototypeIntf = nil
				// Construct an instance of the ReserveFloatingIpOptions model
				reserveFloatingIpOptionsModel := testService.NewReserveFloatingIpOptions(floatingIpPrototype)
				reserveFloatingIpOptionsModel.SetFloatingIPPrototype(floatingIpPrototypeModel)
				reserveFloatingIpOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(reserveFloatingIpOptionsModel).ToNot(BeNil())
				Expect(reserveFloatingIpOptionsModel.FloatingIPPrototype).To(Equal(floatingIpPrototypeModel))
				Expect(reserveFloatingIpOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRoutePrototype successfully`, func() {
				destination := "192.168.3.0/24"
				var zone vpcv1.ZoneIdentityIntf = nil
				_, err := testService.NewRoutePrototype(destination, zone)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewSetSubnetNetworkAclBindingOptions successfully`, func() {
				// Construct an instance of the NetworkACLIdentityByID model
				networkAclIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				Expect(networkAclIdentityModel).ToNot(BeNil())
				networkAclIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")
				Expect(networkAclIdentityModel.ID).To(Equal(core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")))

				id := "testString"
				var networkAclIdentity vpcv1.NetworkACLIdentityIntf = nil
				// Construct an instance of the SetSubnetNetworkAclBindingOptions model
				setSubnetNetworkAclBindingOptionsModel := testService.NewSetSubnetNetworkAclBindingOptions(id, networkAclIdentity)
				setSubnetNetworkAclBindingOptionsModel.SetID("testString")
				setSubnetNetworkAclBindingOptionsModel.SetNetworkACLIdentity(networkAclIdentityModel)
				setSubnetNetworkAclBindingOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(setSubnetNetworkAclBindingOptionsModel).ToNot(BeNil())
				Expect(setSubnetNetworkAclBindingOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(setSubnetNetworkAclBindingOptionsModel.NetworkACLIdentity).To(Equal(networkAclIdentityModel))
				Expect(setSubnetNetworkAclBindingOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSetSubnetPublicGatewayBindingOptions successfully`, func() {
				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				Expect(publicGatewayIdentityModel).ToNot(BeNil())
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")
				Expect(publicGatewayIdentityModel.ID).To(Equal(core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")))

				id := "testString"
				var publicGatewayIdentity vpcv1.PublicGatewayIdentityIntf = nil
				// Construct an instance of the SetSubnetPublicGatewayBindingOptions model
				setSubnetPublicGatewayBindingOptionsModel := testService.NewSetSubnetPublicGatewayBindingOptions(id, publicGatewayIdentity)
				setSubnetPublicGatewayBindingOptionsModel.SetID("testString")
				setSubnetPublicGatewayBindingOptionsModel.SetPublicGatewayIdentity(publicGatewayIdentityModel)
				setSubnetPublicGatewayBindingOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(setSubnetPublicGatewayBindingOptionsModel).ToNot(BeNil())
				Expect(setSubnetPublicGatewayBindingOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(setSubnetPublicGatewayBindingOptionsModel.PublicGatewayIdentity).To(Equal(publicGatewayIdentityModel))
				Expect(setSubnetPublicGatewayBindingOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSetSubnetRoutingTableBindingOptions successfully`, func() {
				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				Expect(routingTableIdentityModel).ToNot(BeNil())
				routingTableIdentityModel.ID = core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")
				Expect(routingTableIdentityModel.ID).To(Equal(core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")))

				id := "testString"
				var routingTableIdentity vpcv1.RoutingTableIdentityIntf = nil
				// Construct an instance of the SetSubnetRoutingTableBindingOptions model
				setSubnetRoutingTableBindingOptionsModel := testService.NewSetSubnetRoutingTableBindingOptions(id, routingTableIdentity)
				setSubnetRoutingTableBindingOptionsModel.SetID("testString")
				setSubnetRoutingTableBindingOptionsModel.SetRoutingTableIdentity(routingTableIdentityModel)
				setSubnetRoutingTableBindingOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(setSubnetRoutingTableBindingOptionsModel).ToNot(BeNil())
				Expect(setSubnetRoutingTableBindingOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(setSubnetRoutingTableBindingOptionsModel.RoutingTableIdentity).To(Equal(routingTableIdentityModel))
				Expect(setSubnetRoutingTableBindingOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSetVpnGatewayConnectionLocalCidrOptions successfully`, func() {
				vpnGatewayID := "testString"
				id := "testString"
				prefixAddress := "testString"
				prefixLength := "testString"
				// Construct an instance of the SetVpnGatewayConnectionLocalCidrOptions model
				setVpnGatewayConnectionLocalCidrOptionsModel := testService.NewSetVpnGatewayConnectionLocalCidrOptions(vpnGatewayID, id, prefixAddress, prefixLength)
				setVpnGatewayConnectionLocalCidrOptionsModel.SetVpnGatewayID("testString")
				setVpnGatewayConnectionLocalCidrOptionsModel.SetID("testString")
				setVpnGatewayConnectionLocalCidrOptionsModel.SetPrefixAddress("testString")
				setVpnGatewayConnectionLocalCidrOptionsModel.SetPrefixLength("testString")
				setVpnGatewayConnectionLocalCidrOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(setVpnGatewayConnectionLocalCidrOptionsModel).ToNot(BeNil())
				Expect(setVpnGatewayConnectionLocalCidrOptionsModel.VpnGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(setVpnGatewayConnectionLocalCidrOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(setVpnGatewayConnectionLocalCidrOptionsModel.PrefixAddress).To(Equal(core.StringPtr("testString")))
				Expect(setVpnGatewayConnectionLocalCidrOptionsModel.PrefixLength).To(Equal(core.StringPtr("testString")))
				Expect(setVpnGatewayConnectionLocalCidrOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSetVpnGatewayConnectionPeerCidrOptions successfully`, func() {
				vpnGatewayID := "testString"
				id := "testString"
				prefixAddress := "testString"
				prefixLength := "testString"
				// Construct an instance of the SetVpnGatewayConnectionPeerCidrOptions model
				setVpnGatewayConnectionPeerCidrOptionsModel := testService.NewSetVpnGatewayConnectionPeerCidrOptions(vpnGatewayID, id, prefixAddress, prefixLength)
				setVpnGatewayConnectionPeerCidrOptionsModel.SetVpnGatewayID("testString")
				setVpnGatewayConnectionPeerCidrOptionsModel.SetID("testString")
				setVpnGatewayConnectionPeerCidrOptionsModel.SetPrefixAddress("testString")
				setVpnGatewayConnectionPeerCidrOptionsModel.SetPrefixLength("testString")
				setVpnGatewayConnectionPeerCidrOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(setVpnGatewayConnectionPeerCidrOptionsModel).ToNot(BeNil())
				Expect(setVpnGatewayConnectionPeerCidrOptionsModel.VpnGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(setVpnGatewayConnectionPeerCidrOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(setVpnGatewayConnectionPeerCidrOptionsModel.PrefixAddress).To(Equal(core.StringPtr("testString")))
				Expect(setVpnGatewayConnectionPeerCidrOptionsModel.PrefixLength).To(Equal(core.StringPtr("testString")))
				Expect(setVpnGatewayConnectionPeerCidrOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateDedicatedHostGroupOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the UpdateDedicatedHostGroupOptions model
				updateDedicatedHostGroupOptionsModel := testService.NewUpdateDedicatedHostGroupOptions(id)
				updateDedicatedHostGroupOptionsModel.SetID("testString")
				updateDedicatedHostGroupOptionsModel.SetName("my-host-group")
				updateDedicatedHostGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateDedicatedHostGroupOptionsModel).ToNot(BeNil())
				Expect(updateDedicatedHostGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateDedicatedHostGroupOptionsModel.Name).To(Equal(core.StringPtr("my-host-group")))
				Expect(updateDedicatedHostGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateDedicatedHostOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the UpdateDedicatedHostOptions model
				updateDedicatedHostOptionsModel := testService.NewUpdateDedicatedHostOptions(id)
				updateDedicatedHostOptionsModel.SetID("testString")
				updateDedicatedHostOptionsModel.SetName("my-host")
				updateDedicatedHostOptionsModel.SetInstancePlacementEnabled(true)
				updateDedicatedHostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateDedicatedHostOptionsModel).ToNot(BeNil())
				Expect(updateDedicatedHostOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateDedicatedHostOptionsModel.Name).To(Equal(core.StringPtr("my-host")))
				Expect(updateDedicatedHostOptionsModel.InstancePlacementEnabled).To(Equal(core.BoolPtr(true)))
				Expect(updateDedicatedHostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateFloatingIpOptions successfully`, func() {
				// Construct an instance of the NetworkInterfaceIdentityByID model
				networkInterfaceIdentityModel := new(vpcv1.NetworkInterfaceIdentityByID)
				Expect(networkInterfaceIdentityModel).ToNot(BeNil())
				networkInterfaceIdentityModel.ID = core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")
				Expect(networkInterfaceIdentityModel.ID).To(Equal(core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")))

				id := "testString"
				// Construct an instance of the UpdateFloatingIpOptions model
				updateFloatingIpOptionsModel := testService.NewUpdateFloatingIpOptions(id)
				updateFloatingIpOptionsModel.SetID("testString")
				updateFloatingIpOptionsModel.SetName("my-floating-ip")
				updateFloatingIpOptionsModel.SetTarget(networkInterfaceIdentityModel)
				updateFloatingIpOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateFloatingIpOptionsModel).ToNot(BeNil())
				Expect(updateFloatingIpOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateFloatingIpOptionsModel.Name).To(Equal(core.StringPtr("my-floating-ip")))
				Expect(updateFloatingIpOptionsModel.Target).To(Equal(networkInterfaceIdentityModel))
				Expect(updateFloatingIpOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateFlowLogCollectorOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the UpdateFlowLogCollectorOptions model
				updateFlowLogCollectorOptionsModel := testService.NewUpdateFlowLogCollectorOptions(id)
				updateFlowLogCollectorOptionsModel.SetID("testString")
				updateFlowLogCollectorOptionsModel.SetActive(true)
				updateFlowLogCollectorOptionsModel.SetName("my-flow-log-collector")
				updateFlowLogCollectorOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateFlowLogCollectorOptionsModel).ToNot(BeNil())
				Expect(updateFlowLogCollectorOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateFlowLogCollectorOptionsModel.Active).To(Equal(core.BoolPtr(true)))
				Expect(updateFlowLogCollectorOptionsModel.Name).To(Equal(core.StringPtr("my-flow-log-collector")))
				Expect(updateFlowLogCollectorOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateIkePolicyOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the UpdateIkePolicyOptions model
				updateIkePolicyOptionsModel := testService.NewUpdateIkePolicyOptions(id)
				updateIkePolicyOptionsModel.SetID("testString")
				updateIkePolicyOptionsModel.SetAuthenticationAlgorithm("md5")
				updateIkePolicyOptionsModel.SetDhGroup(int64(2))
				updateIkePolicyOptionsModel.SetEncryptionAlgorithm("triple_des")
				updateIkePolicyOptionsModel.SetIkeVersion(int64(1))
				updateIkePolicyOptionsModel.SetKeyLifetime(int64(28800))
				updateIkePolicyOptionsModel.SetName("my-ike-policy")
				updateIkePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateIkePolicyOptionsModel).ToNot(BeNil())
				Expect(updateIkePolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateIkePolicyOptionsModel.AuthenticationAlgorithm).To(Equal(core.StringPtr("md5")))
				Expect(updateIkePolicyOptionsModel.DhGroup).To(Equal(core.Int64Ptr(int64(2))))
				Expect(updateIkePolicyOptionsModel.EncryptionAlgorithm).To(Equal(core.StringPtr("triple_des")))
				Expect(updateIkePolicyOptionsModel.IkeVersion).To(Equal(core.Int64Ptr(int64(1))))
				Expect(updateIkePolicyOptionsModel.KeyLifetime).To(Equal(core.Int64Ptr(int64(28800))))
				Expect(updateIkePolicyOptionsModel.Name).To(Equal(core.StringPtr("my-ike-policy")))
				Expect(updateIkePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateImageOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the UpdateImageOptions model
				updateImageOptionsModel := testService.NewUpdateImageOptions(id)
				updateImageOptionsModel.SetID("testString")
				updateImageOptionsModel.SetName("my-image")
				updateImageOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateImageOptionsModel).ToNot(BeNil())
				Expect(updateImageOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateImageOptionsModel.Name).To(Equal(core.StringPtr("my-image")))
				Expect(updateImageOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateInstanceGroupManagerOptions successfully`, func() {
				// Construct an instance of the InstanceGroupManagerPatchInstanceGroupManagerAutoScalePatch model
				instanceGroupManagerPatchModel := new(vpcv1.InstanceGroupManagerPatchInstanceGroupManagerAutoScalePatch)
				Expect(instanceGroupManagerPatchModel).ToNot(BeNil())
				instanceGroupManagerPatchModel.Name = core.StringPtr("my-instance-group-manager")
				instanceGroupManagerPatchModel.Status = core.StringPtr("enabled")
				instanceGroupManagerPatchModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPatchModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPatchModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPatchModel.MinMembershipCount = core.Int64Ptr(int64(10))
				Expect(instanceGroupManagerPatchModel.Name).To(Equal(core.StringPtr("my-instance-group-manager")))
				Expect(instanceGroupManagerPatchModel.Status).To(Equal(core.StringPtr("enabled")))
				Expect(instanceGroupManagerPatchModel.AggregationWindow).To(Equal(core.Int64Ptr(int64(120))))
				Expect(instanceGroupManagerPatchModel.Cooldown).To(Equal(core.Int64Ptr(int64(210))))
				Expect(instanceGroupManagerPatchModel.MaxMembershipCount).To(Equal(core.Int64Ptr(int64(10))))
				Expect(instanceGroupManagerPatchModel.MinMembershipCount).To(Equal(core.Int64Ptr(int64(10))))

				instanceGroupID := "testString"
				id := "testString"
				var instanceGroupManagerPatch vpcv1.InstanceGroupManagerPatchIntf = nil
				// Construct an instance of the UpdateInstanceGroupManagerOptions model
				updateInstanceGroupManagerOptionsModel := testService.NewUpdateInstanceGroupManagerOptions(instanceGroupID, id, instanceGroupManagerPatch)
				updateInstanceGroupManagerOptionsModel.SetInstanceGroupID("testString")
				updateInstanceGroupManagerOptionsModel.SetID("testString")
				updateInstanceGroupManagerOptionsModel.SetInstanceGroupManagerPatch(instanceGroupManagerPatchModel)
				updateInstanceGroupManagerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateInstanceGroupManagerOptionsModel).ToNot(BeNil())
				Expect(updateInstanceGroupManagerOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceGroupManagerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceGroupManagerOptionsModel.InstanceGroupManagerPatch).To(Equal(instanceGroupManagerPatchModel))
				Expect(updateInstanceGroupManagerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateInstanceGroupManagerPolicyOptions successfully`, func() {
				// Construct an instance of the InstanceGroupManagerPolicyPatchInstanceGroupManagerTargetPolicyPatch model
				instanceGroupManagerPolicyPatchModel := new(vpcv1.InstanceGroupManagerPolicyPatchInstanceGroupManagerTargetPolicyPatch)
				Expect(instanceGroupManagerPolicyPatchModel).ToNot(BeNil())
				instanceGroupManagerPolicyPatchModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPatchModel.MetricValue = core.Int64Ptr(int64(38))
				Expect(instanceGroupManagerPolicyPatchModel.MetricType).To(Equal(core.StringPtr("cpu")))
				Expect(instanceGroupManagerPolicyPatchModel.MetricValue).To(Equal(core.Int64Ptr(int64(38))))

				instanceGroupID := "testString"
				instanceGroupManagerID := "testString"
				id := "testString"
				var instanceGroupManagerPolicyPatch vpcv1.InstanceGroupManagerPolicyPatchIntf = nil
				// Construct an instance of the UpdateInstanceGroupManagerPolicyOptions model
				updateInstanceGroupManagerPolicyOptionsModel := testService.NewUpdateInstanceGroupManagerPolicyOptions(instanceGroupID, instanceGroupManagerID, id, instanceGroupManagerPolicyPatch)
				updateInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupID("testString")
				updateInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupManagerID("testString")
				updateInstanceGroupManagerPolicyOptionsModel.SetID("testString")
				updateInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupManagerPolicyPatch(instanceGroupManagerPolicyPatchModel)
				updateInstanceGroupManagerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateInstanceGroupManagerPolicyOptionsModel).ToNot(BeNil())
				Expect(updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceGroupManagerPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPatch).To(Equal(instanceGroupManagerPolicyPatchModel))
				Expect(updateInstanceGroupManagerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateInstanceGroupOptions successfully`, func() {
				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				Expect(instanceTemplateIdentityModel).ToNot(BeNil())
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")
				Expect(instanceTemplateIdentityModel.ID).To(Equal(core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")))

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				Expect(subnetIdentityModel).ToNot(BeNil())
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
				Expect(subnetIdentityModel.ID).To(Equal(core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")))

				id := "testString"
				// Construct an instance of the UpdateInstanceGroupOptions model
				updateInstanceGroupOptionsModel := testService.NewUpdateInstanceGroupOptions(id)
				updateInstanceGroupOptionsModel.SetID("testString")
				updateInstanceGroupOptionsModel.SetName("my-instance-group")
				updateInstanceGroupOptionsModel.SetMembershipCount(int64(10))
				updateInstanceGroupOptionsModel.SetInstanceTemplate(instanceTemplateIdentityModel)
				updateInstanceGroupOptionsModel.SetSubnets([]vpcv1.SubnetIdentityIntf{subnetIdentityModel})
				updateInstanceGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateInstanceGroupOptionsModel).ToNot(BeNil())
				Expect(updateInstanceGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceGroupOptionsModel.Name).To(Equal(core.StringPtr("my-instance-group")))
				Expect(updateInstanceGroupOptionsModel.MembershipCount).To(Equal(core.Int64Ptr(int64(10))))
				Expect(updateInstanceGroupOptionsModel.InstanceTemplate).To(Equal(instanceTemplateIdentityModel))
				Expect(updateInstanceGroupOptionsModel.Subnets).To(Equal([]vpcv1.SubnetIdentityIntf{subnetIdentityModel}))
				Expect(updateInstanceGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateInstanceOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the UpdateInstanceOptions model
				updateInstanceOptionsModel := testService.NewUpdateInstanceOptions(id)
				updateInstanceOptionsModel.SetID("testString")
				updateInstanceOptionsModel.SetName("my-instance")
				updateInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateInstanceOptionsModel).ToNot(BeNil())
				Expect(updateInstanceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceOptionsModel.Name).To(Equal(core.StringPtr("my-instance")))
				Expect(updateInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateInstanceTemplateOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the UpdateInstanceTemplateOptions model
				updateInstanceTemplateOptionsModel := testService.NewUpdateInstanceTemplateOptions(id)
				updateInstanceTemplateOptionsModel.SetID("testString")
				updateInstanceTemplateOptionsModel.SetName("my-instance-template")
				updateInstanceTemplateOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateInstanceTemplateOptionsModel).ToNot(BeNil())
				Expect(updateInstanceTemplateOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceTemplateOptionsModel.Name).To(Equal(core.StringPtr("my-instance-template")))
				Expect(updateInstanceTemplateOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateIpsecPolicyOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the UpdateIpsecPolicyOptions model
				updateIpsecPolicyOptionsModel := testService.NewUpdateIpsecPolicyOptions(id)
				updateIpsecPolicyOptionsModel.SetID("testString")
				updateIpsecPolicyOptionsModel.SetAuthenticationAlgorithm("md5")
				updateIpsecPolicyOptionsModel.SetEncryptionAlgorithm("triple_des")
				updateIpsecPolicyOptionsModel.SetKeyLifetime(int64(3600))
				updateIpsecPolicyOptionsModel.SetName("my-ipsec-policy")
				updateIpsecPolicyOptionsModel.SetPfs("disabled")
				updateIpsecPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateIpsecPolicyOptionsModel).ToNot(BeNil())
				Expect(updateIpsecPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateIpsecPolicyOptionsModel.AuthenticationAlgorithm).To(Equal(core.StringPtr("md5")))
				Expect(updateIpsecPolicyOptionsModel.EncryptionAlgorithm).To(Equal(core.StringPtr("triple_des")))
				Expect(updateIpsecPolicyOptionsModel.KeyLifetime).To(Equal(core.Int64Ptr(int64(3600))))
				Expect(updateIpsecPolicyOptionsModel.Name).To(Equal(core.StringPtr("my-ipsec-policy")))
				Expect(updateIpsecPolicyOptionsModel.Pfs).To(Equal(core.StringPtr("disabled")))
				Expect(updateIpsecPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateKeyOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the UpdateKeyOptions model
				updateKeyOptionsModel := testService.NewUpdateKeyOptions(id)
				updateKeyOptionsModel.SetID("testString")
				updateKeyOptionsModel.SetName("my-key")
				updateKeyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateKeyOptionsModel).ToNot(BeNil())
				Expect(updateKeyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateKeyOptionsModel.Name).To(Equal(core.StringPtr("my-key")))
				Expect(updateKeyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerListenerOptions successfully`, func() {
				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				Expect(certificateInstanceIdentityModel).ToNot(BeNil())
				certificateInstanceIdentityModel.Crn = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")
				Expect(certificateInstanceIdentityModel.Crn).To(Equal(core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")))

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				Expect(loadBalancerPoolIdentityModel).ToNot(BeNil())
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")
				Expect(loadBalancerPoolIdentityModel.ID).To(Equal(core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")))

				loadBalancerID := "testString"
				id := "testString"
				// Construct an instance of the UpdateLoadBalancerListenerOptions model
				updateLoadBalancerListenerOptionsModel := testService.NewUpdateLoadBalancerListenerOptions(loadBalancerID, id)
				updateLoadBalancerListenerOptionsModel.SetLoadBalancerID("testString")
				updateLoadBalancerListenerOptionsModel.SetID("testString")
				updateLoadBalancerListenerOptionsModel.SetConnectionLimit(int64(2000))
				updateLoadBalancerListenerOptionsModel.SetPort(int64(443))
				updateLoadBalancerListenerOptionsModel.SetProtocol("http")
				updateLoadBalancerListenerOptionsModel.SetCertificateInstance(certificateInstanceIdentityModel)
				updateLoadBalancerListenerOptionsModel.SetDefaultPool(loadBalancerPoolIdentityModel)
				updateLoadBalancerListenerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerListenerOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerListenerOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerOptionsModel.ConnectionLimit).To(Equal(core.Int64Ptr(int64(2000))))
				Expect(updateLoadBalancerListenerOptionsModel.Port).To(Equal(core.Int64Ptr(int64(443))))
				Expect(updateLoadBalancerListenerOptionsModel.Protocol).To(Equal(core.StringPtr("http")))
				Expect(updateLoadBalancerListenerOptionsModel.CertificateInstance).To(Equal(certificateInstanceIdentityModel))
				Expect(updateLoadBalancerListenerOptionsModel.DefaultPool).To(Equal(loadBalancerPoolIdentityModel))
				Expect(updateLoadBalancerListenerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerListenerPolicyOptions successfully`, func() {
				// Construct an instance of the LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPatchTargetModel := new(vpcv1.LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				Expect(loadBalancerListenerPolicyPatchTargetModel).ToNot(BeNil())
				loadBalancerListenerPolicyPatchTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")
				Expect(loadBalancerListenerPolicyPatchTargetModel.ID).To(Equal(core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")))

				loadBalancerID := "testString"
				listenerID := "testString"
				id := "testString"
				// Construct an instance of the UpdateLoadBalancerListenerPolicyOptions model
				updateLoadBalancerListenerPolicyOptionsModel := testService.NewUpdateLoadBalancerListenerPolicyOptions(loadBalancerID, listenerID, id)
				updateLoadBalancerListenerPolicyOptionsModel.SetLoadBalancerID("testString")
				updateLoadBalancerListenerPolicyOptionsModel.SetListenerID("testString")
				updateLoadBalancerListenerPolicyOptionsModel.SetID("testString")
				updateLoadBalancerListenerPolicyOptionsModel.SetName("my-policy")
				updateLoadBalancerListenerPolicyOptionsModel.SetPriority(int64(5))
				updateLoadBalancerListenerPolicyOptionsModel.SetTarget(loadBalancerListenerPolicyPatchTargetModel)
				updateLoadBalancerListenerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerListenerPolicyOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyOptionsModel.Name).To(Equal(core.StringPtr("my-policy")))
				Expect(updateLoadBalancerListenerPolicyOptionsModel.Priority).To(Equal(core.Int64Ptr(int64(5))))
				Expect(updateLoadBalancerListenerPolicyOptionsModel.Target).To(Equal(loadBalancerListenerPolicyPatchTargetModel))
				Expect(updateLoadBalancerListenerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerListenerPolicyRuleOptions successfully`, func() {
				loadBalancerID := "testString"
				listenerID := "testString"
				policyID := "testString"
				id := "testString"
				// Construct an instance of the UpdateLoadBalancerListenerPolicyRuleOptions model
				updateLoadBalancerListenerPolicyRuleOptionsModel := testService.NewUpdateLoadBalancerListenerPolicyRuleOptions(loadBalancerID, listenerID, policyID, id)
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetLoadBalancerID("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetListenerID("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetPolicyID("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetID("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetCondition("contains")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetField("MY-APP-HEADER")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetType("header")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetValue("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.PolicyID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.Condition).To(Equal(core.StringPtr("contains")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.Field).To(Equal(core.StringPtr("MY-APP-HEADER")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.Type).To(Equal(core.StringPtr("header")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the UpdateLoadBalancerOptions model
				updateLoadBalancerOptionsModel := testService.NewUpdateLoadBalancerOptions(id)
				updateLoadBalancerOptionsModel.SetID("testString")
				updateLoadBalancerOptionsModel.SetName("my-load-balancer")
				updateLoadBalancerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerOptionsModel.Name).To(Equal(core.StringPtr("my-load-balancer")))
				Expect(updateLoadBalancerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerPoolMemberOptions successfully`, func() {
				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				Expect(loadBalancerPoolMemberTargetPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")
				Expect(loadBalancerPoolMemberTargetPrototypeModel.ID).To(Equal(core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")))

				loadBalancerID := "testString"
				poolID := "testString"
				id := "testString"
				// Construct an instance of the UpdateLoadBalancerPoolMemberOptions model
				updateLoadBalancerPoolMemberOptionsModel := testService.NewUpdateLoadBalancerPoolMemberOptions(loadBalancerID, poolID, id)
				updateLoadBalancerPoolMemberOptionsModel.SetLoadBalancerID("testString")
				updateLoadBalancerPoolMemberOptionsModel.SetPoolID("testString")
				updateLoadBalancerPoolMemberOptionsModel.SetID("testString")
				updateLoadBalancerPoolMemberOptionsModel.SetPort(int64(80))
				updateLoadBalancerPoolMemberOptionsModel.SetWeight(int64(50))
				updateLoadBalancerPoolMemberOptionsModel.SetTarget(loadBalancerPoolMemberTargetPrototypeModel)
				updateLoadBalancerPoolMemberOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerPoolMemberOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerPoolMemberOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerPoolMemberOptionsModel.PoolID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerPoolMemberOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerPoolMemberOptionsModel.Port).To(Equal(core.Int64Ptr(int64(80))))
				Expect(updateLoadBalancerPoolMemberOptionsModel.Weight).To(Equal(core.Int64Ptr(int64(50))))
				Expect(updateLoadBalancerPoolMemberOptionsModel.Target).To(Equal(loadBalancerPoolMemberTargetPrototypeModel))
				Expect(updateLoadBalancerPoolMemberOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerPoolMembersOptions successfully`, func() {
				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID)
				Expect(loadBalancerPoolMemberTargetPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")
				Expect(loadBalancerPoolMemberTargetPrototypeModel.ID).To(Equal(core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")))

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				Expect(loadBalancerPoolMemberPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				Expect(loadBalancerPoolMemberPrototypeModel.Port).To(Equal(core.Int64Ptr(int64(80))))
				Expect(loadBalancerPoolMemberPrototypeModel.Weight).To(Equal(core.Int64Ptr(int64(50))))
				Expect(loadBalancerPoolMemberPrototypeModel.Target).To(Equal(loadBalancerPoolMemberTargetPrototypeModel))

				loadBalancerID := "testString"
				poolID := "testString"
				updateLoadBalancerPoolMembersOptionsMembers := []vpcv1.LoadBalancerPoolMemberPrototype{}
				// Construct an instance of the UpdateLoadBalancerPoolMembersOptions model
				updateLoadBalancerPoolMembersOptionsModel := testService.NewUpdateLoadBalancerPoolMembersOptions(loadBalancerID, poolID, updateLoadBalancerPoolMembersOptionsMembers)
				updateLoadBalancerPoolMembersOptionsModel.SetLoadBalancerID("testString")
				updateLoadBalancerPoolMembersOptionsModel.SetPoolID("testString")
				updateLoadBalancerPoolMembersOptionsModel.SetMembers([]vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel})
				updateLoadBalancerPoolMembersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerPoolMembersOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerPoolMembersOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerPoolMembersOptionsModel.PoolID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerPoolMembersOptionsModel.Members).To(Equal([]vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}))
				Expect(updateLoadBalancerPoolMembersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerPoolOptions successfully`, func() {
				// Construct an instance of the LoadBalancerPoolHealthMonitorPatch model
				loadBalancerPoolHealthMonitorPatchModel := new(vpcv1.LoadBalancerPoolHealthMonitorPatch)
				Expect(loadBalancerPoolHealthMonitorPatchModel).ToNot(BeNil())
				loadBalancerPoolHealthMonitorPatchModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPatchModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPatchModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Type = core.StringPtr("https")
				loadBalancerPoolHealthMonitorPatchModel.UrlPath = core.StringPtr("/")
				Expect(loadBalancerPoolHealthMonitorPatchModel.Delay).To(Equal(core.Int64Ptr(int64(5))))
				Expect(loadBalancerPoolHealthMonitorPatchModel.MaxRetries).To(Equal(core.Int64Ptr(int64(2))))
				Expect(loadBalancerPoolHealthMonitorPatchModel.Port).To(Equal(core.Int64Ptr(int64(22))))
				Expect(loadBalancerPoolHealthMonitorPatchModel.Timeout).To(Equal(core.Int64Ptr(int64(2))))
				Expect(loadBalancerPoolHealthMonitorPatchModel.Type).To(Equal(core.StringPtr("https")))
				Expect(loadBalancerPoolHealthMonitorPatchModel.UrlPath).To(Equal(core.StringPtr("/")))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePatch model
				loadBalancerPoolSessionPersistencePatchModel := new(vpcv1.LoadBalancerPoolSessionPersistencePatch)
				Expect(loadBalancerPoolSessionPersistencePatchModel).ToNot(BeNil())
				loadBalancerPoolSessionPersistencePatchModel.Type = core.StringPtr("source_ip")
				Expect(loadBalancerPoolSessionPersistencePatchModel.Type).To(Equal(core.StringPtr("source_ip")))

				loadBalancerID := "testString"
				id := "testString"
				// Construct an instance of the UpdateLoadBalancerPoolOptions model
				updateLoadBalancerPoolOptionsModel := testService.NewUpdateLoadBalancerPoolOptions(loadBalancerID, id)
				updateLoadBalancerPoolOptionsModel.SetLoadBalancerID("testString")
				updateLoadBalancerPoolOptionsModel.SetID("testString")
				updateLoadBalancerPoolOptionsModel.SetAlgorithm("least_connections")
				updateLoadBalancerPoolOptionsModel.SetName("my-load-balancer-pool")
				updateLoadBalancerPoolOptionsModel.SetProtocol("https")
				updateLoadBalancerPoolOptionsModel.SetHealthMonitor(loadBalancerPoolHealthMonitorPatchModel)
				updateLoadBalancerPoolOptionsModel.SetSessionPersistence(loadBalancerPoolSessionPersistencePatchModel)
				updateLoadBalancerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerPoolOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerPoolOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerPoolOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerPoolOptionsModel.Algorithm).To(Equal(core.StringPtr("least_connections")))
				Expect(updateLoadBalancerPoolOptionsModel.Name).To(Equal(core.StringPtr("my-load-balancer-pool")))
				Expect(updateLoadBalancerPoolOptionsModel.Protocol).To(Equal(core.StringPtr("https")))
				Expect(updateLoadBalancerPoolOptionsModel.HealthMonitor).To(Equal(loadBalancerPoolHealthMonitorPatchModel))
				Expect(updateLoadBalancerPoolOptionsModel.SessionPersistence).To(Equal(loadBalancerPoolSessionPersistencePatchModel))
				Expect(updateLoadBalancerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateNetworkAclOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the UpdateNetworkAclOptions model
				updateNetworkAclOptionsModel := testService.NewUpdateNetworkAclOptions(id)
				updateNetworkAclOptionsModel.SetID("testString")
				updateNetworkAclOptionsModel.SetName("my-network-acl")
				updateNetworkAclOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateNetworkAclOptionsModel).ToNot(BeNil())
				Expect(updateNetworkAclOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateNetworkAclOptionsModel.Name).To(Equal(core.StringPtr("my-network-acl")))
				Expect(updateNetworkAclOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateNetworkAclRuleOptions successfully`, func() {
				// Construct an instance of the NetworkACLRulePatchBeforeNetworkACLRuleIdentityByID model
				networkAclRulePatchBeforeModel := new(vpcv1.NetworkACLRulePatchBeforeNetworkACLRuleIdentityByID)
				Expect(networkAclRulePatchBeforeModel).ToNot(BeNil())
				networkAclRulePatchBeforeModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				Expect(networkAclRulePatchBeforeModel.ID).To(Equal(core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")))

				networkAclID := "testString"
				id := "testString"
				// Construct an instance of the UpdateNetworkAclRuleOptions model
				updateNetworkAclRuleOptionsModel := testService.NewUpdateNetworkAclRuleOptions(networkAclID, id)
				updateNetworkAclRuleOptionsModel.SetNetworkAclID("testString")
				updateNetworkAclRuleOptionsModel.SetID("testString")
				updateNetworkAclRuleOptionsModel.SetAction("allow")
				updateNetworkAclRuleOptionsModel.SetDestination("192.168.3.2/32")
				updateNetworkAclRuleOptionsModel.SetDirection("inbound")
				updateNetworkAclRuleOptionsModel.SetName("my-rule-2")
				updateNetworkAclRuleOptionsModel.SetSource("192.168.3.2/32")
				updateNetworkAclRuleOptionsModel.SetDestinationPortMax(int64(22))
				updateNetworkAclRuleOptionsModel.SetDestinationPortMin(int64(22))
				updateNetworkAclRuleOptionsModel.SetSourcePortMax(int64(65535))
				updateNetworkAclRuleOptionsModel.SetSourcePortMin(int64(49152))
				updateNetworkAclRuleOptionsModel.SetCode(int64(0))
				updateNetworkAclRuleOptionsModel.SetType(int64(8))
				updateNetworkAclRuleOptionsModel.SetBefore(networkAclRulePatchBeforeModel)
				updateNetworkAclRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateNetworkAclRuleOptionsModel).ToNot(BeNil())
				Expect(updateNetworkAclRuleOptionsModel.NetworkAclID).To(Equal(core.StringPtr("testString")))
				Expect(updateNetworkAclRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateNetworkAclRuleOptionsModel.Action).To(Equal(core.StringPtr("allow")))
				Expect(updateNetworkAclRuleOptionsModel.Destination).To(Equal(core.StringPtr("192.168.3.2/32")))
				Expect(updateNetworkAclRuleOptionsModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(updateNetworkAclRuleOptionsModel.Name).To(Equal(core.StringPtr("my-rule-2")))
				Expect(updateNetworkAclRuleOptionsModel.Source).To(Equal(core.StringPtr("192.168.3.2/32")))
				Expect(updateNetworkAclRuleOptionsModel.DestinationPortMax).To(Equal(core.Int64Ptr(int64(22))))
				Expect(updateNetworkAclRuleOptionsModel.DestinationPortMin).To(Equal(core.Int64Ptr(int64(22))))
				Expect(updateNetworkAclRuleOptionsModel.SourcePortMax).To(Equal(core.Int64Ptr(int64(65535))))
				Expect(updateNetworkAclRuleOptionsModel.SourcePortMin).To(Equal(core.Int64Ptr(int64(49152))))
				Expect(updateNetworkAclRuleOptionsModel.Code).To(Equal(core.Int64Ptr(int64(0))))
				Expect(updateNetworkAclRuleOptionsModel.Type).To(Equal(core.Int64Ptr(int64(8))))
				Expect(updateNetworkAclRuleOptionsModel.Before).To(Equal(networkAclRulePatchBeforeModel))
				Expect(updateNetworkAclRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateNetworkInterfaceOptions successfully`, func() {
				instanceID := "testString"
				id := "testString"
				// Construct an instance of the UpdateNetworkInterfaceOptions model
				updateNetworkInterfaceOptionsModel := testService.NewUpdateNetworkInterfaceOptions(instanceID, id)
				updateNetworkInterfaceOptionsModel.SetInstanceID("testString")
				updateNetworkInterfaceOptionsModel.SetID("testString")
				updateNetworkInterfaceOptionsModel.SetAllowIpSpoofing(true)
				updateNetworkInterfaceOptionsModel.SetName("my-network-interface")
				updateNetworkInterfaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateNetworkInterfaceOptionsModel).ToNot(BeNil())
				Expect(updateNetworkInterfaceOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(updateNetworkInterfaceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateNetworkInterfaceOptionsModel.AllowIpSpoofing).To(Equal(core.BoolPtr(true)))
				Expect(updateNetworkInterfaceOptionsModel.Name).To(Equal(core.StringPtr("my-network-interface")))
				Expect(updateNetworkInterfaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdatePublicGatewayOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the UpdatePublicGatewayOptions model
				updatePublicGatewayOptionsModel := testService.NewUpdatePublicGatewayOptions(id)
				updatePublicGatewayOptionsModel.SetID("testString")
				updatePublicGatewayOptionsModel.SetName("my-public-gateway")
				updatePublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updatePublicGatewayOptionsModel).ToNot(BeNil())
				Expect(updatePublicGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updatePublicGatewayOptionsModel.Name).To(Equal(core.StringPtr("my-public-gateway")))
				Expect(updatePublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateSecurityGroupOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the UpdateSecurityGroupOptions model
				updateSecurityGroupOptionsModel := testService.NewUpdateSecurityGroupOptions(id)
				updateSecurityGroupOptionsModel.SetID("testString")
				updateSecurityGroupOptionsModel.SetName("my-security-group")
				updateSecurityGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateSecurityGroupOptionsModel).ToNot(BeNil())
				Expect(updateSecurityGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateSecurityGroupOptionsModel.Name).To(Equal(core.StringPtr("my-security-group")))
				Expect(updateSecurityGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateSecurityGroupRuleOptions successfully`, func() {
				// Construct an instance of the SecurityGroupRulePatchRemoteIP model
				securityGroupRulePatchRemoteModel := new(vpcv1.SecurityGroupRulePatchRemoteIP)
				Expect(securityGroupRulePatchRemoteModel).ToNot(BeNil())
				securityGroupRulePatchRemoteModel.Address = core.StringPtr("192.168.3.4")
				Expect(securityGroupRulePatchRemoteModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				securityGroupID := "testString"
				id := "testString"
				// Construct an instance of the UpdateSecurityGroupRuleOptions model
				updateSecurityGroupRuleOptionsModel := testService.NewUpdateSecurityGroupRuleOptions(securityGroupID, id)
				updateSecurityGroupRuleOptionsModel.SetSecurityGroupID("testString")
				updateSecurityGroupRuleOptionsModel.SetID("testString")
				updateSecurityGroupRuleOptionsModel.SetRemote(securityGroupRulePatchRemoteModel)
				updateSecurityGroupRuleOptionsModel.SetDirection("inbound")
				updateSecurityGroupRuleOptionsModel.SetIpVersion("ipv4")
				updateSecurityGroupRuleOptionsModel.SetCode(int64(0))
				updateSecurityGroupRuleOptionsModel.SetPortMax(int64(22))
				updateSecurityGroupRuleOptionsModel.SetPortMin(int64(22))
				updateSecurityGroupRuleOptionsModel.SetType(int64(8))
				updateSecurityGroupRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateSecurityGroupRuleOptionsModel).ToNot(BeNil())
				Expect(updateSecurityGroupRuleOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(updateSecurityGroupRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateSecurityGroupRuleOptionsModel.Remote).To(Equal(securityGroupRulePatchRemoteModel))
				Expect(updateSecurityGroupRuleOptionsModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(updateSecurityGroupRuleOptionsModel.IpVersion).To(Equal(core.StringPtr("ipv4")))
				Expect(updateSecurityGroupRuleOptionsModel.Code).To(Equal(core.Int64Ptr(int64(0))))
				Expect(updateSecurityGroupRuleOptionsModel.PortMax).To(Equal(core.Int64Ptr(int64(22))))
				Expect(updateSecurityGroupRuleOptionsModel.PortMin).To(Equal(core.Int64Ptr(int64(22))))
				Expect(updateSecurityGroupRuleOptionsModel.Type).To(Equal(core.Int64Ptr(int64(8))))
				Expect(updateSecurityGroupRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateSubnetOptions successfully`, func() {
				// Construct an instance of the NetworkACLIdentityByID model
				networkAclIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				Expect(networkAclIdentityModel).ToNot(BeNil())
				networkAclIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")
				Expect(networkAclIdentityModel.ID).To(Equal(core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")))

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				Expect(publicGatewayIdentityModel).ToNot(BeNil())
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")
				Expect(publicGatewayIdentityModel.ID).To(Equal(core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")))

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				Expect(routingTableIdentityModel).ToNot(BeNil())
				routingTableIdentityModel.ID = core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")
				Expect(routingTableIdentityModel.ID).To(Equal(core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")))

				id := "testString"
				// Construct an instance of the UpdateSubnetOptions model
				updateSubnetOptionsModel := testService.NewUpdateSubnetOptions(id)
				updateSubnetOptionsModel.SetID("testString")
				updateSubnetOptionsModel.SetName("my-subnet")
				updateSubnetOptionsModel.SetNetworkAcl(networkAclIdentityModel)
				updateSubnetOptionsModel.SetPublicGateway(publicGatewayIdentityModel)
				updateSubnetOptionsModel.SetRoutingTable(routingTableIdentityModel)
				updateSubnetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateSubnetOptionsModel).ToNot(BeNil())
				Expect(updateSubnetOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateSubnetOptionsModel.Name).To(Equal(core.StringPtr("my-subnet")))
				Expect(updateSubnetOptionsModel.NetworkAcl).To(Equal(networkAclIdentityModel))
				Expect(updateSubnetOptionsModel.PublicGateway).To(Equal(publicGatewayIdentityModel))
				Expect(updateSubnetOptionsModel.RoutingTable).To(Equal(routingTableIdentityModel))
				Expect(updateSubnetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVolumeAttachmentOptions successfully`, func() {
				instanceID := "testString"
				id := "testString"
				// Construct an instance of the UpdateVolumeAttachmentOptions model
				updateVolumeAttachmentOptionsModel := testService.NewUpdateVolumeAttachmentOptions(instanceID, id)
				updateVolumeAttachmentOptionsModel.SetInstanceID("testString")
				updateVolumeAttachmentOptionsModel.SetID("testString")
				updateVolumeAttachmentOptionsModel.SetDeleteVolumeOnInstanceDelete(true)
				updateVolumeAttachmentOptionsModel.SetName("my-volume-attachment")
				updateVolumeAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVolumeAttachmentOptionsModel).ToNot(BeNil())
				Expect(updateVolumeAttachmentOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(updateVolumeAttachmentOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete).To(Equal(core.BoolPtr(true)))
				Expect(updateVolumeAttachmentOptionsModel.Name).To(Equal(core.StringPtr("my-volume-attachment")))
				Expect(updateVolumeAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVolumeOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the UpdateVolumeOptions model
				updateVolumeOptionsModel := testService.NewUpdateVolumeOptions(id)
				updateVolumeOptionsModel.SetID("testString")
				updateVolumeOptionsModel.SetName("my-volume")
				updateVolumeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVolumeOptionsModel).ToNot(BeNil())
				Expect(updateVolumeOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVolumeOptionsModel.Name).To(Equal(core.StringPtr("my-volume")))
				Expect(updateVolumeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVpcAddressPrefixOptions successfully`, func() {
				vpcID := "testString"
				id := "testString"
				// Construct an instance of the UpdateVpcAddressPrefixOptions model
				updateVpcAddressPrefixOptionsModel := testService.NewUpdateVpcAddressPrefixOptions(vpcID, id)
				updateVpcAddressPrefixOptionsModel.SetVpcID("testString")
				updateVpcAddressPrefixOptionsModel.SetID("testString")
				updateVpcAddressPrefixOptionsModel.SetName("my-address-prefix-2")
				updateVpcAddressPrefixOptionsModel.SetIsDefault(false)
				updateVpcAddressPrefixOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVpcAddressPrefixOptionsModel).ToNot(BeNil())
				Expect(updateVpcAddressPrefixOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(updateVpcAddressPrefixOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVpcAddressPrefixOptionsModel.Name).To(Equal(core.StringPtr("my-address-prefix-2")))
				Expect(updateVpcAddressPrefixOptionsModel.IsDefault).To(Equal(core.BoolPtr(false)))
				Expect(updateVpcAddressPrefixOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVpcOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the UpdateVpcOptions model
				updateVpcOptionsModel := testService.NewUpdateVpcOptions(id)
				updateVpcOptionsModel.SetID("testString")
				updateVpcOptionsModel.SetName("my-vpc")
				updateVpcOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVpcOptionsModel).ToNot(BeNil())
				Expect(updateVpcOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVpcOptionsModel.Name).To(Equal(core.StringPtr("my-vpc")))
				Expect(updateVpcOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVpcRouteOptions successfully`, func() {
				vpcID := "testString"
				id := "testString"
				// Construct an instance of the UpdateVpcRouteOptions model
				updateVpcRouteOptionsModel := testService.NewUpdateVpcRouteOptions(vpcID, id)
				updateVpcRouteOptionsModel.SetVpcID("testString")
				updateVpcRouteOptionsModel.SetID("testString")
				updateVpcRouteOptionsModel.SetName("my-route-2")
				updateVpcRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVpcRouteOptionsModel).ToNot(BeNil())
				Expect(updateVpcRouteOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(updateVpcRouteOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVpcRouteOptionsModel.Name).To(Equal(core.StringPtr("my-route-2")))
				Expect(updateVpcRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVpcRoutingTableOptions successfully`, func() {
				vpcID := "testString"
				id := "testString"
				// Construct an instance of the UpdateVpcRoutingTableOptions model
				updateVpcRoutingTableOptionsModel := testService.NewUpdateVpcRoutingTableOptions(vpcID, id)
				updateVpcRoutingTableOptionsModel.SetVpcID("testString")
				updateVpcRoutingTableOptionsModel.SetID("testString")
				updateVpcRoutingTableOptionsModel.SetName("my-routing-table-2")
				updateVpcRoutingTableOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVpcRoutingTableOptionsModel).ToNot(BeNil())
				Expect(updateVpcRoutingTableOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(updateVpcRoutingTableOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVpcRoutingTableOptionsModel.Name).To(Equal(core.StringPtr("my-routing-table-2")))
				Expect(updateVpcRoutingTableOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVpcRoutingTableRouteOptions successfully`, func() {
				vpcID := "testString"
				routingTableID := "testString"
				id := "testString"
				// Construct an instance of the UpdateVpcRoutingTableRouteOptions model
				updateVpcRoutingTableRouteOptionsModel := testService.NewUpdateVpcRoutingTableRouteOptions(vpcID, routingTableID, id)
				updateVpcRoutingTableRouteOptionsModel.SetVpcID("testString")
				updateVpcRoutingTableRouteOptionsModel.SetRoutingTableID("testString")
				updateVpcRoutingTableRouteOptionsModel.SetID("testString")
				updateVpcRoutingTableRouteOptionsModel.SetName("my-route-2")
				updateVpcRoutingTableRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVpcRoutingTableRouteOptionsModel).ToNot(BeNil())
				Expect(updateVpcRoutingTableRouteOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(updateVpcRoutingTableRouteOptionsModel.RoutingTableID).To(Equal(core.StringPtr("testString")))
				Expect(updateVpcRoutingTableRouteOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVpcRoutingTableRouteOptionsModel.Name).To(Equal(core.StringPtr("my-route-2")))
				Expect(updateVpcRoutingTableRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVpnGatewayConnectionOptions successfully`, func() {
				// Construct an instance of the IKEPolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IKEPolicyIdentityByID)
				Expect(ikePolicyIdentityModel).ToNot(BeNil())
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")
				Expect(ikePolicyIdentityModel.ID).To(Equal(core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")))

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				Expect(iPsecPolicyIdentityModel).ToNot(BeNil())
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")
				Expect(iPsecPolicyIdentityModel.ID).To(Equal(core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")))

				// Construct an instance of the VPNGatewayConnectionDPDPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDPDPrototype)
				Expect(vpnGatewayConnectionDpdPrototypeModel).ToNot(BeNil())
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))
				Expect(vpnGatewayConnectionDpdPrototypeModel.Action).To(Equal(core.StringPtr("restart")))
				Expect(vpnGatewayConnectionDpdPrototypeModel.Interval).To(Equal(core.Int64Ptr(int64(30))))
				Expect(vpnGatewayConnectionDpdPrototypeModel.Timeout).To(Equal(core.Int64Ptr(int64(120))))

				vpnGatewayID := "testString"
				id := "testString"
				// Construct an instance of the UpdateVpnGatewayConnectionOptions model
				updateVpnGatewayConnectionOptionsModel := testService.NewUpdateVpnGatewayConnectionOptions(vpnGatewayID, id)
				updateVpnGatewayConnectionOptionsModel.SetVpnGatewayID("testString")
				updateVpnGatewayConnectionOptionsModel.SetID("testString")
				updateVpnGatewayConnectionOptionsModel.SetAdminStateUp(true)
				updateVpnGatewayConnectionOptionsModel.SetIkePolicy(ikePolicyIdentityModel)
				updateVpnGatewayConnectionOptionsModel.SetIpsecPolicy(iPsecPolicyIdentityModel)
				updateVpnGatewayConnectionOptionsModel.SetName("my-vpn-connection")
				updateVpnGatewayConnectionOptionsModel.SetPeerAddress("169.21.50.5")
				updateVpnGatewayConnectionOptionsModel.SetPsk("lkj14b1oi0alcniejkso")
				updateVpnGatewayConnectionOptionsModel.SetDeadPeerDetection(vpnGatewayConnectionDpdPrototypeModel)
				updateVpnGatewayConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVpnGatewayConnectionOptionsModel).ToNot(BeNil())
				Expect(updateVpnGatewayConnectionOptionsModel.VpnGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(updateVpnGatewayConnectionOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVpnGatewayConnectionOptionsModel.AdminStateUp).To(Equal(core.BoolPtr(true)))
				Expect(updateVpnGatewayConnectionOptionsModel.IkePolicy).To(Equal(ikePolicyIdentityModel))
				Expect(updateVpnGatewayConnectionOptionsModel.IpsecPolicy).To(Equal(iPsecPolicyIdentityModel))
				Expect(updateVpnGatewayConnectionOptionsModel.Name).To(Equal(core.StringPtr("my-vpn-connection")))
				Expect(updateVpnGatewayConnectionOptionsModel.PeerAddress).To(Equal(core.StringPtr("169.21.50.5")))
				Expect(updateVpnGatewayConnectionOptionsModel.Psk).To(Equal(core.StringPtr("lkj14b1oi0alcniejkso")))
				Expect(updateVpnGatewayConnectionOptionsModel.DeadPeerDetection).To(Equal(vpnGatewayConnectionDpdPrototypeModel))
				Expect(updateVpnGatewayConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVpnGatewayOptions successfully`, func() {
				id := "testString"
				// Construct an instance of the UpdateVpnGatewayOptions model
				updateVpnGatewayOptionsModel := testService.NewUpdateVpnGatewayOptions(id)
				updateVpnGatewayOptionsModel.SetID("testString")
				updateVpnGatewayOptionsModel.SetName("my-vpn-gateway")
				updateVpnGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVpnGatewayOptionsModel).ToNot(BeNil())
				Expect(updateVpnGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVpnGatewayOptionsModel.Name).To(Equal(core.StringPtr("my-vpn-gateway")))
				Expect(updateVpnGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVolumeAttachmentPrototypeInstanceByImageContext successfully`, func() {
				var volume *vpcv1.VolumePrototypeInstanceByImageContext = nil
				_, err := testService.NewVolumeAttachmentPrototypeInstanceByImageContext(volume)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewVolumeAttachmentPrototypeInstanceContext successfully`, func() {
				var volume vpcv1.VolumeAttachmentPrototypeInstanceContextVolumeIntf = nil
				_, err := testService.NewVolumeAttachmentPrototypeInstanceContext(volume)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewVolumePrototypeInstanceByImageContext successfully`, func() {
				var profile vpcv1.VolumeProfileIdentityIntf = nil
				_, err := testService.NewVolumePrototypeInstanceByImageContext(profile)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewCertificateInstanceIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"
				model, err := testService.NewCertificateInstanceIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCloudObjectStorageBucketIdentityByName successfully`, func() {
				name := "bucket-27200-lwx4cfvcue"
				model, err := testService.NewCloudObjectStorageBucketIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewDedicatedHostPrototypeGroupDedicatedHostGroupIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0"
				model, err := testService.NewDedicatedHostPrototypeGroupDedicatedHostGroupIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewDedicatedHostPrototypeGroupDedicatedHostGroupIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0"
				model, err := testService.NewDedicatedHostPrototypeGroupDedicatedHostGroupIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewDedicatedHostPrototypeGroupDedicatedHostGroupIdentityByID successfully`, func() {
				id := "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0"
				model, err := testService.NewDedicatedHostPrototypeGroupDedicatedHostGroupIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewDedicatedHostPrototypeProfileDedicatedHostProfileIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/profiles/m-62x496"
				model, err := testService.NewDedicatedHostPrototypeProfileDedicatedHostProfileIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewDedicatedHostPrototypeProfileDedicatedHostProfileIdentityByName successfully`, func() {
				name := "m-62x496"
				model, err := testService.NewDedicatedHostPrototypeProfileDedicatedHostProfileIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewEncryptionKeyIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"
				model, err := testService.NewEncryptionKeyIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFloatingIPPrototypeFloatingIPByTarget successfully`, func() {
				var target vpcv1.NetworkInterfaceIdentityIntf = nil
				_, err := testService.NewFloatingIPPrototypeFloatingIPByTarget(target)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewFloatingIPPrototypeFloatingIPByZone successfully`, func() {
				var zone vpcv1.ZoneIdentityIntf = nil
				_, err := testService.NewFloatingIPPrototypeFloatingIPByZone(zone)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewIKEPolicyIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b"
				model, err := testService.NewIKEPolicyIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewIKEPolicyIdentityByID successfully`, func() {
				id := "ddf51bec-3424-11e8-b467-0ed5f89f718b"
				model, err := testService.NewIKEPolicyIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewIPsecPolicyIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b"
				model, err := testService.NewIPsecPolicyIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewIPsecPolicyIdentityByID successfully`, func() {
				id := "ddf51bec-3424-11e8-b467-0ed5f89f718b"
				model, err := testService.NewIPsecPolicyIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewImageIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"
				model, err := testService.NewImageIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewImageIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"
				model, err := testService.NewImageIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewImageIdentityByID successfully`, func() {
				id := "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"
				model, err := testService.NewImageIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewImagePrototypeImageByFile successfully`, func() {
				var file *vpcv1.ImageFilePrototype = nil
				var operatingSystem vpcv1.OperatingSystemIdentityIntf = nil
				_, err := testService.NewImagePrototypeImageByFile(file, operatingSystem)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewInstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype successfully`, func() {
				metricType := "cpu"
				metricValue := int64(38)
				policyType := "target"
				model, err := testService.NewInstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype(metricType, metricValue, policyType)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype successfully`, func() {
				maxMembershipCount := int64(10)
				managerType := "autoscale"
				model, err := testService.NewInstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype(maxMembershipCount, managerType)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstanceProfileIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16"
				model, err := testService.NewInstanceProfileIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstanceProfileIdentityByName successfully`, func() {
				name := "bc1-4x16"
				model, err := testService.NewInstanceProfileIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstancePrototypeInstanceByImage successfully`, func() {
				var primaryNetworkInterface *vpcv1.NetworkInterfacePrototype = nil
				var zone vpcv1.ZoneIdentityIntf = nil
				var image vpcv1.ImageIdentityIntf = nil
				_, err := testService.NewInstancePrototypeInstanceByImage(primaryNetworkInterface, zone, image)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewInstancePrototypeInstanceBySourceTemplate successfully`, func() {
				var sourceTemplate vpcv1.InstanceTemplateIdentityIntf = nil
				_, err := testService.NewInstancePrototypeInstanceBySourceTemplate(sourceTemplate)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewInstanceTemplateIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := testService.NewInstanceTemplateIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstanceTemplateIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := testService.NewInstanceTemplateIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstanceTemplateIdentityByID successfully`, func() {
				id := "a6b1a881-2ce8-41a3-80fc-36316a73f803"
				model, err := testService.NewInstanceTemplateIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstanceTemplatePrototypeInstanceByImage successfully`, func() {
				var primaryNetworkInterface *vpcv1.NetworkInterfacePrototype = nil
				var zone vpcv1.ZoneIdentityIntf = nil
				var image vpcv1.ImageIdentityIntf = nil
				_, err := testService.NewInstanceTemplatePrototypeInstanceByImage(primaryNetworkInterface, zone, image)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewInstanceTemplatePrototypeInstanceBySourceTemplate successfully`, func() {
				var sourceTemplate vpcv1.InstanceTemplateIdentityIntf = nil
				_, err := testService.NewInstanceTemplatePrototypeInstanceBySourceTemplate(sourceTemplate)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewKeyIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803"
				model, err := testService.NewKeyIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewKeyIdentityByFingerprint successfully`, func() {
				fingerprint := "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY"
				model, err := testService.NewKeyIdentityByFingerprint(fingerprint)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewKeyIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803"
				model, err := testService.NewKeyIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewKeyIdentityByID successfully`, func() {
				id := "a6b1a881-2ce8-41a3-80fc-36316a73f803"
				model, err := testService.NewKeyIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype successfully`, func() {
				httpStatusCode := int64(301)
				url := "https://www.redirect.com"
				model, err := testService.NewLoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype(httpStatusCode, url)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004"
				model, err := testService.NewLoadBalancerPoolIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolIdentityByID successfully`, func() {
				id := "70294e14-4e61-11e8-bcf4-0242ac110004"
				model, err := testService.NewLoadBalancerPoolIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolMemberTargetPrototypeByAddress successfully`, func() {
				address := "192.168.3.4"
				model, err := testService.NewLoadBalancerPoolMemberTargetPrototypeByAddress(address)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerProfileIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-small"
				model, err := testService.NewLoadBalancerProfileIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerProfileIdentityByName successfully`, func() {
				name := "network-small"
				model, err := testService.NewLoadBalancerProfileIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf"
				model, err := testService.NewNetworkACLIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf"
				model, err := testService.NewNetworkACLIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLIdentityByID successfully`, func() {
				id := "a4e28308-8ee7-46ab-8108-9f881f22bdbf"
				model, err := testService.NewNetworkACLIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLPrototypeNetworkACLByRules successfully`, func() {
				var vpc vpcv1.VPCIdentityIntf = nil
				_, err := testService.NewNetworkACLPrototypeNetworkACLByRules(vpc)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewNetworkACLPrototypeNetworkACLBySourceNetworkACL successfully`, func() {
				var vpc vpcv1.VPCIdentityIntf = nil
				var sourceNetworkAcl vpcv1.NetworkACLIdentityIntf = nil
				_, err := testService.NewNetworkACLPrototypeNetworkACLBySourceNetworkACL(vpc, sourceNetworkAcl)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewNetworkACLRulePatchBeforeNetworkACLRuleIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9"
				model, err := testService.NewNetworkACLRulePatchBeforeNetworkACLRuleIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePatchBeforeNetworkACLRuleIdentityByID successfully`, func() {
				id := "8daca77a-4980-4d33-8f3e-7038797be8f9"
				model, err := testService.NewNetworkACLRulePatchBeforeNetworkACLRuleIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeBeforeNetworkACLRuleIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9"
				model, err := testService.NewNetworkACLRulePrototypeBeforeNetworkACLRuleIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeBeforeNetworkACLRuleIdentityByID successfully`, func() {
				id := "8daca77a-4980-4d33-8f3e-7038797be8f9"
				model, err := testService.NewNetworkACLRulePrototypeBeforeNetworkACLRuleIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll successfully`, func() {
				id := "8daca77a-4980-4d33-8f3e-7038797be8f9"
				href := "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9"
				name := "my-rule-2"
				action := "allow"
				destination := "192.168.3.0/24"
				direction := "inbound"
				source := "192.168.3.0/24"
				createdAt := CreateMockDateTime()
				ipVersion := "ipv4"
				model, err := testService.NewNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll(id, href, name, action, destination, direction, source, createdAt, ipVersion)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP successfully`, func() {
				id := "8daca77a-4980-4d33-8f3e-7038797be8f9"
				href := "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9"
				name := "my-rule-2"
				action := "allow"
				destination := "192.168.3.0/24"
				direction := "inbound"
				source := "192.168.3.0/24"
				createdAt := CreateMockDateTime()
				ipVersion := "ipv4"
				model, err := testService.NewNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP(id, href, name, action, destination, direction, source, createdAt, ipVersion)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP successfully`, func() {
				id := "8daca77a-4980-4d33-8f3e-7038797be8f9"
				href := "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9"
				name := "my-rule-2"
				action := "allow"
				destination := "192.168.3.0/24"
				direction := "inbound"
				source := "192.168.3.0/24"
				createdAt := CreateMockDateTime()
				ipVersion := "ipv4"
				model, err := testService.NewNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP(id, href, name, action, destination, direction, source, createdAt, ipVersion)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeNetworkACLRuleProtocolAll successfully`, func() {
				id := "8daca77a-4980-4d33-8f3e-7038797be8f9"
				href := "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9"
				name := "my-rule-2"
				action := "allow"
				destination := "192.168.3.0/24"
				direction := "inbound"
				source := "192.168.3.0/24"
				createdAt := CreateMockDateTime()
				ipVersion := "ipv4"
				model, err := testService.NewNetworkACLRulePrototypeNetworkACLRuleProtocolAll(id, href, name, action, destination, direction, source, createdAt, ipVersion)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeNetworkACLRuleProtocolICMP successfully`, func() {
				id := "8daca77a-4980-4d33-8f3e-7038797be8f9"
				href := "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9"
				name := "my-rule-2"
				action := "allow"
				destination := "192.168.3.0/24"
				direction := "inbound"
				source := "192.168.3.0/24"
				createdAt := CreateMockDateTime()
				ipVersion := "ipv4"
				model, err := testService.NewNetworkACLRulePrototypeNetworkACLRuleProtocolICMP(id, href, name, action, destination, direction, source, createdAt, ipVersion)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP successfully`, func() {
				id := "8daca77a-4980-4d33-8f3e-7038797be8f9"
				href := "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9"
				name := "my-rule-2"
				action := "allow"
				destination := "192.168.3.0/24"
				direction := "inbound"
				source := "192.168.3.0/24"
				createdAt := CreateMockDateTime()
				ipVersion := "ipv4"
				model, err := testService.NewNetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP(id, href, name, action, destination, direction, source, createdAt, ipVersion)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkInterfaceIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e"
				model, err := testService.NewNetworkInterfaceIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkInterfaceIdentityByID successfully`, func() {
				id := "10c02d81-0ecb-4dc5-897d-28392913b81e"
				model, err := testService.NewNetworkInterfaceIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewOperatingSystemIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64"
				model, err := testService.NewOperatingSystemIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewOperatingSystemIdentityByName successfully`, func() {
				name := "ubuntu-16-amd64"
				model, err := testService.NewOperatingSystemIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241"
				model, err := testService.NewPublicGatewayIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241"
				model, err := testService.NewPublicGatewayIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayIdentityByID successfully`, func() {
				id := "dc5431ef-1fc6-4861-adc9-a59d077d1241"
				model, err := testService.NewPublicGatewayIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewResourceGroupIdentityByID successfully`, func() {
				id := "fee82deba12e4c0fb69c3b09d1f12345"
				model, err := testService.NewResourceGroupIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRouteNextHopPrototypeRouteNextHopIP successfully`, func() {
				address := "192.168.3.4"
				model, err := testService.NewRouteNextHopPrototypeRouteNextHopIP(address)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRoutingTableIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840"
				model, err := testService.NewRoutingTableIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRoutingTableIdentityByID successfully`, func() {
				id := "1a15dca5-7e33-45e1-b7c5-bc690e569531"
				model, err := testService.NewRoutingTableIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := testService.NewSecurityGroupIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := testService.NewSecurityGroupIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupIdentityByID successfully`, func() {
				id := "be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := testService.NewSecurityGroupIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePatchRemoteCIDR successfully`, func() {
				cidrBlock := "192.168.3.0/24"
				model, err := testService.NewSecurityGroupRulePatchRemoteCIDR(cidrBlock)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePatchRemoteIP successfully`, func() {
				address := "192.168.3.4"
				model, err := testService.NewSecurityGroupRulePatchRemoteIP(address)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeRemoteCIDR successfully`, func() {
				cidrBlock := "192.168.3.0/24"
				model, err := testService.NewSecurityGroupRulePrototypeRemoteCIDR(cidrBlock)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeRemoteIP successfully`, func() {
				address := "192.168.3.4"
				model, err := testService.NewSecurityGroupRulePrototypeRemoteIP(address)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteCIDR successfully`, func() {
				cidrBlock := "192.168.3.0/24"
				model, err := testService.NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteCIDR(cidrBlock)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteIP successfully`, func() {
				address := "192.168.3.4"
				model, err := testService.NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteIP(address)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupReference successfully`, func() {
				id := "be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				href := "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				name := "my-security-group"
				model, err := testService.NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupReference(id, crn, href, name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteCIDR successfully`, func() {
				cidrBlock := "192.168.3.0/24"
				model, err := testService.NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteCIDR(cidrBlock)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP successfully`, func() {
				address := "192.168.3.4"
				model, err := testService.NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP(address)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupReference successfully`, func() {
				id := "be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				href := "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				name := "my-security-group"
				model, err := testService.NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupReference(id, crn, href, name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteCIDR successfully`, func() {
				cidrBlock := "192.168.3.0/24"
				model, err := testService.NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteCIDR(cidrBlock)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteIP successfully`, func() {
				address := "192.168.3.4"
				model, err := testService.NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteIP(address)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupReference successfully`, func() {
				id := "be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				href := "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				name := "my-security-group"
				model, err := testService.NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupReference(id, crn, href, name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolAll successfully`, func() {
				id := "6f2a6efe-21e2-401c-b237-620aa26ba16a"
				href := "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a"
				direction := "inbound"
				var remote vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteIntf = nil
				_, err := testService.NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolAll(id, href, direction, remote)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP successfully`, func() {
				id := "6f2a6efe-21e2-401c-b237-620aa26ba16a"
				href := "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a"
				direction := "inbound"
				var remote vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIntf = nil
				_, err := testService.NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP(id, href, direction, remote)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP successfully`, func() {
				id := "6f2a6efe-21e2-401c-b237-620aa26ba16a"
				href := "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a"
				direction := "inbound"
				var remote vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteIntf = nil
				_, err := testService.NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP(id, href, direction, remote)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewSubnetIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e"
				model, err := testService.NewSubnetIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSubnetIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e"
				model, err := testService.NewSubnetIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSubnetIdentityByID successfully`, func() {
				id := "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"
				model, err := testService.NewSubnetIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSubnetPrototypeSubnetByCIDR successfully`, func() {
				var vpc vpcv1.VPCIdentityIntf = nil
				ipv4CidrBlock := "10.0.0.0/24"
				_, err := testService.NewSubnetPrototypeSubnetByCIDR(vpc, ipv4CidrBlock)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewSubnetPrototypeSubnetByTotalCount successfully`, func() {
				var vpc vpcv1.VPCIdentityIntf = nil
				totalIpv4AddressCount := int64(256)
				var zone vpcv1.ZoneIdentityIntf = nil
				_, err := testService.NewSubnetPrototypeSubnetByTotalCount(vpc, totalIpv4AddressCount, zone)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewVPCIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b"
				model, err := testService.NewVPCIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVPCIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b"
				model, err := testService.NewVPCIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVPCIdentityByID successfully`, func() {
				id := "4727d842-f94f-4a2d-824a-9bc9b02c523b"
				model, err := testService.NewVPCIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5"
				model, err := testService.NewVolumeIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5"
				model, err := testService.NewVolumeIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeIdentityByID successfully`, func() {
				id := "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"
				model, err := testService.NewVolumeIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeProfileIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose"
				model, err := testService.NewVolumeProfileIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeProfileIdentityByName successfully`, func() {
				name := "general-purpose"
				model, err := testService.NewVolumeProfileIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumePrototypeVolumeByCapacity successfully`, func() {
				var profile vpcv1.VolumeProfileIdentityIntf = nil
				var zone vpcv1.ZoneIdentityIntf = nil
				capacity := int64(100)
				_, err := testService.NewVolumePrototypeVolumeByCapacity(profile, zone, capacity)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewZoneIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"
				model, err := testService.NewZoneIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewZoneIdentityByName successfully`, func() {
				name := "us-south-1"
				model, err := testService.NewZoneIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := testService.NewFlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := testService.NewFlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByID successfully`, func() {
				id := "1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := testService.NewFlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e"
				model, err := testService.NewFlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID successfully`, func() {
				id := "10c02d81-0ecb-4dc5-897d-28392913b81e"
				model, err := testService.NewFlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e"
				model, err := testService.NewFlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e"
				model, err := testService.NewFlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByID successfully`, func() {
				id := "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"
				model, err := testService.NewFlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b"
				model, err := testService.NewFlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b"
				model, err := testService.NewFlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByID successfully`, func() {
				id := "4727d842-f94f-4a2d-824a-9bc9b02c523b"
				model, err := testService.NewFlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstancePlacementPrototypeDedicatedHostGroupIdentityDedicatedHostGroupIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0"
				model, err := testService.NewInstancePlacementPrototypeDedicatedHostGroupIdentityDedicatedHostGroupIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstancePlacementPrototypeDedicatedHostGroupIdentityDedicatedHostGroupIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0"
				model, err := testService.NewInstancePlacementPrototypeDedicatedHostGroupIdentityDedicatedHostGroupIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstancePlacementPrototypeDedicatedHostGroupIdentityDedicatedHostGroupIdentityByID successfully`, func() {
				id := "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0"
				model, err := testService.NewInstancePlacementPrototypeDedicatedHostGroupIdentityDedicatedHostGroupIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := testService.NewInstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := testService.NewInstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByID successfully`, func() {
				id := "1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := testService.NewInstancePlacementPrototypeDedicatedHostIdentityDedicatedHostIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004"
				model, err := testService.NewLoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID successfully`, func() {
				id := "70294e14-4e61-11e8-bcf4-0242ac110004"
				model, err := testService.NewLoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004"
				model, err := testService.NewLoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID successfully`, func() {
				id := "70294e14-4e61-11e8-bcf4-0242ac110004"
				model, err := testService.NewLoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := testService.NewLoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := testService.NewLoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID successfully`, func() {
				id := "1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := testService.NewLoadBalancerPoolMemberTargetPrototypeByInstanceInstanceIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress successfully`, func() {
				address := "203.0.113.1"
				model, err := testService.NewPublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress(address)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689"
				model, err := testService.NewPublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689"
				model, err := testService.NewPublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByID successfully`, func() {
				id := "39300233-9995-4806-89a5-3c1b6eb88689"
				model, err := testService.NewPublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRouteNextHopPrototypeRouteNextHopConnectionRouteNextHopConnectionVPNGatewayConnectionIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b"
				model, err := testService.NewRouteNextHopPrototypeRouteNextHopConnectionRouteNextHopConnectionVPNGatewayConnectionIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRouteNextHopPrototypeRouteNextHopConnectionRouteNextHopConnectionVPNGatewayConnectionIdentityByID successfully`, func() {
				id := "a10a5771-dc23-442c-8460-c3601d8542f7"
				model, err := testService.NewRouteNextHopPrototypeRouteNextHopConnectionRouteNextHopConnectionVPNGatewayConnectionIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := testService.NewSecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := testService.NewSecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByID successfully`, func() {
				id := "be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := testService.NewSecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := testService.NewSecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := testService.NewSecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByID successfully`, func() {
				id := "be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := testService.NewSecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5"
				model, err := testService.NewVolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5"
				model, err := testService.NewVolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByID successfully`, func() {
				id := "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"
				model, err := testService.NewVolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity successfully`, func() {
				var profile vpcv1.VolumeProfileIdentityIntf = nil
				capacity := int64(100)
				_, err := testService.NewVolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity(profile, capacity)
				Expect(err).ToNot(BeNil())
			})
		})
	})
	Describe(`Utility function tests`, func() {
		It(`Invoke CreateMockMap() successfully`, func() {
			mockMap := CreateMockMap()
			Expect(mockMap).ToNot(BeNil())
		})
		It(`Invoke CreateMockByteArray() successfully`, func() {
			mockByteArray := CreateMockByteArray("This is a test")
			Expect(mockByteArray).ToNot(BeNil())
		})
		It(`Invoke CreateMockUUID() successfully`, func() {
			mockUUID := CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
			Expect(mockUUID).ToNot(BeNil())
		})
		It(`Invoke CreateMockReader() successfully`, func() {
			mockReader := CreateMockReader("This is a test.")
			Expect(mockReader).ToNot(BeNil())
		})
		It(`Invoke CreateMockDate() successfully`, func() {
			mockDate := CreateMockDate()
			Expect(mockDate).ToNot(BeNil())
		})
		It(`Invoke CreateMockDateTime() successfully`, func() {
			mockDateTime := CreateMockDateTime()
			Expect(mockDateTime).ToNot(BeNil())
		})
	})
})

//
// Utility functions used by the generated test code
//

func CreateMockMap() map[string]interface{} {
	m := make(map[string]interface{})
	return m
}

func CreateMockByteArray(mockData string) *[]byte {
	ba := make([]byte, len(mockData))
	ba = append(ba, mockData...)
	return &ba
}

func CreateMockUUID(mockData string) *strfmt.UUID {
	uuid := strfmt.UUID(mockData)
	return &uuid
}

func CreateMockReader(mockData string) io.ReadCloser {
	return ioutil.NopCloser(bytes.NewReader([]byte(mockData)))
}

func CreateMockDate() *strfmt.Date {
	d := strfmt.Date(time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC))
	return &d
}

func CreateMockDateTime() *strfmt.DateTime {
	d := strfmt.DateTime(time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC))
	return &d
}

func SetTestEnvironment(testEnvironment map[string]string) {
	for key, value := range testEnvironment {
		os.Setenv(key, value)
	}
}

func ClearTestEnvironment(testEnvironment map[string]string) {
	for key := range testEnvironment {
		os.Unsetenv(key)
	}
}
